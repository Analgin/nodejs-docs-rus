diff -upr ./api_v0.4.12/debugger.markdown ./api_v0.6.12/debugger.markdown
--- ./api_v0.4.12/debugger.markdown	2011-03-05 21:47:20.000000000 +0300
+++ ./api_v0.6.12/debugger.markdown	2012-03-08 01:22:12.000000000 +0400
@@ -1,4 +1,6 @@
-## Debugger
+# Debugger
+
+<!-- type=misc -->
 
 V8 comes with an extensive debugger which is accessible out-of-process via a
 simple [TCP protocol](http://code.google.com/p/v8/wiki/DebuggerProtocol).
@@ -6,17 +8,14 @@ Node has a built-in client for this debu
 `debug` argument; a prompt will appear:
 
     % node debug myscript.js
+    < debugger listening on port 5858
+    connecting... ok
+    break in /home/indutny/Code/git/indutny/myscript.js:1
+      1 x = 5;
+      2 setTimeout(function () {
+      3   debugger;
     debug>
 
-At this point `myscript.js` is not yet running. To start the script, enter
-the command `run`. If everything works okay, the output should look like
-this:
-
-    % node debug myscript.js
-    debug> run
-    debugger listening on port 5858
-    connecting...ok
-
 Node's debugger client doesn't support the full range of commands, but
 simple step and inspection is possible. By putting the statement `debugger;`
 into the source code of your script, you will enable a breakpoint.
@@ -33,41 +32,103 @@ For example, suppose `myscript.js` looke
 
 Then once the debugger is run, it will break on line 4.
 
-    % ./node debug myscript.js
-    debug> run
-    debugger listening on port 5858
-    connecting...ok
-    hello
-    break in #<an Object>._onTimeout(), myscript.js:4
-      debugger;
-      ^
+    % node debug myscript.js
+    < debugger listening on port 5858
+    connecting... ok
+    break in /home/indutny/Code/git/indutny/myscript.js:1
+      1 x = 5;
+      2 setTimeout(function () {
+      3   debugger;
+    debug> cont
+    < hello
+    break in /home/indutny/Code/git/indutny/myscript.js:3
+      1 x = 5;
+      2 setTimeout(function () {
+      3   debugger;
+      4   console.log("world");
+      5 }, 1000);
     debug> next
-    break in #<an Object>._onTimeout(), myscript.js:5
-      console.log("world");
-      ^
-    debug> print x
+    break in /home/indutny/Code/git/indutny/myscript.js:4
+      2 setTimeout(function () {
+      3   debugger;
+      4   console.log("world");
+      5 }, 1000);
+      6 console.log("hello");
+    debug> repl
+    Press Ctrl + C to leave debug repl
+    > x
     5
-    debug> print 2+2
+    > 2+2
     4
     debug> next
-    world
-    break in #<an Object>._onTimeout() returning undefined, myscript.js:6
-    }, 1000);
-    ^
+    < world
+    break in /home/indutny/Code/git/indutny/myscript.js:5
+      3   debugger;
+      4   console.log("world");
+      5 }, 1000);
+      6 console.log("hello");
+      7
     debug> quit
-    A debugging session is active. Quit anyway? (y or n) y
     %
 
 
-The `print` command allows you to evaluate variables. The `next` command steps
-over to the next line. There are a few other commands available and more to
-come type `help` to see others.
+The `repl` command allows you to evaluate code remotely. The `next` command
+steps over to the next line. There are a few other commands available and more
+to come. Type `help` to see others.
+
+## Watchers
+
+You can watch expression and variable values while debugging your code.
+On every breakpoint each expression from the watchers list will be evaluated
+in the current context and displayed just before the breakpoint's source code
+listing.
+
+To start watching an expression, type `watch("my_expression")`. `watchers`
+prints the active watchers. To remove a watcher, type
+`unwatch("my_expression")`.
+
+## Commands reference
 
+### Stepping
 
-### Advanced Usage
+* `cont`, `c` - Continue execution
+* `next`, `n` - Step next
+* `step`, `s` - Step in
+* `out`, `o` - Step out
+
+### Breakpoints
+
+* `setBreakpoint()`, `sb()` - Set breakpoint on current line
+* `setBreakpoint('fn()')`, `sb(...)` - Set breakpoint on a first statement in
+functions body
+* `setBreakpoint('script.js', 1)`, `sb(...)` - Set breakpoint on first line of
+script.js
+* `clearBreakpoint`, `cb(...)` - Clear breakpoint
+
+### Info
+
+* `backtrace`, `bt` - Print backtrace of current execution frame
+* `list(5)` - List scripts source code with 5 line context (5 lines before and
+after)
+* `watch(expr)` - Add expression to watch list
+* `unwatch(expr)` - Remove expression from watch list
+* `watchers` - List all watchers and their values (automatically listed on each
+breakpoint)
+* `repl` - Open debugger's repl for evaluation in debugging script's context
+
+### Execution control
+
+* `run` - Run script (automatically runs on debugger's start)
+* `restart` - Restart script
+* `kill` - Kill script
+
+### Various
+
+* `scripts` - List all loaded scripts
+* `version` - Display v8's version
+
+## Advanced Usage
 
 The V8 debugger can be enabled and accessed either by starting Node with
 the `--debug` command-line flag or by signaling an existing Node process
 with `SIGUSR1`.
-
-
diff -upr ./api_v0.4.12/dgram.markdown ./api_v0.6.12/dgram.markdown
--- ./api_v0.4.12/dgram.markdown	2011-09-21 00:45:54.000000000 +0400
+++ ./api_v0.6.12/dgram.markdown	2012-03-08 01:22:12.000000000 +0400
@@ -1,59 +1,65 @@
-## UDP / Datagram Sockets
+# UDP / Datagram Sockets
 
-Datagram sockets are available through `require('dgram')`.  Datagrams are most commonly
-handled as IP/UDP messages but they can also be used over Unix domain sockets.
+<!-- name=dgram -->
+
+Datagram sockets are available through `require('dgram')`.
+
+## dgram.createSocket(type, [callback])
+
+* `type` String. Either 'udp4' or 'udp6'
+* `callback` Function. Attached as a listener to `message` events.
+  Optional
+* Returns: Socket object
+
+Creates a datagram Socket of the specified types.  Valid types are `udp4`
+and `udp6`.
+
+Takes an optional callback which is added as a listener for `message` events.
+
+Call `socket.bind` if you want to receive datagrams. `socket.bind()` will bind
+to the "all interfaces" address on a random port (it does the right thing for
+both `udp4` and `udp6` sockets). You can then retrieve the address and port
+with `socket.address().address` and `socket.address().port`.
+
+## Class: Socket
+
+The dgram Socket class encapsulates the datagram functionality.  It
+should be created via `dgram.createSocket(type, [callback])`.
 
 ### Event: 'message'
 
-`function (msg, rinfo) { }`
+* `msg` Buffer object. The message
+* `rinfo` Object. Remote address information
 
 Emitted when a new datagram is available on a socket.  `msg` is a `Buffer` and `rinfo` is
 an object with the sender's address information and the number of bytes in the datagram.
 
 ### Event: 'listening'
 
-`function () { }`
-
 Emitted when a socket starts listening for datagrams.  This happens as soon as UDP sockets
-are created.  Unix domain sockets do not start listening until calling `bind()` on them.
+are created.
 
 ### Event: 'close'
 
-`function () { }`
-
 Emitted when a socket is closed with `close()`.  No new `message` events will be emitted
 on this socket.
 
-### dgram.createSocket(type, [callback])
+### Event: 'error'
 
-Creates a datagram socket of the specified types.  Valid types are:
-`udp4`, `udp6`, and `unix_dgram`.
+* `exception` Error object
 
-Takes an optional callback which is added as a listener for `message` events.
-
-### dgram.send(buf, offset, length, path, [callback])
-
-For Unix domain datagram sockets, the destination address is a pathname in the filesystem.
-An optional callback may be supplied that is invoked after the `sendto` call is completed
-by the OS.  It is not safe to re-use `buf` until the callback is invoked.  Note that
-unless the socket is bound to a pathname with `bind()` there is no way to receive messages
-on this socket.
-
-Example of sending a message to syslogd on OSX via Unix domain socket `/var/run/syslog`:
-
-    var dgram = require('dgram');
-    var message = new Buffer("A message to log.");
-    var client = dgram.createSocket("unix_dgram");
-    client.send(message, 0, message.length, "/var/run/syslog",
-      function (err, bytes) {
-        if (err) {
-          throw err;
-        }
-        console.log("Wrote " + bytes + " bytes to socket.");
-    });
+Emitted when an error occurs.
 
 ### dgram.send(buf, offset, length, port, address, [callback])
 
+* `buf` Buffer object.  Message to be sent
+* `offset` Integer. Offset in the buffer where the message starts.
+* `length` Integer. Number of bytes in the message.
+* `port` Integer. destination port
+* `address` String. destination IP
+* `callback` Function. Callback when message is done being delivered.
+  Optional.
+
 For UDP sockets, the destination port and IP address must be specified.  A string
 may be supplied for the `address` parameter, and it will be resolved with DNS.  An
 optional callback may be specified to detect any DNS errors and when `buf` may be
@@ -61,62 +67,51 @@ re-used.  Note that DNS lookups will del
 least until the next tick.  The only way to know for sure that a send has taken place
 is to use the callback.
 
+If the socket has not been previously bound with a call to `bind`, it's
+assigned a random port number and bound to the "all interfaces" address
+(0.0.0.0 for `udp4` sockets, ::0 for `udp6` sockets).
+
 Example of sending a UDP packet to a random port on `localhost`;
 
     var dgram = require('dgram');
     var message = new Buffer("Some bytes");
     var client = dgram.createSocket("udp4");
-    client.send(message, 0, message.length, 41234, "localhost");
-    client.close();
-
-
-### dgram.bind(path)
-
-For Unix domain datagram sockets, start listening for incoming datagrams on a
-socket specified by `path`. Note that clients may `send()` without `bind()`,
-but no datagrams will be received without a `bind()`.
-
-Example of a Unix domain datagram server that echoes back all messages it receives:
-
-    var dgram = require("dgram");
-    var serverPath = "/tmp/dgram_server_sock";
-    var server = dgram.createSocket("unix_dgram");
-
-    server.on("message", function (msg, rinfo) {
-      console.log("got: " + msg + " from " + rinfo.address);
-      server.send(msg, 0, msg.length, rinfo.address);
+    client.send(message, 0, message.length, 41234, "localhost", function(err, bytes) {
+      client.close();
     });
 
-    server.on("listening", function () {
-      console.log("server listening " + server.address().address);
-    })
-
-    server.bind(serverPath);
-
-Example of a Unix domain datagram client that talks to this server:
+**A Note about UDP datagram size**
 
-    var dgram = require("dgram");
-    var serverPath = "/tmp/dgram_server_sock";
-    var clientPath = "/tmp/dgram_client_sock";
-
-    var message = new Buffer("A message at " + (new Date()));
+The maximum size of an `IPv4/v6` datagram depends on the `MTU` (_Maximum Transmission Unit_)
+and on the `Payload Length` field size.
 
-    var client = dgram.createSocket("unix_dgram");
-
-    client.on("message", function (msg, rinfo) {
-      console.log("got: " + msg + " from " + rinfo.address);
-    });
-
-    client.on("listening", function () {
-      console.log("client listening " + client.address().address);
-      client.send(message, 0, message.length, serverPath);
-    });
-
-    client.bind(clientPath);
+- The `Payload Length` field is `16 bits` wide, which means that a normal payload
+  cannot be larger than 64K octets including internet header and data
+  (65,507 bytes = 65,535 − 8 bytes UDP header − 20 bytes IP header);
+  this is generally true for loopback interfaces, but such long datagrams
+  are impractical for most hosts and networks.
+
+- The `MTU` is the largest size a given link layer technology can support for datagrams.
+  For any link, `IPv4` mandates a minimum `MTU` of `68` octets, while the recommended `MTU`
+  for IPv4 is `576` (typically recommended as the `MTU` for dial-up type applications),
+  whether they arrive whole or in fragments.
+
+  For `IPv6`, the minimum `MTU` is `1280` octets, however, the mandatory minimum
+  fragment reassembly buffer size is `1500` octets.
+  The value of `68` octets is very small, since most current link layer technologies have
+  a minimum `MTU` of `1500` (like Ethernet).
+
+Note that it's impossible to know in advance the MTU of each link through which
+a packet might travel, and that generally sending a datagram greater than
+the (receiver) `MTU` won't work (the packet gets silently dropped, without
+informing the source that the data did not reach its intended recipient).
 
 ### dgram.bind(port, [address])
 
-For UDP sockets, listen for datagrams on a named `port` and optional `address`.  If
+* `port` Integer
+* `address` String, Optional
+
+For UDP sockets, listen for datagrams on a named `port` and optional `address`. If
 `address` is not specified, the OS will try to listen on all addresses.
 
 Example of a UDP server listening on port 41234:
@@ -142,22 +137,24 @@ Example of a UDP server listening on por
 
 ### dgram.close()
 
-Close the underlying socket and stop listening for data on it.  UDP sockets
-automatically listen for messages, even if they did not call `bind()`.
+Close the underlying socket and stop listening for data on it.
 
 ### dgram.address()
 
 Returns an object containing the address information for a socket.  For UDP sockets,
-this object will contain `address` and `port`.  For Unix domain sockets, it will contain
-only `address`.
+this object will contain `address` and `port`.
 
 ### dgram.setBroadcast(flag)
 
+* `flag` Boolean
+
 Sets or clears the `SO_BROADCAST` socket option.  When this option is set, UDP packets
 may be sent to a local interface's broadcast address.
 
 ### dgram.setTTL(ttl)
 
+* `ttl` Integer
+
 Sets the `IP_TTL` socket option.  TTL stands for "Time to Live," but in this context it
 specifies the number of IP hops that a packet is allowed to go through.  Each router or
 gateway that forwards a packet decrements the TTL.  If the TTL is decremented to 0 by a
@@ -169,6 +166,8 @@ systems is 64.
 
 ### dgram.setMulticastTTL(ttl)
 
+* `ttl` Integer
+
 Sets the `IP_MULTICAST_TTL` socket option.  TTL stands for "Time to Live," but in this
 context it specifies the number of IP hops that a packet is allowed to go through,
 specifically for multicast traffic.  Each router or gateway that forwards a packet
@@ -179,11 +178,16 @@ systems is 64.
 
 ### dgram.setMulticastLoopback(flag)
 
+* `flag` Boolean
+
 Sets or clears the `IP_MULTICAST_LOOP` socket option.  When this option is set, multicast
 packets will also be received on the local interface.
 
 ### dgram.addMembership(multicastAddress, [multicastInterface])
 
+* `multicastAddress` String
+* `multicastInterface` String, Optional
+
 Tells the kernel to join a multicast group with `IP_ADD_MEMBERSHIP` socket option.
 
 If `multicastInterface` is not specified, the OS will try to add membership to all valid
@@ -191,6 +195,9 @@ interfaces.
 
 ### dgram.dropMembership(multicastAddress, [multicastInterface])
 
+* `multicastAddress` String
+* `multicastInterface` String, Optional
+
 Opposite of `addMembership` - tells the kernel to leave a multicast group with
 `IP_DROP_MEMBERSHIP` socket option. This is automatically called by the kernel
 when the socket is closed or process terminates, so most apps will never need to call
diff -upr ./api_v0.4.12/dns.markdown ./api_v0.6.12/dns.markdown
--- ./api_v0.4.12/dns.markdown	2011-06-01 20:53:38.000000000 +0400
+++ ./api_v0.6.12/dns.markdown	2012-03-08 01:22:12.000000000 +0400
@@ -1,6 +1,12 @@
-## DNS
+# DNS
 
-Use `require('dns')` to access this module.
+Use `require('dns')` to access this module. All methods in the dns module
+use C-Ares except for `dns.lookup` which uses `getaddrinfo(3)` in a thread
+pool. C-Ares is much faster than `getaddrinfo` but the system resolver is
+more constant with how other programs operate. When a user does
+`net.connect(80, 'google.com')` or `http.get({ host: 'google.com' })` the
+`dns.lookup` method is used. Users who need to do a large number of look ups
+quickly should use the methods that go through C-Ares.
 
 Here is an example which resolves `'www.google.com'` then reverse
 resolves the IP addresses which are returned.
@@ -25,10 +31,12 @@ resolves the IP addresses which are retu
       });
     });
 
-### dns.lookup(domain, family=null, callback)
+## dns.lookup(domain, [family], callback)
 
 Resolves a domain (e.g. `'google.com'`) into the first found A (IPv4) or
 AAAA (IPv6) record.
+The `family` can be the integer `4` or `6`. Defaults to `null` that indicates
+both Ip v4 and v6 address family.
 
 The callback has arguments `(err, address, family)`.  The `address` argument
 is a string representation of a IP v4 or v6 address. The `family` argument
@@ -36,13 +44,13 @@ is either the integer 4 or 6 and denotes
 necessarily the value initially passed to `lookup`).
 
 
-### dns.resolve(domain, rrtype='A', callback)
+## dns.resolve(domain, [rrtype], callback)
 
 Resolves a domain (e.g. `'google.com'`) into an array of the record types
-specified by rrtype. Valid rrtypes are `A` (IPV4 addresses), `AAAA` (IPV6
-addresses), `MX` (mail exchange records), `TXT` (text records), `SRV` (SRV
-records), `PTR` (used for reverse IP lookups), `NS` (name server records)
-and `CNAME` (canonical name records).
+specified by rrtype. Valid rrtypes are `'A'` (IPV4 addresses, default),
+`'AAAA'` (IPV6 addresses), `'MX'` (mail exchange records), `'TXT'` (text
+records), `'SRV'` (SRV records), `'PTR'` (used for reverse IP lookups),
+`'NS'` (name server records) and `'CNAME'` (canonical name records).
 
 The callback has arguments `(err, addresses)`.  The type of each item
 in `addresses` is determined by the record type, and described in the
@@ -53,50 +61,50 @@ one of the error codes listed below and
 the error in English.
 
 
-### dns.resolve4(domain, callback)
+## dns.resolve4(domain, callback)
 
 The same as `dns.resolve()`, but only for IPv4 queries (`A` records).
 `addresses` is an array of IPv4 addresses (e.g.
 `['74.125.79.104', '74.125.79.105', '74.125.79.106']`).
 
-### dns.resolve6(domain, callback)
+## dns.resolve6(domain, callback)
 
 The same as `dns.resolve4()` except for IPv6 queries (an `AAAA` query).
 
 
-### dns.resolveMx(domain, callback)
+## dns.resolveMx(domain, callback)
 
 The same as `dns.resolve()`, but only for mail exchange queries (`MX` records).
 
 `addresses` is an array of MX records, each with a priority and an exchange
 attribute (e.g. `[{'priority': 10, 'exchange': 'mx.example.com'},...]`).
 
-### dns.resolveTxt(domain, callback)
+## dns.resolveTxt(domain, callback)
 
 The same as `dns.resolve()`, but only for text queries (`TXT` records).
 `addresses` is an array of the text records available for `domain` (e.g.,
 `['v=spf1 ip4:0.0.0.0 ~all']`).
 
-### dns.resolveSrv(domain, callback)
+## dns.resolveSrv(domain, callback)
 
 The same as `dns.resolve()`, but only for service records (`SRV` records).
 `addresses` is an array of the SRV records available for `domain`. Properties
 of SRV records are priority, weight, port, and name (e.g.,
 `[{'priority': 10, {'weight': 5, 'port': 21223, 'name': 'service.example.com'}, ...]`).
 
-### dns.reverse(ip, callback)
+## dns.reverse(ip, callback)
 
 Reverse resolves an ip address to an array of domain names.
 
 The callback has arguments `(err, domains)`.
 
-### dns.resolveNs(domain, callback)
+## dns.resolveNs(domain, callback)
 
 The same as `dns.resolve()`, but only for name server records (`NS` records).
 `addresses` is an array of the name server records available for `domain`
 (e.g., `['ns1.example.com', 'ns2.example.com']`).
 
-### dns.resolveCname(domain, callback)
+## dns.resolveCname(domain, callback)
 
 The same as `dns.resolve()`, but only for canonical name records (`CNAME`
 records). `addresses` is an array of the canonical name records available for

diff -upr ./api_v0.4.12/events.markdown ./api_v0.6.12/events.markdown
--- ./api_v0.4.12/events.markdown	2011-09-21 00:45:30.000000000 +0400
+++ ./api_v0.6.12/events.markdown	2012-03-08 01:22:12.000000000 +0400
@@ -1,4 +1,6 @@
-## Events
+# Events
+
+<!--type=module-->
 
 Many objects in Node emit events: a `net.Server` emits an event each time
 a peer connects to it, a `fs.readStream` emits an event when the file is
@@ -12,7 +14,7 @@ Functions can then be attached to object
 is emitted. These functions are called _listeners_.
 
 
-### events.EventEmitter
+## Class: events.EventEmitter
 
 To access the EventEmitter class, `require('events').EventEmitter`.
 
@@ -24,8 +26,8 @@ trace and exit the program.
 All EventEmitters emit the event `'newListener'` when new listeners are
 added.
 
-#### emitter.addListener(event, listener)
-#### emitter.on(event, listener)
+### emitter.addListener(event, listener)
+### emitter.on(event, listener)
 
 Adds a listener to the end of the listeners array for the specified event.
 
@@ -33,17 +35,17 @@ Adds a listener to the end of the listen
       console.log('someone connected!');
     });
 
-#### emitter.once(event, listener)
+### emitter.once(event, listener)
 
-Adds a **one time** listener for the event. The listener is
-invoked only the first time the event is fired, after which
+Adds a **one time** listener for the event. This listener is
+invoked only the next time the event is fired, after which
 it is removed.
 
     server.once('connection', function (stream) {
       console.log('Ah, we have our first user!');
     });
 
-#### emitter.removeListener(event, listener)
+### emitter.removeListener(event, listener)
 
 Remove a listener from the listener array for the specified event.
 **Caution**: changes array indices in the listener array behind the listener.
@@ -56,20 +58,20 @@ Remove a listener from the listener arra
     server.removeListener('connection', callback);
 
 
-#### emitter.removeAllListeners(event)
+### emitter.removeAllListeners([event])
 
-Removes all listeners from the listener array for the specified event.
+Removes all listeners, or those of the specified event.
 
 
-#### emitter.setMaxListeners(n)
+### emitter.setMaxListeners(n)
 
 By default EventEmitters will print a warning if more than 10 listeners are
-added to it. This is a useful default which helps finding memory leaks.
+added for a particular event. This is a useful default which helps finding memory leaks.
 Obviously not all Emitters should be limited to 10. This function allows
 that to be increased. Set to zero for unlimited.
 
 
-#### emitter.listeners(event)
+### emitter.listeners(event)
 
 Returns an array of listeners for the specified event. This array can be
 manipulated, e.g. to remove listeners.
@@ -77,14 +79,15 @@ manipulated, e.g. to remove listeners.
     server.on('connection', function (stream) {
       console.log('someone connected!');
     });
-    console.log(util.inspect(server.listeners('connection')); // [ [Function] ]
+    console.log(util.inspect(server.listeners('connection'))); // [ [Function] ]
 
-#### emitter.emit(event, [arg1], [arg2], [...])
+### emitter.emit(event, [arg1], [arg2], [...])
 
 Execute each of the listeners in order with the supplied arguments.
 
-#### Event: 'newListener'
+### Event: 'newListener'
 
-`function (event, listener) { }`
+* `event` {String} The event name
+* `listener` {Function} The event handler function
 
 This event is emitted any time someone adds a new listener.
diff -upr ./api_v0.4.12/fs.markdown ./api_v0.6.12/fs.markdown
--- ./api_v0.4.12/fs.markdown	2011-09-21 00:45:54.000000000 +0400
+++ ./api_v0.6.12/fs.markdown	2012-03-08 01:22:12.000000000 +0400
@@ -1,4 +1,4 @@
-## File System
+# File System
 
 File I/O is provided by simple wrappers around standard POSIX functions.  To
 use this module do `require('fs')`. All the methods have asynchronous and
@@ -9,6 +9,9 @@ The arguments passed to the completion c
 first argument is always reserved for an exception. If the operation was
 completed successfully, then the first argument will be `null` or `undefined`.
 
+When using the synchronous form any exceptions are immediately thrown.
+You can use try/catch to handle exceptions or allow them to bubble up.
+
 Here is an example of the asynchronous version:
 
     var fs = require('fs');
@@ -55,215 +58,202 @@ the entire process until they complete--
 Relative path to filename can be used, remember however that this path will be relative
 to `process.cwd()`.
 
-### fs.rename(path1, path2, [callback])
+## fs.rename(path1, path2, [callback])
 
 Asynchronous rename(2). No arguments other than a possible exception are given
 to the completion callback.
 
-### fs.renameSync(path1, path2)
+## fs.renameSync(path1, path2)
 
 Synchronous rename(2).
 
-### fs.truncate(fd, len, [callback])
+## fs.truncate(fd, len, [callback])
 
 Asynchronous ftruncate(2). No arguments other than a possible exception are
 given to the completion callback.
 
-### fs.truncateSync(fd, len)
+## fs.truncateSync(fd, len)
 
 Synchronous ftruncate(2).
 
-### fs.chown(path, uid, gid, [callback])
+## fs.chown(path, uid, gid, [callback])
 
-Asycnronous chown(2). No arguments other than a possible exception are given
+Asynchronous chown(2). No arguments other than a possible exception are given
 to the completion callback.
 
-### fs.chownSync(path, uid, gid)
+## fs.chownSync(path, uid, gid)
 
 Synchronous chown(2).
 
-### fs.fchown(path, uid, gid, [callback])
+## fs.fchown(fd, uid, gid, [callback])
 
-Asycnronous fchown(2). No arguments other than a possible exception are given
+Asynchronous fchown(2). No arguments other than a possible exception are given
 to the completion callback.
 
-### fs.fchownSync(path, uid, gid)
+## fs.fchownSync(fd, uid, gid)
 
 Synchronous fchown(2).
 
-### fs.lchown(path, uid, gid, [callback])
+## fs.lchown(path, uid, gid, [callback])
 
-Asycnronous lchown(2). No arguments other than a possible exception are given
+Asynchronous lchown(2). No arguments other than a possible exception are given
 to the completion callback.
 
-### fs.lchownSync(path, uid, gid)
+## fs.lchownSync(path, uid, gid)
 
 Synchronous lchown(2).
 
-### fs.chmod(path, mode, [callback])
+## fs.chmod(path, mode, [callback])
 
 Asynchronous chmod(2). No arguments other than a possible exception are given
 to the completion callback.
 
-### fs.chmodSync(path, mode)
+## fs.chmodSync(path, mode)
 
 Synchronous chmod(2).
 
-### fs.fchmod(fd, mode, [callback])
+## fs.fchmod(fd, mode, [callback])
 
 Asynchronous fchmod(2). No arguments other than a possible exception
 are given to the completion callback.
 
-### fs.fchmodSync(path, mode)
+## fs.fchmodSync(fd, mode)
 
 Synchronous fchmod(2).
 
-### fs.lchmod(fd, mode, [callback])
+## fs.lchmod(path, mode, [callback])
 
 Asynchronous lchmod(2). No arguments other than a possible exception
 are given to the completion callback.
 
-### fs.lchmodSync(path, mode)
+## fs.lchmodSync(path, mode)
 
 Synchronous lchmod(2).
 
-### fs.stat(path, [callback])
+## fs.stat(path, [callback])
 
 Asynchronous stat(2). The callback gets two arguments `(err, stats)` where
-`stats` is a [`fs.Stats`](#fs.Stats) object. It looks like this:
+`stats` is a [fs.Stats](#fs.Stats) object.  See the [fs.Stats](#fs.Stats)
+section below for more information.
 
-    { dev: 2049,
-      ino: 305352,
-      mode: 16877,
-      nlink: 12,
-      uid: 1000,
-      gid: 1000,
-      rdev: 0,
-      size: 4096,
-      blksize: 4096,
-      blocks: 8,
-      atime: '2009-06-29T11:11:55Z',
-      mtime: '2009-06-29T11:11:40Z',
-      ctime: '2009-06-29T11:11:40Z' }
-
-See the [fs.Stats](#fs.Stats) section below for more information.
-
-### fs.lstat(path, [callback])
+## fs.lstat(path, [callback])
 
 Asynchronous lstat(2). The callback gets two arguments `(err, stats)` where
 `stats` is a `fs.Stats` object. `lstat()` is identical to `stat()`, except that if
 `path` is a symbolic link, then the link itself is stat-ed, not the file that it
 refers to.
 
-### fs.fstat(fd, [callback])
+## fs.fstat(fd, [callback])
 
 Asynchronous fstat(2). The callback gets two arguments `(err, stats)` where
 `stats` is a `fs.Stats` object. `fstat()` is identical to `stat()`, except that
 the file to be stat-ed is specified by the file descriptor `fd`.
 
-### fs.statSync(path)
+## fs.statSync(path)
 
 Synchronous stat(2). Returns an instance of `fs.Stats`.
 
-### fs.lstatSync(path)
+## fs.lstatSync(path)
 
 Synchronous lstat(2). Returns an instance of `fs.Stats`.
 
-### fs.fstatSync(fd)
+## fs.fstatSync(fd)
 
 Synchronous fstat(2). Returns an instance of `fs.Stats`.
 
-### fs.link(srcpath, dstpath, [callback])
+## fs.link(srcpath, dstpath, [callback])
 
 Asynchronous link(2). No arguments other than a possible exception are given to
 the completion callback.
 
-### fs.linkSync(srcpath, dstpath)
+## fs.linkSync(srcpath, dstpath)
 
 Synchronous link(2).
 
-### fs.symlink(linkdata, path, [callback])
+## fs.symlink(linkdata, path, [type], [callback])
 
 Asynchronous symlink(2). No arguments other than a possible exception are given
 to the completion callback.
+`type` argument can be either `'dir'` or `'file'` (default is `'file'`).  It is only 
+used on Windows (ignored on other platforms).
 
-### fs.symlinkSync(linkdata, path)
+## fs.symlinkSync(linkdata, path, [type])
 
 Synchronous symlink(2).
 
-### fs.readlink(path, [callback])
+## fs.readlink(path, [callback])
 
 Asynchronous readlink(2). The callback gets two arguments `(err,
-resolvedPath)`.
+linkString)`.
 
-### fs.readlinkSync(path)
+## fs.readlinkSync(path)
 
-Synchronous readlink(2). Returns the resolved path.
+Synchronous readlink(2). Returns the symbolic link's string value.
 
-### fs.realpath(path, [callback])
+## fs.realpath(path, [callback])
 
 Asynchronous realpath(2).  The callback gets two arguments `(err,
-resolvedPath)`.
+resolvedPath)`.  May use `process.cwd` to resolve relative paths.
 
-### fs.realpathSync(path)
+## fs.realpathSync(path)
 
 Synchronous realpath(2). Returns the resolved path.
 
-### fs.unlink(path, [callback])
+## fs.unlink(path, [callback])
 
 Asynchronous unlink(2). No arguments other than a possible exception are given
 to the completion callback.
 
-### fs.unlinkSync(path)
+## fs.unlinkSync(path)
 
 Synchronous unlink(2).
 
-### fs.rmdir(path, [callback])
+## fs.rmdir(path, [callback])
 
 Asynchronous rmdir(2). No arguments other than a possible exception are given
 to the completion callback.
 
-### fs.rmdirSync(path)
+## fs.rmdirSync(path)
 
 Synchronous rmdir(2).
 
-### fs.mkdir(path, mode, [callback])
+## fs.mkdir(path, [mode], [callback])
 
 Asynchronous mkdir(2). No arguments other than a possible exception are given
-to the completion callback.
+to the completion callback. `mode` defaults to `0777`.
 
-### fs.mkdirSync(path, mode)
+## fs.mkdirSync(path, [mode])
 
 Synchronous mkdir(2).
 
-### fs.readdir(path, [callback])
+## fs.readdir(path, [callback])
 
 Asynchronous readdir(3).  Reads the contents of a directory.
 The callback gets two arguments `(err, files)` where `files` is an array of
 the names of the files in the directory excluding `'.'` and `'..'`.
 
-### fs.readdirSync(path)
+## fs.readdirSync(path)
 
 Synchronous readdir(3). Returns an array of filenames excluding `'.'` and
 `'..'`.
 
-### fs.close(fd, [callback])
+## fs.close(fd, [callback])
 
 Asynchronous close(2).  No arguments other than a possible exception are given
 to the completion callback.
 
-### fs.closeSync(fd)
+## fs.closeSync(fd)
 
 Synchronous close(2).
 
-### fs.open(path, flags, [mode], [callback])
+## fs.open(path, flags, [mode], [callback])
 
 Asynchronous file open. See open(2). `flags` can be:
 
 * `'r'` - Open file for reading.
 An exception occurs if the file does not exist.
 
-* `'r+'` - Open file for reading and writing. 
+* `'r+'` - Open file for reading and writing.
 An exception occurs if the file does not exist.
 
 * `'w'` - Open file for writing.
@@ -280,11 +270,31 @@ The file is created if it does not exist
 
 `mode` defaults to `0666`. The callback gets two arguments `(err, fd)`.
 
-### fs.openSync(path, flags, [mode])
+## fs.openSync(path, flags, [mode])
 
 Synchronous open(2).
 
-### fs.write(fd, buffer, offset, length, position, [callback])
+## fs.utimes(path, atime, mtime, [callback])
+## fs.utimesSync(path, atime, mtime)
+
+Change file timestamps of the file referenced by the supplied path.
+
+## fs.futimes(fd, atime, mtime, [callback])
+## fs.futimesSync(fd, atime, mtime)
+
+Change the file timestamps of a file referenced by the supplied file
+descriptor.
+
+## fs.fsync(fd, [callback])
+
+Asynchronous fsync(2). No arguments other than a possible exception are given
+to the completion callback.
+
+## fs.fsyncSync(fd)
+
+Synchronous fsync(2).
+
+## fs.write(fd, buffer, offset, length, position, [callback])
 
 Write `buffer` to the file specified by `fd`.
 
@@ -296,23 +306,23 @@ current position.
 See pwrite(2).
 
 The callback will be given three arguments `(err, written, buffer)` where `written`
-specifies how many _bytes_ were written into `buffer`.
+specifies how many _bytes_ were written from `buffer`.
 
 Note that it is unsafe to use `fs.write` multiple times on the same file
 without waiting for the callback. For this scenario,
 `fs.createWriteStream` is strongly recommended.
 
-### fs.writeSync(fd, buffer, offset, length, position)
+## fs.writeSync(fd, buffer, offset, length, position)
 
 Synchronous version of buffer-based `fs.write()`. Returns the number of bytes
 written.
 
-### fs.writeSync(fd, str, position, encoding='utf8')
+## fs.writeSync(fd, str, position, [encoding])
 
-Synchronous version of string-based `fs.write()`. Returns the number of bytes
-written.
+Synchronous version of string-based `fs.write()`. `encoding` defaults to
+`'utf8'`. Returns the number of _bytes_ written.
 
-### fs.read(fd, buffer, offset, length, position, [callback])
+## fs.read(fd, buffer, offset, length, position, [callback])
 
 Read data from the file specified by `fd`.
 
@@ -327,17 +337,17 @@ If `position` is `null`, data will be re
 
 The callback is given the three arguments, `(err, bytesRead, buffer)`.
 
-### fs.readSync(fd, buffer, offset, length, position)
+## fs.readSync(fd, buffer, offset, length, position)
 
 Synchronous version of buffer-based `fs.read`. Returns the number of
 `bytesRead`.
 
-### fs.readSync(fd, length, position, encoding)
+## fs.readSync(fd, length, position, encoding)
 
 Synchronous version of string-based `fs.read`. Returns the number of
 `bytesRead`.
 
-### fs.readFile(filename, [encoding], [callback])
+## fs.readFile(filename, [encoding], [callback])
 
 Asynchronously reads the entire contents of a file. Example:
 
@@ -352,7 +362,7 @@ contents of the file.
 If no encoding is specified, then the raw buffer is returned.
 
 
-### fs.readFileSync(filename, [encoding])
+## fs.readFileSync(filename, [encoding])
 
 Synchronous version of `fs.readFile`. Returns the contents of the `filename`.
 
@@ -360,10 +370,11 @@ If `encoding` is specified then this fun
 returns a buffer.
 
 
-### fs.writeFile(filename, data, encoding='utf8', [callback])
+## fs.writeFile(filename, data, [encoding], [callback])
 
 Asynchronously writes data to a file, replacing the file if it already exists.
-`data` can be a string or a buffer.
+`data` can be a string or a buffer. The `encoding` argument is ignored if
+`data` is a buffer. It defaults to `'utf8'`.
 
 Example:
 
@@ -372,18 +383,21 @@ Example:
       console.log('It\'s saved!');
     });
 
-### fs.writeFileSync(filename, data, encoding='utf8')
+## fs.writeFileSync(filename, data, [encoding])
 
 The synchronous version of `fs.writeFile`.
 
-### fs.watchFile(filename, [options], listener)
+## fs.watchFile(filename, [options], listener)
 
 Watch for changes on `filename`. The callback `listener` will be called each
 time the file is accessed.
 
 The second argument is optional. The `options` if provided should be an object
-containing two members a boolean, `persistent`, and `interval`, a polling
-value in milliseconds. The default is `{ persistent: true, interval: 0 }`.
+containing two members a boolean, `persistent`, and `interval`. `persistent`
+indicates whether the process should continue to run as long as files are
+being watched. `interval` indicates how often the target should be polled,
+in milliseconds. (On Linux systems with inotify, `interval` is ignored.) The
+default is `{ persistent: true, interval: 0 }`.
 
 The `listener` gets two arguments the current stat object and the previous
 stat object:
@@ -399,13 +413,44 @@ If you want to be notified when the file
 you need to compare `curr.mtime` and `prev.mtime`.
 
 
-### fs.unwatchFile(filename)
+## fs.unwatchFile(filename)
 
 Stop watching for changes on `filename`.
 
-## fs.Stats
+## fs.watch(filename, [options], listener)
+
+Watch for changes on `filename`, where `filename` is either a file or a
+directory.  The returned object is [fs.FSWatcher](#fs.FSWatcher).
+
+The second argument is optional. The `options` if provided should be an object
+containing a boolean member `persistent`, which indicates whether the process
+should continue to run as long as files are being watched. The default is
+`{ persistent: true }`.
+
+The listener callback gets two arguments `(event, filename)`.  `event` is either
+'rename' or 'change', and `filename` is the name of the file which triggered
+the event.
+
+***Warning:***
+Providing `filename` argument in the callback is not supported
+on every platform (currently it's only supported on Linux and Windows).  Even
+on supported platforms `filename` is not always guaranteed to be provided.
+Therefore, don't assume that `filename` argument is always provided in the
+callback, and have some fallback logic if it is null.
+
+    fs.watch('somedir', function (event, filename) {
+      console.log('event is: ' + event);
+	  if (filename) {
+        console.log('filename provided: ' + filename);
+	  } else {
+	    console.log('filename not provided');
+	  }
+    });
+
+## Class: fs.Stats
 
-Objects returned from `fs.stat()` and `fs.lstat()` are of this type.
+Objects returned from `fs.stat()`, `fs.lstat()` and `fs.fstat()` and their
+synchronous counterparts are of this type.
 
  - `stats.isFile()`
  - `stats.isDirectory()`
@@ -415,18 +460,38 @@ Objects returned from `fs.stat()` and `f
  - `stats.isFIFO()`
  - `stats.isSocket()`
 
+For a regular file `util.inspect(stats)` would return a string very
+similar to this:
 
-## fs.ReadStream
-
-`ReadStream` is a `Readable Stream`.
-
-### Event: 'open'
+    { dev: 2114,
+      ino: 48064969,
+      mode: 33188,
+      nlink: 1,
+      uid: 85,
+      gid: 100,
+      rdev: 0,
+      size: 527,
+      blksize: 4096,
+      blocks: 8,
+      atime: Mon, 10 Oct 2011 23:24:11 GMT,
+      mtime: Mon, 10 Oct 2011 23:24:11 GMT,
+      ctime: Mon, 10 Oct 2011 23:24:11 GMT }
+
+Please note that `atime`, `mtime` and `ctime` are instances
+of [Date][MDN-Date] object and to compare the values of
+these objects you should use appropriate methods. For most
+general uses [getTime()][MDN-Date-getTime] will return
+the number of milliseconds elapsed since _1 January 1970
+00:00:00 UTC_ and this integer should be sufficient for
+any comparison, however there additional methods which can
+be used for displaying fuzzy information. More details can
+be found in the [MDN JavaScript Reference][MDN-Date] page.
 
-`function (fd) { }`
+[MDN-Date]: https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date
+[MDN-Date-getTime]: https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date/getTime
 
- `fd` is the file descriptor used by the ReadStream.
 
-### fs.createReadStream(path, [options])
+## fs.createReadStream(path, [options])
 
 Returns a new ReadStream object (See `Readable Stream`).
 
@@ -448,17 +513,18 @@ An example to read the last 10 bytes of
     fs.createReadStream('sample.txt', {start: 90, end: 99});
 
 
-## fs.WriteStream
+## Class: fs.ReadStream
 
-`WriteStream` is a `Writable Stream`.
+`ReadStream` is a [Readable Stream](stream.html#readable_stream).
 
 ### Event: 'open'
 
 `function (fd) { }`
 
- `fd` is the file descriptor used by the WriteStream.
+ `fd` is the file descriptor used by the ReadStream.
+
 
-### fs.createWriteStream(path, [options])
+## fs.createWriteStream(path, [options])
 
 Returns a new WriteStream object (See `Writable Stream`).
 
@@ -467,3 +533,45 @@ Returns a new WriteStream object (See `W
     { flags: 'w',
       encoding: null,
       mode: 0666 }
+
+`options` may also include a `start` option to allow writing data at
+some position past the beginning of the file.  Modifying a file rather
+than replacing it may require a `flags` mode of `r+` rather than the
+default mode `w`.
+
+## fs.WriteStream
+
+`WriteStream` is a [Writable Stream](stream.html#writable_stream).
+
+### Event: 'open'
+
+`function (fd) { }`
+
+ `fd` is the file descriptor used by the WriteStream.
+
+### file.bytesWritten
+
+The number of bytes written so far. Does not include data that is still queued
+for writing.
+
+## Class: fs.FSWatcher
+
+Objects returned from `fs.watch()` are of this type.
+
+### watcher.close()
+
+Stop watching for changes on the given `fs.FSWatcher`.
+
+### Event: 'change'
+
+* `event` {String} The type of fs change
+* `filename` {String} The filename that changed (if relevant/available)
+
+Emitted when something changes in a watched directory or file.
+See more details in [fs.watch](#fs.watch).
+
+### Event: 'error'
+
+`function (exception) {}`
+
+Emitted when an error occurs.
diff -upr ./api_v0.4.12/globals.markdown ./api_v0.6.12/globals.markdown
--- ./api_v0.4.12/globals.markdown	2011-09-21 00:45:54.000000000 +0400
+++ ./api_v0.6.12/globals.markdown	2012-03-08 01:22:12.000000000 +0400
@@ -1,27 +1,50 @@
-## Global Objects
+# Global Objects
 
-These object are available in all modules. Some of these objects aren't
+<!-- type=misc -->
+
+These objects are available in all modules. Some of these objects aren't
 actually in the global scope but in the module scope - this will be noted.
 
-### global
+## global
+
+<!-- type=global -->
 
-The global namespace object.
+* {Object} The global namespace object.
 
 In browsers, the top-level scope is the global scope. That means that in
 browsers if you're in the global scope `var something` will define a global
 variable. In Node this is different. The top-level scope is not the global
 scope; `var something` inside a Node module will be local to that module.
 
-### process
+## process
+
+<!-- type=global -->
+
+* {Object}
 
 The process object. See the [process object](process.html#process) section.
 
-### console
+## console
+
+<!-- type=global -->
+
+* {Object}
 
 Used to print to stdout and stderr. See the [stdio](stdio.html) section.
 
+## Buffer
 
-### require()
+<!-- type=global -->
+
+* {Object}
+
+Used to handle binary data. See the [buffer section](buffer.html).
+
+## require()
+
+<!-- type=var -->
+
+* {Function}
 
 To require modules. See the [Modules](modules.html#modules) section.
 `require` isn't actually a global but rather local to each module.
@@ -34,24 +57,21 @@ but rather than loading the module, just
 
 ### require.cache
 
+* {Object}
+
 Modules are cached in this object when they are required. By deleting a key
 value from this object, the next `require` will reload the module.
 
+## __filename
 
-### require.paths
+<!-- type=var -->
 
-An array of search paths for `require()`.  This array can be modified to add
-custom paths.
+* {String}
 
-Example: add a new path to the beginning of the search list
-
-    require.paths.unshift('/usr/local/node');
-
-
-### __filename
-
-The filename of the script being executed.  This is the absolute path, and not necessarily
-the same filename passed in as a command line argument.
+The filename of the code being executed.  This is the resolved absolute path
+of this code file.  For a main program this is not necessarily the same
+filename used in the command line.  The value inside a module is the path
+to that module file.
 
 Example: running `node example.js` from `/Users/mjr`
 
@@ -60,9 +80,13 @@ Example: running `node example.js` from
 
 `__filename` isn't actually a global but rather local to each module.
 
-### __dirname
+## __dirname
+
+<!-- type=var -->
+
+* {String}
 
-The dirname of the script being executed.
+The name of the directory that the currently executing script resides in.
 
 Example: running `node example.js` from `/Users/mjr`
 
@@ -72,7 +96,11 @@ Example: running `node example.js` from
 `__dirname` isn't actually a global but rather local to each module.
 
 
-### module
+## module
+
+<!-- type=var -->
+
+* {Object}
 
 A reference to the current module. In particular
 `module.exports` is the same as the `exports` object. See `src/node.js`
@@ -80,7 +108,9 @@ for more information.
 `module` isn't actually a global but rather local to each module.
 
 
-### exports
+## exports
+
+<!-- type=var -->
 
 An object which is shared between all instances of the current module and
 made accessible through `require()`.
@@ -88,9 +118,16 @@ made accessible through `require()`.
 for more information.
 `exports` isn't actually a global but rather local to each module.
 
-### setTimeout(cb, ms)
-### clearTimeout(t)
-### setInterval(cb, ms)
-### clearInterval(t)
+See the [module system documentation](modules.html) for more
+information.
+
+See the [module section](modules.html) for more information.
+
+## setTimeout(cb, ms)
+## clearTimeout(t)
+## setInterval(cb, ms)
+## clearInterval(t)
+
+<!--type=global-->
 
 The timer functions are global variables. See the [timers](timers.html) section.
diff -upr ./api_v0.4.12/http.markdown ./api_v0.6.12/http.markdown
--- ./api_v0.4.12/http.markdown	2011-09-21 00:45:54.000000000 +0400
+++ ./api_v0.6.12/http.markdown	2012-03-08 01:22:12.000000000 +0400
@@ -1,4 +1,4 @@
-## HTTP
+# HTTP
 
 To use the HTTP server and client one must `require('http')`.
 
@@ -23,7 +23,14 @@ parsing only. It parses a message into h
 parse the actual headers or the body.
 
 
-## http.Server
+## http.createServer([requestListener])
+
+Returns a new web server object.
+
+The `requestListener` is a function which is automatically
+added to the `'request'` event.
+
+## Class: http.Server
 
 This is an `EventEmitter` with the following events:
 
@@ -31,7 +38,7 @@ This is an `EventEmitter` with the follo
 
 `function (request, response) { }`
 
-Emitted each time there is request. Note that there may be multiple requests
+Emitted each time there is a request. Note that there may be multiple requests
 per connection (in the case of keep-alive connections).
  `request` is an instance of `http.ServerRequest` and `response` is
  an instance of `http.ServerResponse`
@@ -46,7 +53,7 @@ per connection (in the case of keep-aliv
 
 ### Event: 'close'
 
-`function (errno) { }`
+`function () { }`
 
  Emitted when the server closes.
 
@@ -88,13 +95,6 @@ sent to the server on that socket.
 
 If a client connection emits an 'error' event - it will forwarded here.
 
-### http.createServer([requestListener])
-
-Returns a new web server object.
-
-The `requestListener` is a function which is automatically
-added to the `'request'` event.
-
 ### server.listen(port, [hostname], [callback])
 
 Begin accepting connections on the specified port and hostname.  If the
@@ -103,40 +103,44 @@ IPv4 address (`INADDR_ANY`).
 
 To listen to a unix socket, supply a filename instead of port and hostname.
 
-This function is asynchronous. The last parameter `callback` will be called
-when the server has been bound to the port.
+This function is asynchronous. The last parameter `callback` will be added as
+a listener for the ['listening'](net.html#event_listening_) event.
+See also [net.Server.listen()](net.html#server.listen).
 
 
 ### server.listen(path, [callback])
 
 Start a UNIX socket server listening for connections on the given `path`.
 
-This function is asynchronous. The last parameter `callback` will be called
-when the server has been bound.
+This function is asynchronous. The last parameter `callback` will be added as
+a listener for the ['listening'](net.html#event_listening_) event.
+See also [net.Server.listen()](net.html#server.listen).
 
 
 ### server.close()
 
 Stops the server from accepting new connections.
+See [net.Server.close()](net.html#server.close).
 
 
-## http.ServerRequest
+## Class: http.ServerRequest
 
 This object is created internally by a HTTP server -- not by
 the user -- and passed as the first argument to a `'request'` listener.
 
-This is an `EventEmitter` with the following events:
+The request implements the [Readable Stream](stream.html#readable_stream)
+interface. This is an `EventEmitter` with the following events:
 
 ### Event: 'data'
 
 `function (chunk) { }`
 
-Emitted when a piece of the message body is received.
+Emitted when a piece of the message body is received. The chunk is a string if
+an encoding has been set with `request.setEncoding()`, otherwise it's a
+[Buffer](buffer.html).
 
-Example: A chunk of the body is given as the single
-argument. The transfer-encoding has been decoded.  The
-body chunk is a string.  The body encoding is set with
-`request.setEncoding()`.
+Note that the __data will be lost__ if there is no listener when a
+`ServerRequest` emits a `'data'` event.
 
 ### Event: 'end'
 
@@ -147,20 +151,11 @@ will be emitted on the request.
 
 ### Event: 'close'
 
-`function (err) { }`
+`function () { }`
 
 Indicates that the underlaying connection was terminated before
 `response.end()` was called or able to flush.
 
-The `err` parameter is always present and indicates the reason for the timeout:
-
-`err.code === 'timeout'` indicates that the underlaying connection timed out.
-This may happen because all incoming connections have a default timeout of 2
-minutes.
-
-`err.code === 'aborted'` means that the client has closed the underlaying
-connection prematurely.
-
 Just like `'end'`, this event occurs only once per request, and no more `'data'`
 events will fire afterwards.
 
@@ -222,7 +217,7 @@ Also `request.httpVersionMajor` is the f
 `request.httpVersionMinor` is the second.
 
 
-### request.setEncoding(encoding=null)
+### request.setEncoding([encoding])
 
 Set the encoding for the request body. Either `'utf8'` or `'binary'`. Defaults
 to `null`, which means that the `'data'` event will emit a `Buffer` object..
@@ -248,10 +243,20 @@ authentication details.
 
 
 
-## http.ServerResponse
+## Class: http.ServerResponse
 
 This object is created internally by a HTTP server--not by the user. It is
-passed as the second parameter to the `'request'` event. It is a `Writable Stream`.
+passed as the second parameter to the `'request'` event.
+
+The response implements the [Writable  Stream](stream.html#writable_stream)
+interface. This is an `EventEmitter` with the following events:
+
+### Event: 'close'
+
+`function () { }`
+
+Indicates that the underlaying connection was terminated before
+`response.end()` was called or able to flush.
 
 ### response.writeContinue()
 
@@ -302,7 +307,7 @@ status code which was sent out.
 ### response.setHeader(name, value)
 
 Sets a single header value for implicit headers.  If this header already exists
-in the to-be-sent headers, it's value will be replaced.  Use an array of strings
+in the to-be-sent headers, its value will be replaced.  Use an array of strings
 here if you need to send multiple headers with the same name.
 
 Example:
@@ -333,7 +338,7 @@ Example:
     response.removeHeader("Content-Encoding");
 
 
-### response.write(chunk, encoding='utf8')
+### response.write(chunk, [encoding])
 
 If this method is called and `response.writeHead()` has not been called, it will
 switch to implicit header mode and flush the implicit headers.
@@ -367,7 +372,7 @@ Note that HTTP requires the `Trailer` he
 emit trailers, with a list of the header fields in its value. E.g.,
 
     response.writeHead(200, { 'Content-Type': 'text/plain',
-                              'Trailer': 'TraceInfo' });
+                              'Trailer': 'Content-MD5' });
     response.write(fileData);
     response.addTrailers({'Content-MD5': "7895bf4b8828b55ceaf47747b4bca667"});
     response.end();
@@ -387,21 +392,29 @@ followed by `response.end()`.
 ## http.request(options, callback)
 
 Node maintains several connections per server to make HTTP requests.
-This function allows one to transparently issue requests.
+This function allows one to transparently issue requests.  `options` align
+with [url.parse()](url.html#url.parse).
 
 Options:
 
 - `host`: A domain name or IP address of the server to issue the request to.
-- `port`: Port of remote server.
-- `method`: A string specifying the HTTP request method. Possible values:
-  `'GET'` (default), `'POST'`, `'PUT'`, and `'DELETE'`.
-- `path`: Request path. Should include query string and fragments if any.
-   E.G. `'/index.html?page=12'`
+  Defaults to `'localhost'`.
+- `hostname`: To support `url.parse()` `hostname` is preferred over `host`
+- `port`: Port of remote server. Defaults to 80.
+- `socketPath`: Unix Domain Socket (use one of host:port or socketPath)
+- `method`: A string specifying the HTTP request method. Defaults to `'GET'`.
+- `path`: Request path. Defaults to `'/'`. Should include query string if any.
+  E.G. `'/index.html?page=12'`
 - `headers`: An object containing request headers.
-- `agent`: Controls `Agent` behavior. Possible values:
- - `undefined` (default): use default `Agent` for this host and port.
+- `auth`: Basic authentication i.e. `'user:password'` to compute an
+  Authorization header.
+- `agent`: Controls [Agent](#http.Agent) behavior. When an Agent is used
+  request will default to `Connection: keep-alive`. Possible values:
+ - `undefined` (default): use [global Agent](#http.globalAgent) for this host
+   and port.
  - `Agent` object: explicitly use the passed in `Agent`.
- - `false`: explicitly generate a new `Agent` for this host and port. `Agent` will not be re-used.
+ - `false`: opts out of connection pooling with an Agent, defaults request to
+   `Connection: close`.
 
 `http.request()` returns an instance of the `http.ClientRequest`
 class. The `ClientRequest` instance is a writable stream. If one needs to
@@ -454,6 +467,9 @@ There are a few special headers that sho
   and listen for the `continue` event. See RFC2616 Section 8.2.3 for more
   information.
 
+* Sending an Authorization header will override using the `auth` option
+  to compute basic authentication.
+
 ## http.get(options, callback)
 
 Since most requests are GET requests without bodies, Node provides this
@@ -475,85 +491,59 @@ Example:
     });
 
 
-## http.Agent
-## http.getAgent(host, port)
-
-`http.request()` uses a special `Agent` for managing multiple connections to
-an HTTP server. Normally `Agent` instances should not be exposed to user
-code, however in certain situations it's useful to check the status of the
-agent. The `http.getAgent()` function allows you to access the agents.
+## Class: http.Agent
 
-### Event: 'upgrade'
-
-`function (response, socket, head) { }`
-
-Emitted each time a server responds to a request with an upgrade. If this
-event isn't being listened for, clients receiving an upgrade header will have
-their connections closed.
+In node 0.5.3+ there is a new implementation of the HTTP Agent which is used
+for pooling sockets used in HTTP client requests.
 
-A client server pair that show you how to listen for the `upgrade` event using `http.getAgent`:
+Previously, a single agent instance help the pool for single host+port. The
+current implementation now holds sockets for any number of hosts.
 
-    var http = require('http');
-    var net = require('net');
+The current HTTP Agent also defaults client requests to using
+Connection:keep-alive. If no pending HTTP requests are waiting on a socket
+to become free the socket is closed. This means that node's pool has the
+benefit of keep-alive when under load but still does not require developers
+to manually close the HTTP clients using keep-alive.
+
+Sockets are removed from the agent's pool when the socket emits either a
+"close" event or a special "agentRemove" event. This means that if you intend
+to keep one HTTP request open for a long time and don't want it to stay in the
+pool you can do something along the lines of:
 
-    // Create an HTTP server
-    var srv = http.createServer(function (req, res) {
-      res.writeHead(200, {'Content-Type': 'text/plain'});
-      res.end('okay');
-    });
-    srv.on('upgrade', function(req, socket, upgradeHead) {
-      socket.write('HTTP/1.1 101 Web Socket Protocol Handshake\r\n' +
-                   'Upgrade: WebSocket\r\n' +
-                   'Connection: Upgrade\r\n' +
-                   '\r\n\r\n');
-
-      socket.ondata = function(data, start, end) {
-        socket.write(data.toString('utf8', start, end), 'utf8'); // echo back
-      };
+    http.get(options, function(res) {
+      // Do stuff
+    }).on("socket", function (socket) {
+      socket.emit("agentRemove");
     });
 
-    // now that server is running
-    srv.listen(1337, '127.0.0.1', function() {
-
-      // make a request
-      var agent = http.getAgent('127.0.0.1', 1337);
-
-      var options = {
-        agent: agent,
-        port: 1337,
-        host: '127.0.0.1',
-        headers: {
-          'Connection': 'Upgrade',
-          'Upgrade': 'websocket'
-        }
-      };
-
-      var req = http.request(options);
-      req.end();
-
-      agent.on('upgrade', function(res, socket, upgradeHead) {
-        console.log('got upgraded!');
-        socket.end();
-        process.exit(0);
-      });
-    });
+Alternatively, you could just opt out of pooling entirely using `agent:false`:
 
+    http.get({host:'localhost', port:80, path:'/', agent:false}, function (res) {
+      // Do stuff
+    })
 
 ### agent.maxSockets
 
-By default set to 5. Determines how many concurrent sockets the agent can have open.
+By default set to 5. Determines how many concurrent sockets the agent can have 
+open per host.
 
 ### agent.sockets
 
-An array of sockets currently in use by the Agent. Do not modify.
+An object which contains arrays of sockets currently in use by the Agent. Do not 
+modify.
+
+### agent.requests
 
-### agent.queue
+An object which contains queues of requests that have not yet been assigned to 
+sockets. Do not modify.
 
-A queue of requests waiting to be sent to sockets.
+## http.globalAgent
 
+Global instance of Agent which is used as the default for all http client
+requests.
 
 
-## http.ClientRequest
+## Class: http.ClientRequest
 
 This object is created internally and returned from `http.request()`.  It
 represents an _in-progress_ request whose header has already been queued.  The
@@ -590,19 +580,11 @@ event, the entire body will be caught.
       }, 10);
     });
 
-This is a `Writable Stream`.
 Note: Node does not check whether Content-Length and the length of the body
 which has been transmitted are equal or not.
 
-This is an `EventEmitter` with the following events:
-
-### Event: 'continue'
-
-`function () { }`
-
-Emitted when the server sends a '100 Continue' HTTP response, usually because
-the request contained 'Expect: 100-continue'. This is an instruction that
-the client should send the request body.
+The request implements the [Writable  Stream](stream.html#writable_stream)
+interface. This is an `EventEmitter` with the following events:
 
 ### Event 'response'
 
@@ -611,8 +593,79 @@ the client should send the request body.
 Emitted when a response is received to this request. This event is emitted only once. The
 `response` argument will be an instance of `http.ClientResponse`.
 
+Options:
+
+- `host`: A domain name or IP address of the server to issue the request to.
+- `port`: Port of remote server.
+- `socketPath`: Unix Domain Socket (use one of host:port or socketPath)
 
-### request.write(chunk, encoding='utf8')
+### Event: 'socket'
+
+`function (socket) { }`
+
+Emitted after a socket is assigned to this request.
+
+### Event: 'upgrade'
+
+`function (response, socket, head) { }`
+
+Emitted each time a server responds to a request with an upgrade. If this
+event isn't being listened for, clients receiving an upgrade header will have
+their connections closed.
+
+A client server pair that show you how to listen for the `upgrade` event using `http.getAgent`:
+
+    var http = require('http');
+    var net = require('net');
+
+    // Create an HTTP server
+    var srv = http.createServer(function (req, res) {
+      res.writeHead(200, {'Content-Type': 'text/plain'});
+      res.end('okay');
+    });
+    srv.on('upgrade', function(req, socket, upgradeHead) {
+      socket.write('HTTP/1.1 101 Web Socket Protocol Handshake\r\n' +
+                   'Upgrade: WebSocket\r\n' +
+                   'Connection: Upgrade\r\n' +
+                   '\r\n\r\n');
+
+      socket.ondata = function(data, start, end) {
+        socket.write(data.toString('utf8', start, end), 'utf8'); // echo back
+      };
+    });
+
+    // now that server is running
+    srv.listen(1337, '127.0.0.1', function() {
+
+      // make a request
+      var options = {
+        port: 1337,
+        host: '127.0.0.1',
+        headers: {
+          'Connection': 'Upgrade',
+          'Upgrade': 'websocket'
+        }
+      };
+
+      var req = http.request(options);
+      req.end();
+
+      req.on('upgrade', function(res, socket, upgradeHead) {
+        console.log('got upgraded!');
+        socket.end();
+        process.exit(0);
+      });
+    });
+
+### Event: 'continue'
+
+`function () { }`
+
+Emitted when the server sends a '100 Continue' HTTP response, usually because
+the request contained 'Expect: 100-continue'. This is an instruction that
+the client should send the request body.
+
+### request.write(chunk, [encoding])
 
 Sends a chunk of the body.  By calling this method
 many times, the user can stream a request body to a
@@ -620,11 +673,10 @@ server--in that case it is suggested to
 `['Transfer-Encoding', 'chunked']` header line when
 creating the request.
 
-The `chunk` argument should be an array of integers
-or a string.
+The `chunk` argument should be a [buffer](buffer.html) or a string.
 
-The `encoding` argument is optional and only
-applies when `chunk` is a string.
+The `encoding` argument is optional and only applies when `chunk` is a string.
+Defaults to `'utf8'`.
 
 
 ### request.end([data], [encoding])
@@ -633,20 +685,39 @@ Finishes sending the request. If any par
 unsent, it will flush them to the stream. If the request is
 chunked, this will send the terminating `'0\r\n\r\n'`.
 
-If `data` is specified, it is equivalent to calling `request.write(data, encoding)`
-followed by `request.end()`.
+If `data` is specified, it is equivalent to calling
+`request.write(data, encoding)` followed by `request.end()`.
 
 ### request.abort()
 
 Aborts a request.  (New since v0.3.8.)
 
+### request.setTimeout(timeout, [callback])
+
+Once a socket is assigned to this request and is connected 
+[socket.setTimeout(timeout, [callback])](net.html#socket.setTimeout)
+will be called.
+
+### request.setNoDelay([noDelay])
+
+Once a socket is assigned to this request and is connected 
+[socket.setNoDelay(noDelay)](net.html#socket.setNoDelay)
+will be called.
+
+### request.setSocketKeepAlive([enable], [initialDelay])
+
+Once a socket is assigned to this request and is connected 
+[socket.setKeepAlive(enable, [initialDelay])](net.html#socket.setKeepAlive)
+will be called.
 
 ## http.ClientResponse
 
 This object is created when making a request with `http.request()`. It is
 passed to the `'response'` event of the request object.
 
-The response implements the `Readable Stream` interface.
+The response implements the [Readable Stream](stream.html#readable_stream)
+interface. This is an `EventEmitter` with the following events:
+
 
 ### Event: 'data'
 
@@ -654,6 +725,9 @@ The response implements the `Readable St
 
 Emitted when a piece of the message body is received.
 
+Note that the __data will be lost__ if there is no listener when a
+`ClientResponse` emits a `'data'` event.
+
 
 ### Event: 'end'
 
@@ -690,10 +764,11 @@ The response headers object.
 
 The response trailers object. Only populated after the 'end' event.
 
-### response.setEncoding(encoding=null)
+### response.setEncoding([encoding])
 
-Set the encoding for the response body. Either `'utf8'`, `'ascii'`, or `'base64'`.
-Defaults to `null`, which means that the `'data'` event will emit a `Buffer` object..
+Set the encoding for the response body. Either `'utf8'`, `'ascii'`, or
+`'base64'`. Defaults to `null`, which means that the `'data'` event will emit
+a `Buffer` object.
 
 ### response.pause()
 
diff -upr ./api_v0.4.12/https.markdown ./api_v0.6.12/https.markdown
--- ./api_v0.4.12/https.markdown	2011-09-21 00:45:30.000000000 +0400
+++ ./api_v0.6.12/https.markdown	2012-03-08 01:22:12.000000000 +0400
@@ -1,16 +1,16 @@
-## HTTPS
+# HTTPS
 
 HTTPS is the HTTP protocol over TLS/SSL. In Node this is implemented as a
 separate module.
 
-## https.Server
+## Class: https.Server
 
 This class is a subclass of `tls.Server` and emits events same as
 `http.Server`. See `http.Server` for more information.
 
 ## https.createServer(options, [requestListener])
 
-Returns a new HTTPS web server object. The `options` is similer to
+Returns a new HTTPS web server object. The `options` is similar to
 `tls.createServer()`. The `requestListener` is a function which is
 automatically added to the `'request'` event.
 
@@ -34,7 +34,7 @@ Example:
 ## https.request(options, callback)
 
 Makes a request to a secure web server.
-Similar options to `http.request()`.
+All options from [http.request()](http.html#http.request) are valid.
 
 Example:
 
@@ -67,11 +67,69 @@ The options argument has the following o
 - port: port of host to request to. Defaults to 443.
 - path: Path to request. Default `'/'`.
 - method: HTTP request method. Default `'GET'`.
-- key: Private key to use for SSL. Default `null`.
-- cert: Public x509 certificate to use. Default `null`.
-- ca: An authority certificate or array of authority certificates to check
+
+- `host`: A domain name or IP address of the server to issue the request to.
+  Defaults to `'localhost'`.
+- `hostname`: To support `url.parse()` `hostname` is preferred over `host`
+- `port`: Port of remote server. Defaults to 443.
+- `method`: A string specifying the HTTP request method. Defaults to `'GET'`.
+- `path`: Request path. Defaults to `'/'`. Should include query string if any.
+  E.G. `'/index.html?page=12'`
+- `headers`: An object containing request headers.
+- `auth`: Basic authentication i.e. `'user:password'` to compute an
+  Authorization header.
+- `agent`: Controls [Agent](#https.Agent) behavior. When an Agent is
+  used request will default to `Connection: keep-alive`. Possible values:
+ - `undefined` (default): use [globalAgent](#https.globalAgent) for this
+   host and port.
+ - `Agent` object: explicitly use the passed in `Agent`.
+ - `false`: opts out of connection pooling with an Agent, defaults request to
+   `Connection: close`.
+
+The following options from [tls.connect()](tls.html#tls.connect) can also be
+specified. However, a [globalAgent](#https.globalAgent) silently ignores these.
+
+- `key`: Private key to use for SSL. Default `null`.
+- `passphrase`: A string of passphrase for the private key. Default `null`.
+- `cert`: Public x509 certificate to use. Default `null`.
+- `ca`: An authority certificate or array of authority certificates to check
   the remote host against.
 
+In order to specify these options, use a custom `Agent`.
+
+Example:
+
+    var options = {
+      host: 'encrypted.google.com',
+      port: 443,
+      path: '/',
+      method: 'GET',
+      key: fs.readFileSync('test/fixtures/keys/agent2-key.pem'),
+      cert: fs.readFileSync('test/fixtures/keys/agent2-cert.pem')
+    };
+    options.agent = new https.Agent(options);
+
+    var req = https.request(options, function(res) {
+      ...
+    }
+
+Or does not use an `Agent`.
+
+Example:
+
+    var options = {
+      host: 'encrypted.google.com',
+      port: 443,
+      path: '/',
+      method: 'GET',
+      key: fs.readFileSync('test/fixtures/keys/agent2-key.pem'),
+      cert: fs.readFileSync('test/fixtures/keys/agent2-cert.pem'),
+      agent: false
+    };
+
+    var req = https.request(options, function(res) {
+      ...
+    }
 
 ## https.get(options, callback)
 
@@ -94,5 +152,13 @@ Example:
     });
 
 
+## Class: https.Agent
+
+An Agent object for HTTPS similar to [http.Agent](http.html#http.Agent).
+See [https.request()](#https.request) for more information.
+
 
+## https.globalAgent
 
+Global instance of [https.Agent](#https.Agent) which is used as the default
+for all HTTPS client requests.
diff -upr ./api_v0.4.12/modules.markdown ./api_v0.6.12/modules.markdown
--- ./api_v0.4.12/modules.markdown	2011-09-21 00:45:54.000000000 +0400
+++ ./api_v0.6.12/modules.markdown	2012-03-08 01:22:12.000000000 +0400
@@ -1,4 +1,6 @@
-## Modules
+# Modules
+
+<!--name=module-->
 
 Node has a simple module loading system.  In Node, files and modules are in
 one-to-one correspondence.  As an example, `foo.js` loads the module
@@ -30,7 +32,67 @@ Variables
 local to the module will be private. In this example the variable `PI` is
 private to `circle.js`.
 
-### Core Modules
+The module system is implemented in the `require("module")` module.
+
+## Cycles
+
+<!--type=misc-->
+
+When there are circular `require()` calls, a module might not be
+done being executed when it is returned.
+
+Consider this situation:
+
+`a.js`:
+
+    console.log('a starting');
+    exports.done = false;
+    var b = require('./b.js');
+    console.log('in a, b.done = %j', b.done);
+    exports.done = true;
+    console.log('a done');
+
+`b.js`:
+
+    console.log('b starting');
+    exports.done = false;
+    var a = require('./a.js');
+    console.log('in b, a.done = %j', a.done);
+    exports.done = true;
+    console.log('b done');
+
+`main.js`:
+
+    console.log('main starting');
+    var a = require('./a.js');
+    var b = require('./b.js');
+    console.log('in main, a.done=%j, b.done=%j', a.done, b.done);
+
+When `main.js` loads `a.js`, then `a.js` in turn loads `b.js`.  At that
+point, `b.js` tries to load `a.js`.  In order to prevent an infinite
+loop an **unfinished copy** of the `a.js` exports object is returned to the
+`b.js` module.  `b.js` then finishes loading, and its exports object is
+provided to the `a.js` module.
+
+By the time `main.js` has loaded both modules, they're both finished.
+The output of this program would thus be:
+
+    $ node main.js
+    main starting
+    a starting
+    b starting
+    in b, a.done = false
+    b done
+    in a, b.done = true
+    a done
+    in main, a.done=true, b.done=true
+
+If you have cyclic module dependencies in your program, make sure to
+plan accordingly.
+
+## Core Modules
+
+<!--type=misc-->
 
 Node has several modules compiled into the binary.  These modules are
 described in greater detail elsewhere in this documentation.
@@ -41,13 +103,16 @@ Core modules are always preferentially l
 passed to `require()`.  For instance, `require('http')` will always
 return the built in HTTP module, even if there is a file by that name.
 
-### File Modules
+## File Modules
+
+<!--type=misc-->
 
 If the exact filename is not found, then node will attempt to load the
-required filename with the added extension of `.js`, and then `.node`.
+required filename with the added extension of `.js`, `.json`, and then `.node`.
 
-`.js` files are interpreted as JavaScript text files, and `.node` files
-are interpreted as compiled addon modules loaded with `dlopen`.
+`.js` files are interpreted as JavaScript text files, and `.json` files are
+parsed as JSON text files. `.node` files are interpreted as compiled addon
+modules loaded with `dlopen`.
 
 A module prefixed with `'/'` is an absolute path to the file.  For
 example, `require('/home/marco/foo.js')` will load the file at
@@ -60,7 +125,9 @@ That is, `circle.js` must be in the same
 Without a leading '/' or './' to indicate a file, the module is either a
 "core module" or is loaded from a `node_modules` folder.
 
-### Loading from `node_modules` Folders
+## Loading from `node_modules` Folders
+
+<!--type=misc-->
 
 If the module identifier passed to `require()` is not a native module,
 and does not begin with `'/'`, `'../'`, or `'./'`, then node starts at the
@@ -82,7 +149,9 @@ this order:
 This allows programs to localize their dependencies, so that they do not
 clash.
 
-### Folders as Modules
+## Folders as Modules
+
+<!--type=misc-->
 
 It is convenient to organize programs and libraries into self-contained
 directories, and then provide a single entry point to that library.
@@ -110,7 +179,9 @@ example, then `require('./some-library')
 * `./some-library/index.js`
 * `./some-library/index.node`
 
-### Caching
+## Caching
+
+<!--type=misc-->
 
 Modules are cached after the first time they are loaded.  This means
 (among other things) that every call to `require('foo')` will get
@@ -124,7 +195,9 @@ dependencies to be loaded even when they
 If you want to have a module execute code multiple times, then export a
 function, and call that function.
 
-#### Module Caching Caveats
+### Module Caching Caveats
+
+<!--type=misc-->
 
 Modules are cached based on their resolved filename.  Since modules may
 resolve to a different filename based on the location of the calling
@@ -132,8 +205,22 @@ module (loading from `node_modules` fold
 that `require('foo')` will always return the exact same object, if it
 would resolve to different files.
 
+## The `module` Object
+
+<!-- type=var -->
+<!-- name=module -->
+
+* {Object}
+
+In each module, the `module` free variable is a reference to the object
+representing the current module.  In particular
+`module.exports` is the same as the `exports` object.
+`module` isn't actually a global but rather local to each module.
+
 ### module.exports
 
+* {Object}
+
 The `exports` object is created by the Module system. Sometimes this is not
 acceptable, many want their module to be an instance of some class. To do this
 assign the desired export object to `module.exports`. For example suppose we
@@ -172,7 +259,61 @@ y.js:
     console.log(x.a);
 
 
-### All Together...
+### module.require(id)
+
+* `id` {String}
+* Return: {Object} `exports` from the resolved module
+
+The `module.require` method provides a way to load a module as if
+`require()` was called from the original module.
+
+Note that in order to do this, you must get a reference to the `module`
+object.  Since `require()` returns the `exports`, and the `module` is
+typically *only* available within a specific module's code, it must be
+explicitly exported in order to be used.
+
+
+### module.id
+
+* {String}
+
+The identifier for the module.  Typically this is the fully resolved
+filename.
+
+
+### module.filename
+
+* {String}
+
+The fully resolved filename to the module.
+
+
+### module.loaded
+
+* {Boolean}
+
+Whether or not the module is done loading, or is in the process of
+loading.
+
+
+### module.parent
+
+* {Module Object}
+
+The module that required this one.
+
+
+### module.children
+
+* {Array}
+
+The module objects required by this one.
+
+
+
+## All Together...
+
+<!-- type=misc -->
 
 To get the exact filename that will be loaded when `require()` is called, use
 the `require.resolve()` function.
@@ -200,7 +341,8 @@ in pseudocode of what require.resolve do
        a. Parse X/package.json, and look for "main" field.
        b. let M = X + (json main field)
        c. LOAD_AS_FILE(M)
-    2. LOAD_AS_FILE(X/index)
+    2. If X/index.js is a file, load X/index.js as JavaScript text.  STOP
+    3. If X/index.node is a file, load X/index.node as binary addon.  STOP
 
     LOAD_NODE_MODULES(X, START)
     1. let DIRS=NODE_MODULES_PATHS(START)
@@ -220,80 +362,31 @@ in pseudocode of what require.resolve do
        c. let I = I - 1
     6. return DIRS
 
-### Loading from the `require.paths` Folders
+## Loading from the global folders
 
-In node, `require.paths` is an array of strings that represent paths to
-be searched for modules when they are not prefixed with `'/'`, `'./'`, or
-`'../'`.  For example, if require.paths were set to:
+<!-- type=misc -->
 
-    [ '/home/micheil/.node_modules',
-      '/usr/local/lib/node_modules' ]
+If the `NODE_PATH` environment variable is set to a colon-delimited list
+of absolute paths, then node will search those paths for modules if they
+are not found elsewhere.  (Note: On Windows, `NODE_PATH` is delimited by
+semicolons instead of colons.)
 
-Then calling `require('bar/baz.js')` would search the following
-locations:
+Additionally, node will search in the following locations:
 
-* 1: `'/home/micheil/.node_modules/bar/baz.js'`
-* 2: `'/usr/local/lib/node_modules/bar/baz.js'`
+* 1: `$HOME/.node_modules`
+* 2: `$HOME/.node_libraries`
+* 3: `$PREFIX/lib/node`
 
-The `require.paths` array can be mutated at run time to alter this
-behavior.
+Where `$HOME` is the user's home directory, and `$PREFIX` is node's
+configured `installPrefix`.
 
-It is set initially from the `NODE_PATH` environment variable, which is
-a colon-delimited list of absolute paths.  In the previous example,
-the `NODE_PATH` environment variable might have been set to:
+These are mostly for historic reasons.  You are highly encouraged to
+place your dependencies locally in `node_modules` folders.  They will be
+loaded faster, and more reliably.
 
-    /home/micheil/.node_modules:/usr/local/lib/node_modules
+## Accessing the main module
 
-Loading from the `require.paths` locations is only performed if the
-module could not be found using the `node_modules` algorithm above.
-Global modules are lower priority than bundled dependencies.
-
-#### **Note:** Please Avoid Using `require.paths`
-
-`require.paths` will only be supported through the end of the v0.4
-stable branch.  It is removed from node as of v0.5.
-
-While it seemed like a good idea at the time, and enabled a lot of
-useful experimentation, in practice a mutable `require.paths` list is
-often a troublesome source of confusion and headaches.
-
-##### Setting `require.paths` to some other value does nothing.
-
-This does not do what one might expect:
-
-    require.paths = [ '/usr/lib/node' ];
-
-All that does is lose the reference to the *actual* node module lookup
-paths, and create a new reference to some other thing that isn't used
-for anything.
-
-##### Putting relative paths in `require.paths` is... weird.
-
-If you do this:
-
-    require.paths.push('./lib');
-
-then it does *not* add the full resolved path to where `./lib`
-is on the filesystem.  Instead, it literally adds `'./lib'`,
-meaning that if you do `require('y.js')` in `/a/b/x.js`, then it'll look
-in `/a/b/lib/y.js`.  If you then did `require('y.js')` in
-`/l/m/n/o/p.js`, then it'd look in `/l/m/n/o/lib/y.js`.
-
-In practice, people have used this as an ad hoc way to bundle
-dependencies, but this technique is brittle.
-
-##### Zero Isolation
-
-There is (by regrettable design), only one `require.paths` array used by
-all modules.
-
-As a result, if one node program comes to rely on this behavior, it may
-permanently and subtly alter the behavior of all other node programs in
-the same process.  As the application stack grows, we tend to assemble
-functionality, and those parts interact in ways that are difficult to
-predict.
-
-### Accessing the main module
+<!-- type=misc -->
 
 When a file is run directly from Node, `require.main` is set to its
 `module`. That means that you can determine whether a file has been run
@@ -310,6 +403,8 @@ by checking `require.main.filename`.
 
 ## Addenda: Package Manager Tips
 
+<!-- type=misc -->
+
 The semantics of Node's `require()` function were designed to be general
 enough to support a number of sane directory structures. Package manager
 programs such as `dpkg`, `rpm`, and `npm` will hopefully find it possible to
diff -upr ./api_v0.4.12/net.markdown ./api_v0.6.12/net.markdown
--- ./api_v0.4.12/net.markdown	2011-09-21 00:45:30.000000000 +0400
+++ ./api_v0.6.12/net.markdown	2012-03-08 01:22:12.000000000 +0400
@@ -1,13 +1,14 @@
-## net
+# net
 
 The `net` module provides you with an asynchronous network wrapper. It contains
 methods for creating both servers and clients (called streams). You can include
-this module with `require("net");`
+this module with `require('net');`
 
-### net.createServer([options], [connectionListener])
+## net.createServer([options], [connectionListener])
 
 Creates a new TCP server. The `connectionListener` argument is
-automatically set as a listener for the `'connection'` event.
+automatically set as a listener for the ['connection'](#event_connection_)
+event.
 
 `options` is an object with the following defaults:
 
@@ -16,68 +17,100 @@ automatically set as a listener for the
 
 If `allowHalfOpen` is `true`, then the socket won't automatically send FIN
 packet when the other end of the socket sends a FIN packet. The socket becomes
-non-readable, but still writable. You should call the end() method explicitly.
-See `'end'` event for more information.
-
-### net.createConnection(arguments...)
-
-Construct a new socket object and opens a socket to the given location. When
-the socket is established the `'connect'` event will be emitted.
-
-The arguments for this method change the type of connection:
-
-* `net.createConnection(port, [host])`
-
-  Creates a TCP connection to `port` on `host`. If `host` is omitted, `localhost`
-  will be assumed.
-
-* `net.createConnection(path)`
-
-  Creates unix socket connection to `path`
-
----
-
-### net.Server
-
-This class is used to create a TCP or UNIX server.
+non-readable, but still writable. You should call the `end()` method explicitly.
+See ['end'](#event_end_) event for more information.
 
 Here is an example of a echo server which listens for connections
 on port 8124:
 
     var net = require('net');
-    var server = net.createServer(function (c) {
+    var server = net.createServer(function(c) { //'connection' listener
+      console.log('server connected');
+      c.on('end', function() {
+        console.log('server disconnected');
+      });
       c.write('hello\r\n');
       c.pipe(c);
     });
-    server.listen(8124, 'localhost');
+    server.listen(8124, function() { //'listening' listener
+      console.log('server bound');
+    });
 
 Test this by using `telnet`:
 
     telnet localhost 8124
 
-To listen on the socket `/tmp/echo.sock` the last line would just be
-changed to
+To listen on the socket `/tmp/echo.sock` the third line from the last would
+just be changed to
 
-    server.listen('/tmp/echo.sock');
+    server.listen('/tmp/echo.sock', function() { //'listening' listener
 
 Use `nc` to connect to a UNIX domain socket server:
 
     nc -U /tmp/echo.sock
 
-`net.Server` is an `EventEmitter` with the following events:
+## net.connect(arguments...)
+## net.createConnection(arguments...)
+
+Construct a new socket object and opens a socket to the given location. When
+the socket is established the ['connect'](#event_connect_) event will be
+emitted.
+
+The arguments for these methods change the type of connection:
+
+* `net.connect(port, [host], [connectListener])`
+* `net.createConnection(port, [host], [connectListener])`
+
+  Creates a TCP connection to `port` on `host`. If `host` is omitted,
+  `'localhost'` will be assumed.
+
+* `net.connect(path, [connectListener])`
+* `net.createConnection(path, [connectListener])`
+
+  Creates unix socket connection to `path`.
+
+The `connectListener` parameter will be added as an listener for the
+['connect'](#event_connect_) event.
+
+Here is an example of a client of echo server as described previously:
+
+    var net = require('net');
+    var client = net.connect(8124, function() { //'connect' listener
+      console.log('client connected');
+      client.write('world!\r\n');
+    });
+    client.on('data', function(data) {
+      console.log(data.toString());
+      client.end();
+    });
+    client.on('end', function() {
+      console.log('client disconnected');
+    });
+
+To connect on the socket `/tmp/echo.sock` the second line would just be
+changed to
+
+    var client = net.connect('/tmp/echo.sock', function() { //'connect' listener
 
-#### server.listen(port, [host], [callback])
+## Class: net.Server
+
+This class is used to create a TCP or UNIX server.
+A server is a `net.Socket` that can listen for new incoming connections.
+
+### server.listen(port, [host], [listeningListener])
 
 Begin accepting connections on the specified `port` and `host`.  If the
 `host` is omitted, the server will accept connections directed to any
-IPv4 address (`INADDR_ANY`).
+IPv4 address (`INADDR_ANY`). A port value of zero will assign a random port.
 
-This function is asynchronous. The last parameter `callback` will be called
-when the server has been bound.
+This function is asynchronous.  When the server has been bound,
+['listening'](#event_listening_) event will be emitted.
+the last parameter `listeningListener` will be added as an listener for the
+['listening'](#event_listening_) event.
 
-One issue some users run into is getting `EADDRINUSE` errors. Meaning
+One issue some users run into is getting `EADDRINUSE` errors. This means that
 another server is already running on the requested port. One way of handling this
-would be to wait a second and the try again. This can be done with
+would be to wait a second and then try again. This can be done with
 
     server.on('error', function (e) {
       if (e.code == 'EADDRINUSE') {
@@ -89,38 +122,26 @@ would be to wait a second and the try ag
       }
     });
 
-(Note: All sockets in Node are set SO_REUSEADDR already)
+(Note: All sockets in Node set `SO_REUSEADDR` already)
 
 
-#### server.listen(path, [callback])
+### server.listen(path, [listeningListener])
 
 Start a UNIX socket server listening for connections on the given `path`.
 
-This function is asynchronous. The last parameter `callback` will be called
-when the server has been bound.
-
-#### server.listenFD(fd)
-
-Start a server listening for connections on the given file descriptor.
+This function is asynchronous.  When the server has been bound,
+['listening'](#event_listening_) event will be emitted.
+the last parameter `listeningListener` will be added as an listener for the
+['listening'](#event_listening_) event.
 
-This file descriptor must have already had the `bind(2)` and `listen(2)` system
-calls invoked on it.  Additionally, it must be set non-blocking; try
-`fcntl(fd, F_SETFL, O_NONBLOCK)`.
-
-#### server.pause(msecs)
-
-Stop accepting connections for the given number of milliseconds (default is
-one second).  This could be useful for throttling new connections against
-DoS attacks or other oversubscription.
-
-#### server.close()
+### server.close()
 
 Stops the server from accepting new connections. This function is
 asynchronous, the server is finally closed when the server emits a `'close'`
 event.
 
 
-#### server.address()
+### server.address()
 
 Returns the bound address and port of the server as reported by the operating system.
 Useful to find which port was assigned when giving getting an OS-assigned address.
@@ -138,40 +159,50 @@ Example:
       console.log("opened server on %j", address);
     });
 
+Don't call `server.address()` until the `'listening'` event has been emitted.
 
-#### server.maxConnections
+### server.maxConnections
 
-Set this property to reject connections when the server's connection count gets high.
+Set this property to reject connections when the server's connection count gets
+high.
 
-#### server.connections
+### server.connections
 
 The number of concurrent connections on the server.
 
-#### Event: 'connection'
 
-`function (socket) {}`
+`net.Server` is an `EventEmitter` with the following events:
+
+### Event: 'listening'
+
+Emitted when the server has been bound after calling `server.listen`.
+
+### Event: 'connection'
+
+* {Socket object} The connection object
 
 Emitted when a new connection is made. `socket` is an instance of
 `net.Socket`.
 
-#### Event: 'close'
-
-`function () {}`
+### Event: 'close'
 
 Emitted when the server closes.
 
----
+### Event: 'error'
+
+* {Error Object}
+
+Emitted when an error occurs.  The `'close'` event will be called directly
+following this event.  See example in discussion of `server.listen`.
 
-### net.Socket
+## Class: net.Socket
 
-This object is an abstraction of of a TCP or UNIX socket.  `net.Socket`
+This object is an abstraction of a TCP or UNIX socket.  `net.Socket`
 instances implement a duplex Stream interface.  They can be created by the
 user and used as a client (with `connect()`) or they can be created by Node
 and passed to the user through the `'connection'` event of a server.
 
-`net.Socket` instances are EventEmitters with the following events:
-
-#### new net.Socket([options])
+### new net.Socket([options])
 
 Construct a new socket object.
 
@@ -186,8 +217,8 @@ Construct a new socket object.
 specified underlying protocol. It can be `'tcp4'`, `'tcp6'`, or `'unix'`.
 About `allowHalfOpen`, refer to `createServer()` and `'end'` event.
 
-#### socket.connect(port, [host], [callback])
-#### socket.connect(path, [callback])
+### socket.connect(port, [host], [connectListener])
+### socket.connect(path, [connectListener])
 
 Opens the connection for a given socket. If `port` and `host` are given,
 then the socket will be opened as a TCP socket, if `host` is omitted,
@@ -198,23 +229,23 @@ Normally this method is not needed, as `
 socket. Use this only if you are implementing a custom Socket or if a
 Socket is closed and you want to reuse it to connect to another server.
 
-This function is asynchronous. When the `'connect'` event is emitted the
-socket is established. If there is a problem connecting, the `'connect'`
-event will not be emitted, the `'error'` event will be emitted with
+This function is asynchronous. When the ['connect'](#event_connect_) event is
+emitted the socket is established. If there is a problem connecting, the
+`'connect'` event will not be emitted, the `'error'` event will be emitted with
 the exception.
 
-The `callback` parameter will be added as an listener for the 'connect'
-event.
+The `connectListener` parameter will be added as an listener for the
+['connect'](#event_connect_) event.
 
 
-#### socket.bufferSize
+### socket.bufferSize
 
 `net.Socket` has the property that `socket.write()` always works. This is to
-help users get up an running quickly. The computer cannot necessarily keep up
-with the amount of data that is written to a socket - the network connection simply
-might be too slow. Node will internally queue up the data written to a socket and
-send it out over the wire when it is possible. (Internally it is polling on
-the socket's file descriptor for being writable).
+help users get up and running quickly. The computer cannot always keep up
+with the amount of data that is written to a socket - the network connection
+simply might be too slow. Node will internally queue up the data written to a
+socket and send it out over the wire when it is possible. (Internally it is
+polling on the socket's file descriptor for being writable).
 
 The consequence of this internal buffering is that memory may grow. This
 property shows the number of characters currently buffered to be written.
@@ -223,21 +254,21 @@ written, but the buffer may contain stri
 encoded, so the exact number of bytes is not known.)
 
 Users who experience large or growing `bufferSize` should attempt to
-"throttle" the data flows in their program with `pause()` and resume()`.
+"throttle" the data flows in their program with `pause()` and `resume()`.
 
 
-#### socket.setEncoding(encoding=null)
+### socket.setEncoding([encoding])
 
 Sets the encoding (either `'ascii'`, `'utf8'`, or `'base64'`) for data that is
-received.
+received. Defaults to `null`.
 
-#### socket.setSecure()
+### socket.setSecure()
 
 This function has been removed in v0.3. It used to upgrade the connection to
 SSL/TLS. See the [TLS section](tls.html#tLS_) for the new API.
 
 
-#### socket.write(data, [encoding], [callback])
+### socket.write(data, [encoding], [callback])
 
 Sends data on the socket. The second parameter specifies the encoding in the
 case of a string--it defaults to UTF8 encoding.
@@ -249,36 +280,34 @@ buffer. Returns `false` if all or part o
 The optional `callback` parameter will be executed when the data is finally
 written out - this may not be immediately.
 
-#### socket.write(data, [encoding], [fileDescriptor], [callback])
-
-For UNIX sockets, it is possible to send a file descriptor through the
-socket. Simply add the `fileDescriptor` argument and listen for the `'fd'`
-event on the other end.
+### socket.write(data, [encoding], [callback])
 
+Write data with the optional encoding. The callback will be made when the
+data is flushed to the kernel.
 
-#### socket.end([data], [encoding])
+### socket.end([data], [encoding])
 
-Half-closes the socket. I.E., it sends a FIN packet. It is possible the
+Half-closes the socket. i.e., it sends a FIN packet. It is possible the
 server will still send some data.
 
-If `data` is specified, it is equivalent to calling `socket.write(data, encoding)`
-followed by `socket.end()`.
+If `data` is specified, it is equivalent to calling
+`socket.write(data, encoding)` followed by `socket.end()`.
 
-#### socket.destroy()
+### socket.destroy()
 
 Ensures that no more I/O activity happens on this socket. Only necessary in
 case of errors (parse error or so).
 
-#### socket.pause()
+### socket.pause()
 
 Pauses the reading of data. That is, `'data'` events will not be emitted.
 Useful to throttle back an upload.
 
-#### socket.resume()
+### socket.resume()
 
 Resumes reading after a call to `pause()`.
 
-#### socket.setTimeout(timeout, [callback])
+### socket.setTimeout(timeout, [callback])
 
 Sets the socket to timeout after `timeout` milliseconds of inactivity on
 the socket. By default `net.Socket` do not have a timeout.
@@ -289,54 +318,72 @@ or `destroy()` the socket.
 
 If `timeout` is 0, then the existing idle timeout is disabled.
 
-The optional `callback` parameter will be added as a one time listener for the `'timeout'` event.
+The optional `callback` parameter will be added as a one time listener for the
+`'timeout'` event.
 
-#### socket.setNoDelay(noDelay=true)
+### socket.setNoDelay([noDelay])
 
 Disables the Nagle algorithm. By default TCP connections use the Nagle
-algorithm, they buffer data before sending it off. Setting `noDelay` will
-immediately fire off data each time `socket.write()` is called.
+algorithm, they buffer data before sending it off. Setting `true` for
+`noDelay` will immediately fire off data each time `socket.write()` is called.
+`noDelay` defaults to `true`.
 
-#### socket.setKeepAlive(enable=false, [initialDelay])
+### socket.setKeepAlive([enable], [initialDelay])
 
 Enable/disable keep-alive functionality, and optionally set the initial
 delay before the first keepalive probe is sent on an idle socket.
+`enable` defaults to `false`.
+
 Set `initialDelay` (in milliseconds) to set the delay between the last
 data packet received and the first keepalive probe. Setting 0 for
 initialDelay will leave the value unchanged from the default
-(or previous) setting.
+(or previous) setting. Defaults to `0`.
 
-#### socket.address()
+### socket.address()
 
-Returns the bound address and port of the socket as reported by the operating system.
-Returns an object with two properties, e.g. `{"address":"192.168.57.1", "port":62053}`
+Returns the bound address and port of the socket as reported by the operating
+system. Returns an object with two properties, e.g.
+`{"address":"192.168.57.1", "port":62053}`
 
-#### socket.remoteAddress
+### socket.remoteAddress
 
 The string representation of the remote IP address. For example,
 `'74.125.127.100'` or `'2001:4860:a005::68'`.
 
-This member is only present in server-side connections.
+### socket.remotePort
+
+The numeric representation of the remote port. For example,
+`80` or `21`.
+
+### socket.bytesRead
+
+The amount of received bytes.
 
+### socket.bytesWritten
 
-#### Event: 'connect'
+The amount of bytes sent.
 
-`function () { }`
 
-Emitted when a socket connection successfully is established.
+`net.Socket` instances are EventEmitters with the following events:
+
+### Event: 'connect'
+
+Emitted when a socket connection is successfully established.
 See `connect()`.
 
-#### Event: 'data'
+### Event: 'data'
 
-`function (data) { }`
+* {Buffer object}
 
 Emitted when data is received.  The argument `data` will be a `Buffer` or
 `String`.  Encoding of data is set by `socket.setEncoding()`.
-(See the [Readable Stream](streams.html#readable_Stream) section for more information.)
+(See the [Readable Stream](stream.html#readable_stream) section for more
+information.)
 
-#### Event: 'end'
+Note that the __data will be lost__ if there is no listener when a `Socket`
+emits a `'data'` event.
 
-`function () { }`
+### Event: 'end'
 
 Emitted when the other end of the socket sends a FIN packet.
 
@@ -347,9 +394,7 @@ its side allowing the user to write arbi
 caveat that the user is required to `end()` their side now.
 
 
-#### Event: 'timeout'
-
-`function () { }`
+### Event: 'timeout'
 
 Emitted if the socket times out from inactivity. This is only to notify that
 the socket has been idle. The user must manually close the connection.
@@ -357,42 +402,38 @@ the socket has been idle. The user must
 See also: `socket.setTimeout()`
 
 
-#### Event: 'drain'
-
-`function () { }`
+### Event: 'drain'
 
 Emitted when the write buffer becomes empty. Can be used to throttle uploads.
 
-#### Event: 'error'
+See also: the return values of `socket.write()`
+
+### Event: 'error'
 
-`function (exception) { }`
+* {Error object}
 
 Emitted when an error occurs.  The `'close'` event will be called directly
 following this event.
 
-#### Event: 'close'
+### Event: 'close'
 
-`function (had_error) { }`
+* `had_error` {Boolean} true if the socket had a transmission error
 
 Emitted once the socket is fully closed. The argument `had_error` is a boolean
 which says if the socket was closed due to a transmission error.
 
----
-
-### net.isIP
-
-#### net.isIP(input)
+## net.isIP(input)
 
 Tests if input is an IP address. Returns 0 for invalid strings,
 returns 4 for IP version 4 addresses, and returns 6 for IP version 6 addresses.
 
 
-#### net.isIPv4(input)
+## net.isIPv4(input)
 
 Returns true if input is a version 4 IP address, otherwise returns false.
 
 
-#### net.isIPv6(input)
+## net.isIPv6(input)
 
 Returns true if input is a version 6 IP address, otherwise returns false.
 
diff -upr ./api_v0.4.12/os.markdown ./api_v0.6.12/os.markdown
--- ./api_v0.4.12/os.markdown	2011-09-21 00:45:30.000000000 +0400
+++ ./api_v0.6.12/os.markdown	2012-03-08 01:22:12.000000000 +0400
@@ -1,36 +1,46 @@
-## os Module
+# os
+
+Provides a few basic operating-system related utility functions.
 
 Use `require('os')` to access this module.
 
-### os.hostname()
+## os.hostname()
 
 Returns the hostname of the operating system.
 
-### os.type()
+## os.type()
 
 Returns the operating system name.
 
-### os.release()
+## os.platform()
+
+Returns the operating system platform.
+
+## os.arch()
+
+Returns the operating system CPU architecture.
+
+## os.release()
 
 Returns the operating system release.
 
-### os.uptime()
+## os.uptime()
 
 Returns the system uptime in seconds.
 
-### os.loadavg()
+## os.loadavg()
 
 Returns an array containing the 1, 5, and 15 minute load averages.
 
-### os.totalmem()
+## os.totalmem()
 
 Returns the total amount of system memory in bytes.
 
-### os.freemem()
+## os.freemem()
 
 Returns the amount of free system memory in bytes.
 
-### os.cpus()
+## os.cpus()
 
 Returns an array of objects containing information about each CPU/core installed: model, speed (in MHz), and times (an object containing the number of CPU ticks spent in: user, nice, sys, idle, and irq).
 
@@ -99,4 +109,21 @@ Example inspection of os.cpus:
            nice: 1480,
            sys: 34920,
            idle: 1072572010,
-           irq: 30 } } ]
\ No newline at end of file
+           irq: 30 } } ]
+
+## os.networkInterfaces()
+
+Get a list of network interfaces:
+
+    { lo0: 
+       [ { address: '::1', family: 'IPv6', internal: true },
+         { address: 'fe80::1', family: 'IPv6', internal: true },
+         { address: '127.0.0.1', family: 'IPv4', internal: true } ],
+      en1: 
+       [ { address: 'fe80::cabc:c8ff:feef:f996', family: 'IPv6',
+           internal: false },
+         { address: '10.0.1.123', family: 'IPv4', internal: false } ],
+      vmnet1: [ { address: '10.99.99.254', family: 'IPv4', internal: false } ],
+      vmnet8: [ { address: '10.88.88.1', family: 'IPv4', internal: false } ],
+      ppp0: [ { address: '10.2.0.231', family: 'IPv4', internal: false } ] }
+
diff -upr ./api_v0.4.12/path.markdown ./api_v0.6.12/path.markdown
--- ./api_v0.4.12/path.markdown	2011-09-21 00:45:30.000000000 +0400
+++ ./api_v0.6.12/path.markdown	2012-03-08 01:22:12.000000000 +0400
@@ -1,13 +1,19 @@
-## Path
+# Path
 
-This module contains utilities for dealing with file paths.  Use
-`require('path')` to use it.  It provides the following methods:
+This module contains utilities for handling and transforming file
+paths.  Almost all these methods perform only string transformations.
+The file system is not consulted to check whether paths are valid.
 
-### path.normalize(p)
+`path.exists` and `path.existsSync` are the exceptions, and should
+logically be found in the fs module as they do access the file system.
+
+Use `require('path')` to use this module.  The following methods are provided:
+
+## path.normalize(p)
 
 Normalize a string path, taking care of `'..'` and `'.'` parts.
 
-When multiple slashes are found, they're replaces by a single one;
+When multiple slashes are found, they're replaced by a single one;
 when the path contains a trailing slash, it is preserved.
 On windows backslashes are used. 
 
@@ -17,17 +23,22 @@ Example:
     // returns
     '/foo/bar/baz/asdf'
 
-### path.join([path1], [path2], [...])
+## path.join([path1], [path2], [...])
 
 Join all arguments together and normalize the resulting path.
+Non-string arguments are ignored.
 
 Example:
 
-    node> require('path').join(
-    ...   '/foo', 'bar', 'baz/asdf', 'quux', '..')
+    path.join('/foo', 'bar', 'baz/asdf', 'quux', '..')
+    // returns
     '/foo/bar/baz/asdf'
 
-### path.resolve([from ...], to)
+    path.join('foo', {}, 'bar')
+    // returns
+    'foo/bar'
+
+## path.resolve([from ...], to)
 
 Resolves `to` to an absolute path.
 
@@ -35,7 +46,7 @@ If `to` isn't already absolute `from` ar
 order, until an absolute path is found. If after using all `from` paths still
 no absolute path is found, the current working directory is used as well. The
 resulting path is normalized, and trailing slashes are removed unless the path 
-gets resolved to the root directory.
+gets resolved to the root directory. Non-string arguments are ignored.
 
 Another way to think of it is as a sequence of `cd` commands in a shell.
 
@@ -66,7 +77,27 @@ Examples:
     // if currently in /home/myself/node, it returns
     '/home/myself/node/wwwroot/static_files/gif/image.gif'
 
-### path.dirname(p)
+## path.relative(from, to)
+
+Solve the relative path from `from` to `to`.
+
+At times we have two absolute paths, and we need to derive the relative
+path from one to the other.  This is actually the reverse transform of
+`path.resolve`, which means we see that:
+
+    path.resolve(from, path.relative(from, to)) == path.resolve(to)
+
+Examples:
+
+    path.relative('C:\\orandea\\test\\aaa', 'C:\\orandea\\impl\\bbb')
+    // returns
+    '..\\..\\impl\\bbb'
+
+    path.relative('/data/orandea/test/aaa', '/data/orandea/impl/bbb')
+    // returns
+    '../../impl/bbb'
+
+## path.dirname(p)
 
 Return the directory name of a path.  Similar to the Unix `dirname` command.
 
@@ -76,7 +107,7 @@ Example:
     // returns
     '/foo/bar/baz/asdf'
 
-### path.basename(p, [ext])
+## path.basename(p, [ext])
 
 Return the last portion of a path.  Similar to the Unix `basename` command.
 
@@ -90,24 +121,29 @@ Example:
     // returns
     'quux'
 
-### path.extname(p)
+## path.extname(p)
 
-Return the extension of the path.  Everything after the last '.' in the last portion
-of the path.  If there is no '.' in the last portion of the path or the only '.' is
-the first character, then it returns an empty string.  Examples:
+Return the extension of the path, from the last '.' to end of string
+in the last portion of the path.  If there is no '.' in the last portion
+of the path or the first character of it is '.', then it returns
+an empty string.  Examples:
 
     path.extname('index.html')
     // returns
     '.html'
 
+    path.extname('index.')
+    // returns
+    '.'
+
     path.extname('index')
     // returns
     ''
 
 ### path.exists(p, [callback])
 
-Test whether or not the given path exists.  Then, call the `callback` argument
-with either true or false. Example:
+Test whether or not the given path exists by checking with the file system.
+Then call the `callback` argument with either true or false.  Example:
 
     path.exists('/etc/passwd', function (exists) {
       util.debug(exists ? "it's there" : "no passwd!");
diff -upr ./api_v0.4.12/process.markdown ./api_v0.6.12/process.markdown
--- ./api_v0.4.12/process.markdown	2011-09-21 00:45:54.000000000 +0400
+++ ./api_v0.6.12/process.markdown	2012-03-08 01:22:12.000000000 +0400
@@ -1,12 +1,12 @@
-## process
+# process
+
+<!-- type=global -->
 
 The `process` object is a global object and can be accessed from anywhere.
 It is an instance of `EventEmitter`.
 
 
-### Event: 'exit'
-
-`function () {}`
+## Event: 'exit'
 
 Emitted when the process is about to exit.  This is a good hook to perform
 constant time checks of the module's state (like for unit tests).  The main
@@ -22,9 +22,7 @@ Example of listening for `exit`:
       console.log('About to exit.');
     });
 
-### Event: 'uncaughtException'
-
-`function (err) { }`
+## Event: 'uncaughtException'
 
 Emitted when an exception bubbles all the way back to the event loop. If a
 listener is added for this exception, the default action (which is to print
@@ -50,9 +48,10 @@ your program's flow.  Especially for ser
 stay running forever, `uncaughtException` can be a useful safety mechanism.
 
 
-### Signal Events
+## Signal Events
 
-`function () {}`
+<!--type=event-->
+<!--name=SIGINT, SIGUSR1, etc.-->
 
 Emitted when the processes receives a signal. See sigaction(2) for a list of
 standard POSIX signal names such as SIGINT, SIGUSR1, etc.
@@ -70,7 +69,7 @@ An easy way to send the `SIGINT` signal
 programs.
 
 
-### process.stdout
+## process.stdout
 
 A `Writable Stream` to `stdout`.
 
@@ -80,13 +79,23 @@ Example: the definition of `console.log`
       process.stdout.write(d + '\n');
     };
 
+`process.stderr` and `process.stdout` are unlike other streams in Node in
+that writes to them are usually blocking.  They are blocking in the case
+that they refer to regular files or TTY file descriptors. In the case they
+refer to pipes, they are non-blocking like other streams.
+
+
+## process.stderr
 
-### process.stderr
+A writable stream to stderr.
 
-A writable stream to stderr. Writes on this stream are blocking.
+`process.stderr` and `process.stdout` are unlike other streams in Node in
+that writes to them are usually blocking.  They are blocking in the case
+that they refer to regular files or TTY file descriptors. In the case they
+refer to pipes, they are non-blocking like other streams.
 
 
-### process.stdin
+## process.stdin
 
 A `Readable Stream` for stdin. The stdin stream is paused by default, so one
 must call `process.stdin.resume()` to read from it.
@@ -105,7 +114,7 @@ Example of opening standard input and li
     });
 
 
-### process.argv
+## process.argv
 
 An array containing the command line arguments.  The first element will be
 'node', the second element will be the name of the JavaScript file.  The
@@ -126,7 +135,7 @@ This will generate:
     4: four
 
 
-### process.execPath
+## process.execPath
 
 This is the absolute pathname of the executable that started the process.
 
@@ -135,7 +144,7 @@ Example:
     /usr/local/bin/node
 
 
-### process.chdir(directory)
+## process.chdir(directory)
 
 Changes the current working directory of the process or throws an exception if that fails.
 
@@ -150,19 +159,19 @@ Changes the current working directory of
 
 
 
-### process.cwd()
+## process.cwd()
 
 Returns the current working directory of the process.
 
     console.log('Current directory: ' + process.cwd());
 
 
-### process.env
+## process.env
 
 An object containing the user environment. See environ(7).
 
 
-### process.exit(code=0)
+## process.exit([code])
 
 Ends the process with the specified `code`.  If omitted, exit uses the
 'success' code `0`.
@@ -174,7 +183,7 @@ To exit with a 'failure' code:
 The shell that executed node should see the exit code as 1.
 
 
-### process.getgid()
+## process.getgid()
 
 Gets the group identity of the process. (See getgid(2).)
 This is the numerical group id, not the group name.
@@ -182,7 +191,7 @@ This is the numerical group id, not the
     console.log('Current gid: ' + process.getgid());
 
 
-### process.setgid(id)
+## process.setgid(id)
 
 Sets the group identity of the process. (See setgid(2).)  This accepts either
 a numerical ID or a groupname string. If a groupname is specified, this method
@@ -198,7 +207,7 @@ blocks while resolving it to a numerical
     }
 
 
-### process.getuid()
+## process.getuid()
 
 Gets the user identity of the process. (See getuid(2).)
 This is the numerical userid, not the username.
@@ -206,7 +215,7 @@ This is the numerical userid, not the us
     console.log('Current uid: ' + process.getuid());
 
 
-### process.setuid(id)
+## process.setuid(id)
 
 Sets the user identity of the process. (See setuid(2).)  This accepts either
 a numerical ID or a username string.  If a username is specified, this method
@@ -222,20 +231,35 @@ blocks while resolving it to a numerical
     }
 
 
-### process.version
+## process.version
 
 A compiled-in property that exposes `NODE_VERSION`.
 
     console.log('Version: ' + process.version);
 
-### process.installPrefix
+## process.versions
+
+A property exposing version strings of node and its dependencies.
+
+    console.log(process.versions);
+
+Will output:
+
+    { node: '0.4.12',
+      v8: '3.1.8.26',
+      ares: '1.7.4',
+      ev: '4.4',
+      openssl: '1.0.0e-fips' }
+
+
+## process.installPrefix
 
 A compiled-in property that exposes `NODE_PREFIX`.
 
     console.log('Prefix: ' + process.installPrefix);
 
 
-### process.kill(pid, signal='SIGTERM')
+## process.kill(pid, [signal])
 
 Send a signal to a process. `pid` is the process id and `signal` is the
 string describing the signal to send.  Signal names are strings like
@@ -260,25 +284,32 @@ Example of sending a signal to yourself:
     process.kill(process.pid, 'SIGHUP');
 
 
-### process.pid
+## process.pid
 
 The PID of the process.
 
     console.log('This process is pid ' + process.pid);
 
-### process.title
+## process.title
 
 Getter/setter to set what is displayed in 'ps'.
 
 
-### process.platform
+## process.arch
+
+What processor architecture you're running on: `'arm'`, `'ia32'`, or `'x64'`.
+
+    console.log('This processor architecture is ' + process.arch);
+
+
+## process.platform
 
 What platform you're running on. `'linux2'`, `'darwin'`, etc.
 
     console.log('This platform is ' + process.platform);
 
 
-### process.memoryUsage()
+## process.memoryUsage()
 
 Returns an object describing the memory usage of the Node process
 measured in bytes.
@@ -290,14 +321,13 @@ measured in bytes.
 This will generate:
 
     { rss: 4935680,
-      vsize: 41893888,
       heapTotal: 1826816,
       heapUsed: 650472 }
 
 `heapTotal` and `heapUsed` refer to V8's memory usage.
 
 
-### process.nextTick(callback)
+## process.nextTick(callback)
 
 On the next loop around the event loop call this callback.
 This is *not* a simple alias to `setTimeout(fn, 0)`, it's much more
@@ -308,7 +338,7 @@ efficient.
     });
 
 
-### process.umask([mask])
+## process.umask([mask])
 
 Sets or reads the process's file mode creation mask. Child processes inherit
 the mask from the parent process. Returns the old mask if `mask` argument is
@@ -320,3 +350,7 @@ given, otherwise returns the current mas
     console.log('Changed umask from: ' + oldmask.toString(8) +
                 ' to ' + newmask.toString(8));
 
+
+## process.uptime()
+
+Number of seconds Node has been running.
diff -upr ./api_v0.4.12/querystring.markdown ./api_v0.6.12/querystring.markdown
--- ./api_v0.4.12/querystring.markdown	2011-09-21 00:45:30.000000000 +0400
+++ ./api_v0.6.12/querystring.markdown	2012-03-08 01:22:12.000000000 +0400
@@ -1,40 +1,44 @@
-## Query String
+# Query String
+
+<!--name=querystring-->
 
 This module provides utilities for dealing with query strings.
 It provides the following methods:
 
-### querystring.stringify(obj, sep='&', eq='=')
+## querystring.stringify(obj, [sep], [eq])
 
 Serialize an object to a query string.
-Optionally override the default separator and assignment characters.
+Optionally override the default separator (`'&'`) and assignment (`'='`)
+characters.
 
 Example:
 
-    querystring.stringify({foo: 'bar'})
+    querystring.stringify({ foo: 'bar', baz: ['qux', 'quux'], corge: '' })
     // returns
-    'foo=bar'
+    'foo=bar&baz=qux&baz=quux&corge='
 
-    querystring.stringify({foo: 'bar', baz: 'bob'}, ';', ':')
+    querystring.stringify({foo: 'bar', baz: 'qux'}, ';', ':')
     // returns
-    'foo:bar;baz:bob'
+    'foo:bar;baz:qux'
 
-### querystring.parse(str, sep='&', eq='=')
+## querystring.parse(str, [sep], [eq])
 
 Deserialize a query string to an object.
-Optionally override the default separator and assignment characters.
+Optionally override the default separator (`'&'`) and assignment (`'='`)
+characters.
 
 Example:
 
-    querystring.parse('a=b&b=c')
+    querystring.parse('foo=bar&baz=qux&baz=quux&corge')
     // returns
-    { a: 'b', b: 'c' }
+    { foo: 'bar', baz: ['qux', 'quux'], corge: '' }
 
-### querystring.escape
+## querystring.escape
 
 The escape function used by `querystring.stringify`,
 provided so that it could be overridden if necessary.
 
-### querystring.unescape
+## querystring.unescape
 
 The unescape function used by `querystring.parse`,
 provided so that it could be overridden if necessary.
diff -upr ./api_v0.4.12/readline.markdown ./api_v0.6.12/readline.markdown
--- ./api_v0.4.12/readline.markdown	2011-09-21 00:45:54.000000000 +0400
+++ ./api_v0.6.12/readline.markdown	2012-03-08 01:22:12.000000000 +0400
@@ -1,4 +1,4 @@
-## Readline
+# Readline
 
 To use this module, do `require('readline')`. Readline allows reading of a
 stream (such as STDIN) on a line-by-line basis.
@@ -9,7 +9,7 @@ to allow your program to gracefully term
 
     var rl = require('readline');
 
-    var i = rl.createInterface(process.sdtin, process.stdout, null);
+    var i = rl.createInterface(process.stdin, process.stdout, null);
     i.question("What do you think of node.js?", function(answer) {
       // TODO: Log the answer in a database
       console.log("Thank you for your valuable feedback.");
@@ -20,18 +20,29 @@ to allow your program to gracefully term
       process.stdin.destroy();
     });
 
-### rl.createInterface(input, output, completer)
+## rl.createInterface(input, output, completer)
 
 Takes two streams and creates a readline interface. The `completer` function
 is used for autocompletion. When given a substring, it returns `[[substr1,
 substr2, ...], originalsubstring]`.
 
+Also `completer` can be run in async mode if it accepts two arguments:
+
+  function completer(linePartial, callback) {
+    callback(null, [['123'], linePartial]);
+  }
+
 `createInterface` is commonly used with `process.stdin` and
 `process.stdout` in order to accept user input:
 
     var readline = require('readline'),
       rl = readline.createInterface(process.stdin, process.stdout);
 
+## Class: Interface
+
+The class that represents a readline interface with a stdin and stdout
+stream.
+
 ### rl.setPrompt(prompt, length)
 
 Sets the prompt, for example when you run `node` on the command line, you see
@@ -42,8 +53,6 @@ Sets the prompt, for example when you ru
 Readies readline for input from the user, putting the current `setPrompt`
 options on a new line, giving the user a new spot to write.
 
-<!-- ### rl.getColumns() Not available? -->
-
 ### rl.question(query, callback)
 
 Prepends the prompt with `query` and invokes `callback` with the user's
@@ -129,5 +138,5 @@ line interface:
 
 Take a look at this slightly more complicated
 [example](https://gist.github.com/901104), and
-[http-console](http://github.com/cloudhead/http-console) for a real-life use
-case.
\ No newline at end of file
+[http-console](https://github.com/cloudhead/http-console) for a real-life use
+case.
diff -upr ./api_v0.4.12/repl.markdown ./api_v0.6.12/repl.markdown
--- ./api_v0.4.12/repl.markdown	2011-09-21 00:45:30.000000000 +0400
+++ ./api_v0.6.12/repl.markdown	2012-03-08 01:22:12.000000000 +0400
@@ -1,4 +1,4 @@
-## REPL
+# REPL
 
 A Read-Eval-Print-Loop (REPL) is available both as a standalone program and easily
 includable in other programs.  REPL provides a way to interactively run
@@ -27,11 +27,24 @@ For example, you could add this to your
     alias node="env NODE_NO_READLINE=1 rlwrap node"
 
 
-### repl.start(prompt='> ', stream=process.stdin)
+## repl.start([prompt], [stream], [eval], [useGlobal], [ignoreUndefined])
 
 Starts a REPL with `prompt` as the prompt and `stream` for all I/O.  `prompt`
 is optional and defaults to `> `.  `stream` is optional and defaults to
-`process.stdin`.
+`process.stdin`. `eval` is optional too and defaults to async wrapper for
+`eval()`.
+
+If `useGlobal` is set to true, then the repl will use the global object,
+instead of running scripts in a separate context. Defaults to `false`.
+
+If `ignoreUndefined` is set to true, then the repl will not output return value
+of command if it's `undefined`. Defaults to `false`.
+
+You can use your own `eval` function if it has following signature:
+
+    function eval(cmd, callback) {
+      callback(null, result);
+    }
 
 Multiple REPLs may be started against the same running instance of node.  Each
 will share the same global object but will have unique I/O.
@@ -64,9 +77,12 @@ By starting a REPL from a Unix socket-ba
 connect to a long-running node process without restarting it.
 
 
-### REPL Features
+## REPL Features
+
+<!-- type=misc -->
 
 Inside the REPL, Control+D will exit.  Multi-line expressions can be input.
+Tab completion is supported for both global and local variables.
 
 The special variable `_` (underscore) contains the result of the last expression.
 
@@ -77,9 +93,9 @@ The special variable `_` (underscore) co
     > _ += 1
     4
 
-The REPL provides access to any variables in the global scope. You can expose a variable
-to the REPL explicitly by assigning it to the `context` object associated with each
-`REPLServer`.  For example:
+The REPL provides access to any variables in the global scope. You can expose
+a variable to the REPL explicitly by assigning it to the `context` object
+associated with each `REPLServer`.  For example:
 
     // repl_test.js
     var repl = require("repl"),
@@ -97,7 +113,18 @@ There are a few special REPL commands:
 
   - `.break` - While inputting a multi-line expression, sometimes you get lost
     or just don't care about completing it. `.break` will start over.
-  - `.clear` - Resets the `context` object to an empty object and clears any multi-line expression.
+  - `.clear` - Resets the `context` object to an empty object and clears any
+    multi-line expression.
   - `.exit` - Close the I/O stream, which will cause the REPL to exit.
   - `.help` - Show this list of special commands.
+  - `.save` - Save the current REPL session to a file
+    >.save ./file/to/save.js
+  - `.load` - Load a file into the current REPL session.
+    >.load ./file/to/load.js
+
+The following key combinations in the REPL have these special effects:
+
+  - `<ctrl>C` - Similar to the `.break` keyword.  Terminates the current
+    command.  Press twice on a blank line to forcibly exit.
+  - `<ctrl>D` - Similar to the `.exit` keyword.

diff -upr ./api_v0.4.12/timers.markdown ./api_v0.6.12/timers.markdown
--- ./api_v0.4.12/timers.markdown	2011-09-21 00:45:30.000000000 +0400
+++ ./api_v0.6.12/timers.markdown	2012-03-08 01:22:12.000000000 +0400
@@ -1,21 +1,29 @@
-## Timers
+# Timers
 
-### setTimeout(callback, delay, [arg], [...])
+All of the timer functions are globals.  You do not need to `require()`
+this module in order to use them.
 
-To schedule execution of `callback` after `delay` milliseconds. Returns a
-`timeoutId` for possible use with `clearTimeout()`. Optionally, you can
+## setTimeout(callback, delay, [arg], [...])
+
+To schedule execution of a one-time `callback` after `delay` milliseconds. Returns a
+`timeoutId` for possible use with `clearTimeout()`. Optionally you can
 also pass arguments to the callback.
 
-### clearTimeout(timeoutId)
+It is important to note that your callback will probably not be called in exactly
+`delay` milliseconds - Node.js makes no guarantees about the exact timing of when
+the callback will fire, nor of the ordering things will fire in. The callback will
+be called as close as possible to the time specified.
+
+## clearTimeout(timeoutId)
 
 Prevents a timeout from triggering.
 
-### setInterval(callback, delay, [arg], [...])
+## setInterval(callback, delay, [arg], [...])
 
 To schedule the repeated execution of `callback` every `delay` milliseconds.
-Returns a `intervalId` for possible use with `clearInterval()`. Optionally,
+Returns a `intervalId` for possible use with `clearInterval()`. Optionally
 you can also pass arguments to the callback.
 
-### clearInterval(intervalId)
+## clearInterval(intervalId)
 
 Stops a interval from triggering.
diff -upr ./api_v0.4.12/tls.markdown ./api_v0.6.12/tls.markdown
--- ./api_v0.4.12/tls.markdown	2011-09-21 00:45:54.000000000 +0400
+++ ./api_v0.6.12/tls.markdown	2012-03-08 01:22:12.000000000 +0400
@@ -1,4 +1,4 @@
-## TLS (SSL)
+# TLS (SSL)
 
 Use `require('tls')` to access this module.
 
@@ -26,43 +26,186 @@ Alternatively you can send the CSR to a
 (TODO: docs on creating a CA, for now interested users should just look at
 `test/fixtures/keys/Makefile` in the Node source code)
 
+## Client-initiated renegotiation attack mitigation
 
-### s = tls.connect(port, [host], [options], callback)
+<!-- type=misc -->
 
-Creates a new client connection to the given `port` and `host`. (If `host`
-defaults to `localhost`.) `options` should be an object which specifies
+The TLS protocol lets the client renegotiate certain aspects of the TLS session.
+Unfortunately, session renegotiation requires a disproportional amount of
+server-side resources, which makes it a potential vector for denial-of-service
+attacks.
+
+To mitigate this, renegotiations are limited to three times every 10 minutes. An
+error is emitted on the [CleartextStream](#tls.CleartextStream) instance when
+the threshold is exceeded. The limits are configurable:
+
+  - `tls.CLIENT_RENEG_LIMIT`: renegotiation limit, default is 3.
+
+  - `tls.CLIENT_RENEG_WINDOW`: renegotiation window in seconds, default is
+                               10 minutes.
+
+Don't change the defaults unless you know what you are doing.
+
+To test your server, connect to it with `openssl s_client -connect address:port`
+and tap `R<CR>` (that's the letter `R` followed by a carriage return) a few
+times.
+
+
+## NPN and SNI
+
+<!-- type=misc -->
+
+NPN (Next Protocol Negotiation) and SNI (Server Name Indication) are TLS
+handshake extensions allowing you:
+
+  * NPN - to use one TLS server for multiple protocols (HTTP, SPDY)
+  * SNI - to use one TLS server for multiple hostnames with different SSL
+    certificates.
+
+
+## tls.createServer(options, [secureConnectionListener])
+
+Creates a new [tls.Server](#tls.Server).
+The `connectionListener` argument is automatically set as a listener for the
+[secureConnection](#event_secureConnection_) event.
+The `options` object has these possibilities:
 
   - `key`: A string or `Buffer` containing the private key of the server in
     PEM format. (Required)
 
+  - `passphrase`: A string of passphrase for the private key.
+
   - `cert`: A string or `Buffer` containing the certificate key of the server in
+    PEM format. (Required)
+
+  - `ca`: An array of strings or `Buffer`s of trusted certificates. If this is
+    omitted several well known "root" CAs will be used, like VeriSign.
+    These are used to authorize connections.
+
+  - `ciphers`: A string describing the ciphers to use or exclude. Consult
+    <http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT> for
+    details on the format.
+
+  - `requestCert`: If `true` the server will request a certificate from
+    clients that connect and attempt to verify that certificate. Default:
+    `false`.
+
+  - `rejectUnauthorized`: If `true` the server will reject any connection
+    which is not authorized with the list of supplied CAs. This option only
+    has an effect if `requestCert` is `true`. Default: `false`.
+
+  - `NPNProtocols`: An array or `Buffer` of possible NPN protocols. (Protocols
+    should be ordered by their priority).
+
+  - `SNICallback`: A function that will be called if client supports SNI TLS
+    extension. Only one argument will be passed to it: `servername`. And
+    `SNICallback` should return SecureContext instance.
+    (You can use `crypto.createCredentials(...).context` to get proper
+    SecureContext). If `SNICallback` wasn't provided - default callback with
+    high-level API will be used (see below).
+
+  - `sessionIdContext`: A string containing a opaque identifier for session
+    resumption. If `requestCert` is `true`, the default is MD5 hash value
+    generated from command-line. Otherwise, the default is not provided.
+
+Here is a simple example echo server:
+
+    var tls = require('tls');
+    var fs = require('fs');
+
+    var options = {
+      key: fs.readFileSync('server-key.pem'),
+      cert: fs.readFileSync('server-cert.pem'),
+
+      // This is necessary only if using the client certificate authentication.
+      requestCert: true,
+
+      // This is necessary only if the client uses the self-signed certificate.
+      ca: [ fs.readFileSync('client-cert.pem') ]
+    };
+
+    var server = tls.createServer(options, function(cleartextStream) {
+      console.log('server connected',
+                  cleartextStream.authorized ? 'authorized' : 'unauthorized');
+      cleartextStream.write("welcome!\n");
+      cleartextStream.setEncoding('utf8');
+      cleartextStream.pipe(cleartextStream);
+    });
+    server.listen(8000, function() {
+      console.log('server bound');
+    });
+
+
+You can test this server by connecting to it with `openssl s_client`:
+
+
+    openssl s_client -connect 127.0.0.1:8000
+
+
+## tls.connect(port, [host], [options], [secureConnectListener])
+
+Creates a new client connection to the given `port` and `host`. (If `host`
+defaults to `localhost`.) `options` should be an object which specifies
+
+  - `key`: A string or `Buffer` containing the private key of the client in
+    PEM format.
+
+  - `passphrase`: A string of passphrase for the private key.
+
+  - `cert`: A string or `Buffer` containing the certificate key of the client in
     PEM format.
 
   - `ca`: An array of strings or `Buffer`s of trusted certificates. If this is
     omitted several well known "root" CAs will be used, like VeriSign.
     These are used to authorize connections.
 
+  - `NPNProtocols`: An array of string or `Buffer` containing supported NPN
+    protocols. `Buffer` should have following format: `0x05hello0x05world`,
+    where first byte is next protocol name's length. (Passing array should
+    usually be much simpler: `['hello', 'world']`.)
+
+  - `servername`: Servername for SNI (Server Name Indication) TLS extension.
+
+  - `socket`: Establish secure connection on a given socket rather than
+    creating a new socket. If this option is specified, `host` and `port`
+    are ignored.  This is intended FOR INTERNAL USE ONLY.  As with all
+    undocumented APIs in Node, they should not be used.
+
+The `secureConnectListener` parameter will be added as a listener for the
+['secureConnect'](#event_secureConnect_) event.
+
 `tls.connect()` returns a [CleartextStream](#tls.CleartextStream) object.
 
-After the TLS/SSL handshake the `callback` is called. The `callback` will be
-called no matter if the server's certificate was authorized or not. It is up
-to the user to test `s.authorized` to see if the server certificate was signed
-by one of the specified CAs. If `s.authorized === false` then the error can be
-found in `s.authorizationError`.
+Here is an example of a client of echo server as described previously:
 
+    var tls = require('tls');
+    var fs = require('fs');
 
-### STARTTLS
+    var options = {
+      // These are necessary only if using the client certificate authentication
+      key: fs.readFileSync('client-key.pem'),
+      cert: fs.readFileSync('client-cert.pem'),
+    
+      // This is necessary only if the server uses the self-signed certificate
+      ca: [ fs.readFileSync('server-cert.pem') ]
+    };
 
-In the v0.4 branch no function exists for starting a TLS session on an
-already existing TCP connection.  This is possible it just requires a bit of
-work. The technique is to use `tls.createSecurePair()` which returns two
-streams: an encrypted stream and a cleartext stream. The encrypted stream is
-then piped to the socket, the cleartext stream is what the user interacts with
-thereafter.
+    var cleartextStream = tls.connect(8000, options, function() {
+      console.log('client connected',
+                  cleartextStream.authorized ? 'authorized' : 'unauthorized');
+      process.stdin.pipe(cleartextStream);
+      process.stdin.resume();
+    });
+    cleartextStream.setEncoding('utf8');
+    cleartextStream.on('data', function(data) {
+      console.log(data);
+    });
+    cleartextStream.on('end', function() {
+      server.close();
+    });
 
-[Here is some code that does it.](http://gist.github.com/848444)
 
-### pair = tls.createSecurePair([credentials], [isServer], [requestCert], [rejectUnauthorized])
+## tls.createSecurePair([credentials], [isServer], [requestCert], [rejectUnauthorized])
 
 Creates a new secure pair object with two streams, one of which reads/writes
 encrypted data, and one reads/writes cleartext data.
@@ -84,7 +227,11 @@ and the cleartext one is used as a repla
 `tls.createSecurePair()` returns a SecurePair object with
 [cleartext](#tls.CleartextStream) and `encrypted` stream properties.
 
-#### Event: 'secure'
+## Class: SecurePair
+
+Returned by tls.createSecurePair.
+
+### Event: 'secure'
 
 The event is emitted from the SecurePair once the pair has successfully
 established a secure connection.
@@ -93,59 +240,13 @@ Similarly to the checking for the server
 pair.cleartext.authorized should be checked to confirm whether the certificate
 used properly authorized.
 
-### tls.Server
+## Class: tls.Server
 
 This class is a subclass of `net.Server` and has the same methods on it.
 Instead of accepting just raw TCP connections, this accepts encrypted
 connections using TLS or SSL.
 
-Here is a simple example echo server:
-
-    var tls = require('tls');
-    var fs = require('fs');
-
-    var options = {
-      key: fs.readFileSync('server-key.pem'),
-      cert: fs.readFileSync('server-cert.pem')
-    };
-
-    tls.createServer(options, function (s) {
-      s.write("welcome!\n");
-      s.pipe(s);
-    }).listen(8000);
-
-
-You can test this server by connecting to it with `openssl s_client`:
-
-
-    openssl s_client -connect 127.0.0.1:8000
-
-
-#### tls.createServer(options, secureConnectionListener)
-
-This is a constructor for the `tls.Server` class. The options object
-has these possibilities:
-
-  - `key`: A string or `Buffer` containing the private key of the server in
-    PEM format. (Required)
-
-  - `cert`: A string or `Buffer` containing the certificate key of the server in
-    PEM format. (Required)
-
-  - `ca`: An array of strings or `Buffer`s of trusted certificates. If this is
-    omitted several well known "root" CAs will be used, like VeriSign.
-    These are used to authorize connections.
-
-  - `requestCert`: If `true` the server will request a certificate from
-    clients that connect and attempt to verify that certificate. Default:
-    `false`.
-
-  - `rejectUnauthorized`: If `true` the server will reject any connection
-    which is not authorized with the list of supplied CAs. This option only
-    has an effect if `requestCert` is `true`. Default: `false`.
-
-
-#### Event: 'secureConnection'
+### Event: 'secureConnection'
 
 `function (cleartextStream) {}`
 
@@ -160,9 +261,20 @@ server. If `cleartextStream.authorized`
 `cleartextStream.authorizationError` is set to describe how authorization
 failed. Implied but worth mentioning: depending on the settings of the TLS
 server, you unauthorized connections may be accepted.
+`cleartextStream.npnProtocol` is a string containing selected NPN protocol.
+`cleartextStream.servername` is a string containing servername requested with
+SNI.
 
 
-#### server.listen(port, [host], [callback])
+### Event: 'clientError'
+
+`function (exception) { }`
+
+When a client connection emits an 'error' event before secure connection is
+established - it will be forwarded here.
+
+
+### server.listen(port, [host], [callback])
 
 Begin accepting connections on the specified `port` and `host`.  If the
 `host` is omitted, the server will accept connections directed to any
@@ -174,44 +286,67 @@ when the server has been bound.
 See `net.Server` for more information.
 
 
-#### server.close()
+### server.close()
 
 Stops the server from accepting new connections. This function is
 asynchronous, the server is finally closed when the server emits a `'close'`
 event.
 
+### server.address()
 
-#### server.maxConnections
+Returns the bound address and port of the server as reported by the operating
+system.
+See [net.Server.address()](net.html#server.address) for more information.
+
+### server.addContext(hostname, credentials)
+
+Add secure context that will be used if client request's SNI hostname is
+matching passed `hostname` (wildcards can be used). `credentials` can contain
+`key`, `cert` and `ca`.
+
+### server.maxConnections
 
 Set this property to reject connections when the server's connection count
 gets high.
 
-#### server.connections
+### server.connections
 
 The number of concurrent connections on the server.
 
 
-### tls.CleartextStream
+## Class: tls.CleartextStream
 
 This is a stream on top of the *Encrypted* stream that makes it possible to
 read/write an encrypted data as a cleartext data.
 
-This instance implements a duplex [Stream](streams.html#streams) interfaces.
+This instance implements a duplex [Stream](stream.html) interfaces.
 It has all the common stream methods and events.
 
-#### cleartextStream.authorized
+A ClearTextStream is the `clear` member of a SecurePair object.
+
+### Event: 'secureConnect'
+
+This event is emitted after a new connection has been successfully handshaked. 
+The listener will be called no matter if the server's certificate was
+authorized or not. It is up to the user to test `cleartextStream.authorized`
+to see if the server certificate was signed by one of the specified CAs.
+If `cleartextStream.authorized === false` then the error can be found in
+`cleartextStream.authorizationError`. Also if NPN was used - you can check
+`cleartextStream.npnProtocol` for negotiated protocol.
+
+### cleartextStream.authorized
 
 A boolean that is `true` if the peer certificate was signed by one of the
 specified CAs, otherwise `false`
 
-#### cleartextStream.authorizationError
+### cleartextStream.authorizationError
 
 The reason why the peer's certificate has not been verified. This property
 becomes available only when `cleartextStream.authorized === false`.
 
-#### cleartextStream.getPeerCertificate()
+### cleartextStream.getPeerCertificate()
 
-Returns an object representing the peer's certicicate. The returned object has
+Returns an object representing the peer's certificate. The returned object has
 some properties corresponding to the field of the certificate.
 
 Example:
@@ -237,3 +372,17 @@ Example:
 If the peer does not provide a certificate, it returns `null` or an empty
 object.
 
+### cleartextStream.address()
+
+Returns the bound address and port of the underlying socket as reported by the
+operating system. Returns an object with two properties, e.g.
+`{"address":"192.168.57.1", "port":62053}`
+
+### cleartextStream.remoteAddress
+
+The string representation of the remote IP address. For example,
+`'74.125.127.100'` or `'2001:4860:a005::68'`.
+
+### cleartextStream.remotePort
+
+The numeric representation of the remote port. For example, `443`.
diff -upr ./api_v0.4.12/tty.markdown ./api_v0.6.12/tty.markdown
--- ./api_v0.4.12/tty.markdown	2011-03-05 21:47:20.000000000 +0300
+++ ./api_v0.6.12/tty.markdown	2012-03-08 01:22:12.000000000 +0400
@@ -1,12 +1,12 @@
-## TTY
+# TTY
 
 Use `require('tty')` to access this module.
 
 Example:
 
     var tty = require('tty');
-    tty.setRawMode(true);
     process.stdin.resume();
+    tty.setRawMode(true);
     process.stdin.on('keypress', function(char, key) {
       if (key && key.ctrl && key.name == 'c') {
         console.log('graceful exit');
@@ -16,35 +16,25 @@ Example:
 
 
 
-### tty.open(path, args=[])
-
-Spawns a new process with the executable pointed to by `path` as the session
-leader to a new pseudo terminal.
-
-Returns an array `[slaveFD, childProcess]`. `slaveFD` is the file descriptor
-of the slave end of the pseudo terminal. `childProcess` is a child process
-object.
-
-
-### tty.isatty(fd)
+## tty.isatty(fd)
 
 Returns `true` or `false` depending on if the `fd` is associated with a
 terminal.
 
 
-### tty.setRawMode(mode)
+## tty.setRawMode(mode)
 
 `mode` should be `true` or `false`. This sets the properties of the current
 process's stdin fd to act either as a raw device or default.
 
 
-### tty.setWindowSize(fd, row, col)
-
-`ioctl`s the window size settings to the file descriptor.
+## tty.setWindowSize(fd, row, col)
 
+This function was removed in v0.6.0.
 
-### tty.getWindowSize(fd)
+## tty.getWindowSize(fd)
 
-Returns `[row, col]` for the TTY associated with the file descriptor.
+This function was removed in v0.6.0. Use `process.stdout.getWindowSize()`
+instead.
 
 
diff -upr ./api_v0.4.12/url.markdown ./api_v0.6.12/url.markdown
--- ./api_v0.4.12/url.markdown	2011-09-21 00:45:54.000000000 +0400
+++ ./api_v0.6.12/url.markdown	2012-03-08 01:22:12.000000000 +0400
@@ -1,4 +1,4 @@
-## URL
+# URL
 
 This module has utilities for URL resolution and parsing.
 Call `require('url')` to use it.
@@ -9,19 +9,19 @@ string will not be in the parsed object.
 
 `'http://user:pass@host.com:8080/p/a/t/h?query=string#hash'`
 
-* `href`: The full URL that was originally parsed.
+* `href`: The full URL that was originally parsed. Both the protocol and host are lowercased.
 
   Example: `'http://user:pass@host.com:8080/p/a/t/h?query=string#hash'`
-* `protocol`: The request protocol.
+* `protocol`: The request protocol, lowercased.
 
   Example: `'http:'`
-* `host`: The full host portion of the URL, including port and authentication information.
+* `host`: The full lowercased host portion of the URL, including port and authentication information.
 
   Example: `'user:pass@host.com:8080'`
 * `auth`: The authentication information portion of a URL.
 
   Example: `'user:pass'`
-* `hostname`: Just the hostname portion of the host.
+* `hostname`: Just the lowercased hostname portion of the host.
 
   Example: `'host.com'`
 * `port`: The port number portion of the host.
@@ -33,6 +33,9 @@ string will not be in the parsed object.
 * `search`: The 'query string' portion of the URL, including the leading question mark.
 
   Example: `'?query=string'`
+* `path`: Concatenation of `pathname` and `search`.
+
+  Example: `'/p/a/t/h?query=string'`
 * `query`: Either the 'params' portion of the query string, or a querystring-parsed object.
 
   Example: `'query=string'` or `{'query':'string'}`
@@ -42,21 +45,36 @@ string will not be in the parsed object.
 
 The following methods are provided by the URL module:
 
-### url.parse(urlStr, parseQueryString=false, slashesDenoteHost=false)
+## url.parse(urlStr, [parseQueryString], [slashesDenoteHost])
 
 Take a URL string, and return an object.
 
 Pass `true` as the second argument to also parse
 the query string using the `querystring` module.
+Defaults to `false`.
 
 Pass `true` as the third argument to treat `//foo/bar` as
 `{ host: 'foo', pathname: '/bar' }` rather than
-`{ pathname: '//foo/bar' }`.
+`{ pathname: '//foo/bar' }`. Defaults to `false`.
 
-### url.format(urlObj)
+## url.format(urlObj)
 
 Take a parsed URL object, and return a formatted URL string.
 
-### url.resolve(from, to)
+* `href` will be ignored.
+* `protocol`is treated the same with or without the trailing `:` (colon).
+  * The protocols `http`, `https`, `ftp`, `gopher`, `file` will be postfixed with `://` (colon-slash-slash).
+  * All other protocols `mailto`, `xmpp`, `aim`, `sftp`, `foo`, etc will be postfixed with `:` (colon)
+* `auth` will only be used if `host` is absent.
+* `hostname` will only be used if `host` is absent.
+* `port` will only be used if `host` is absent.
+* `host` will be used in place of `auth`, `hostname`, and `port`
+* `pathname` is treated the same with or without the leading `/` (slash)
+* `search` will be used in place of `query`
+* `query` (object; see `querystring`) will only be used if `search` is absent.
+* `search` is treated the same with or without the leading `?` (question mark)
+* `hash` is treated the same with or without the leading `#` (pound sign, anchor)
+
+## url.resolve(from, to)
 
 Take a base URL, and a href URL, and resolve them as a browser would for an anchor tag.
diff -upr ./api_v0.4.12/util.markdown ./api_v0.6.12/util.markdown
--- ./api_v0.4.12/util.markdown	2011-09-21 00:45:30.000000000 +0400
+++ ./api_v0.6.12/util.markdown	2012-03-08 01:22:12.000000000 +0400
@@ -1,10 +1,41 @@
-## util
+# util
 
 These functions are in the module `'util'`. Use `require('util')` to access
 them.
 
 
-### util.debug(string)
+## util.format()
+
+Returns a formatted string using the first argument as a `printf`-like format.
+
+The first argument is a string that contains zero or more *placeholders*.
+Each placeholder is replaced with the converted value from its corresponding
+argument. Supported placeholders are:
+
+* `%s` - String.
+* `%d` - Number (both integer and float).
+* `%j` - JSON.
+* `%%` - single percent sign (`'%'`). This does not consume an argument.
+
+If the placeholder does not have a corresponding argument, the placeholder is
+not replaced.
+
+    util.format('%s:%s', 'foo'); // 'foo:%s'
+
+If there are more arguments than placeholders, the extra arguments are
+converted to strings with `util.inspect()` and these strings are concatenated,
+delimited by a space.
+
+    util.format('%s:%s', 'foo', 'bar', 'baz'); // 'foo:bar baz'
+
+If the first argument is not a format string then `util.format()` returns
+a string that is the concatenation of all its arguments separated by spaces.
+Each argument is converted to a string with `util.inspect()`.
+
+    util.format(1, 2, 3); // '1 2 3'
+
+
+## util.debug(string)
 
 A synchronous output function. Will block the process and
 output `string` immediately to `stderr`.
@@ -12,19 +43,19 @@ output `string` immediately to `stderr`.
     require('util').debug('message on stderr');
 
 
-### util.log(string)
+## util.log(string)
 
 Output with timestamp on `stdout`.
 
     require('util').log('Timestamped message.');
 
 
-### util.inspect(object, showHidden=false, depth=2)
+## util.inspect(object, [showHidden], [depth], [colors])
 
 Return a string representation of `object`, which is useful for debugging.
 
 If `showHidden` is `true`, then the object's non-enumerable properties will be
-shown too.
+shown too. Defaults to `false`.
 
 If `depth` is provided, it tells `inspect` how many times to recurse while
 formatting the object. This is useful for inspecting large complicated objects.
@@ -32,6 +63,9 @@ formatting the object. This is useful fo
 The default is to only recurse twice.  To make it recurse indefinitely, pass
 in `null` for `depth`.
 
+If `colors` is `true`, the output will be styled with ANSI color codes.
+Defaults to `false`.
+
 Example of inspecting all properties of the `util` object:
 
     var util = require('util');
@@ -39,7 +73,63 @@ Example of inspecting all properties of
     console.log(util.inspect(util, true, null));
 
 
-### util.pump(readableStream, writableStream, [callback])
+## util.isArray(object)
+
+Returns `true` if the given "object" is an `Array`. `false` otherwise.
+
+    var util = require('util');
+
+    util.isArray([])
+      // true
+    util.isArray(new Array)
+      // true
+    util.isArray({})
+      // false
+
+
+## util.isRegExp(object)
+
+Returns `true` if the given "object" is a `RegExp`. `false` otherwise.
+
+    var util = require('util');
+
+    util.isRegExp(/some regexp/)
+      // true
+    util.isRegExp(new RegExp('another regexp'))
+      // true
+    util.isRegExp({})
+      // false
+
+
+## util.isDate(object)
+
+Returns `true` if the given "object" is a `Date`. `false` otherwise.
+
+    var util = require('util');
+
+    util.isDate(new Date())
+      // true
+    util.isDate(Date())
+      // false (without 'new' returns a String)
+    util.isDate({})
+      // false
+
+
+## util.isError(object)
+
+Returns `true` if the given "object" is an `Error`. `false` otherwise.
+
+    var util = require('util');
+
+    util.isError(new Error())
+      // true
+    util.isError(new TypeError())
+      // true
+    util.isError({ name: 'Error', message: 'an error occurred' })
+      // false
+
+
+## util.pump(readableStream, writableStream, [callback])
 
 Experimental
 
@@ -50,7 +140,7 @@ an error as its only argument and is cal
 when an error occurs.
 
 
-### util.inherits(constructor, superConstructor)
+## util.inherits(constructor, superConstructor)
 
 Inherit the prototype methods from one
 [constructor](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/constructor)
diff -upr ./api_v0.4.12/vm.markdown ./api_v0.6.12/vm.markdown
--- ./api_v0.4.12/vm.markdown	2011-09-21 00:45:30.000000000 +0400
+++ ./api_v0.6.12/vm.markdown	2012-03-08 01:22:12.000000000 +0400
@@ -1,4 +1,6 @@
-## Executing JavaScript
+# Executing JavaScript
+
+<!--name=vm-->
 
 You can access this module with:
 
@@ -7,10 +9,11 @@ You can access this module with:
 JavaScript code can be compiled and run immediately or compiled, saved, and run later.
 
 
-### vm.runInThisContext(code, [filename])
+## vm.runInThisContext(code, [filename])
 
-`vm.runInThisContext()` compiles `code` as if it were loaded from `filename`,
-runs it and returns the result. Running code does not have access to local scope. `filename` is optional.
+`vm.runInThisContext()` compiles `code`, runs it and returns the result. Running
+code does not have access to local scope. `filename` is optional, it's used only
+in stack traces.
 
 Example of using `vm.runInThisContext` and `eval` to run the same code:
 
@@ -36,12 +39,12 @@ In case of syntax error in `code`, `vm.r
 and throws an exception.
 
 
-### vm.runInNewContext(code, [sandbox], [filename])
+## vm.runInNewContext(code, [sandbox], [filename])
 
-`vm.runInNewContext` compiles `code` to run in `sandbox` as if it were loaded from `filename`,
-then runs it and returns the result. Running code does not have access to local scope and
-the object `sandbox` will be used as the global object for `code`.
-`sandbox` and `filename` are optional.
+`vm.runInNewContext` compiles `code`, then runs it in `sandbox` and returns the
+result. Running code does not have access to local scope. The object `sandbox`
+will be used as the global object for `code`.
+`sandbox` and `filename` are optional, `filename` is only used in stack traces.
 
 Example: compile and execute code that increments a global variable and sets a new one.
 These globals are contained in the sandbox.
@@ -65,19 +68,63 @@ requires a separate process.
 In case of syntax error in `code`, `vm.runInNewContext` emits the syntax error to stderr
 and throws an exception.
 
+## vm.runInContext(code, context, [filename])
+
+`vm.runInContext` compiles `code`, then runs it in `context` and returns the
+result. A (V8) context comprises a global object, together with a set of
+built-in objects and functions. Running code does not have access to local scope
+and the global object held within `context` will be used as the global object
+for `code`.
+`filename` is optional, it's used only in stack traces.
+
+Example: compile and execute code in a existing context.
+
+    var util = require('util'),
+        vm = require('vm'),
+        initSandbox = {
+          animal: 'cat',
+          count: 2
+        },
+        context = vm.createContext(initSandbox);
+
+    vm.runInContext('count += 1; name = "CATT"', context, 'myfile.vm');
+    console.log(util.inspect(context));
 
-### vm.createScript(code, [filename])
+    // { animal: 'cat', count: 3, name: 'CATT' }
 
-`createScript` compiles `code` as if it were loaded from `filename`,
-but does not run it. Instead, it returns a `vm.Script` object representing this compiled code.
-This script can be run later many times using methods below.
-The returned script is not bound to any global object.
-It is bound before each run, just for that run. `filename` is optional.
+Note that `createContext` will perform a shallow clone of the supplied sandbox object in order to
+initialise the global object of the freshly constructed context.
+
+Note that running untrusted code is a tricky business requiring great care.  To prevent accidental
+global variable leakage, `vm.runInContext` is quite useful, but safely running untrusted code
+requires a separate process.
+
+In case of syntax error in `code`, `vm.runInContext` emits the syntax error to stderr
+and throws an exception.
+
+## vm.createContext([initSandbox])
+
+`vm.createContext` creates a new context which is suitable for use as the 2nd argument of a subsequent
+call to `vm.runInContext`. A (V8) context comprises a global object together with a set of
+build-in objects and functions. The optional argument `initSandbox` will be shallow-copied
+to seed the initial contents of the global object used by the context.
+
+## vm.createScript(code, [filename])
+
+`createScript` compiles `code` but does not run it. Instead, it returns a
+`vm.Script` object representing this compiled code. This script can be run
+later many times using methods below. The returned script is not bound to any
+global object. It is bound before each run, just for that run. `filename` is
+optional, it's only used in stack traces.
 
 In case of syntax error in `code`, `createScript` prints the syntax error to stderr
 and throws an exception.
