## Стандартные модули

Вместе с Node поставляется несколько стандартных встроенных модулей,
большинство из которых описано ниже. Стандартный способ использования этих
модулей — вызов `require('name')` и сохранение возвращаемого объекта в локальной
переменной с именем, совпадающим с именем модуля.

Пример:

    var util = require('util');


Также возможно расширение Node другими модулями. См. `'Модули'`.

## Модули

Node использует систему модулей CommonJS.

Node имеет простую систему загрузки модулей, файлы и модули в которой являются,
в каком-то смысле, синонимами. В примере `foo.js` загружает модуль `circle.js`,
находящийся в той же директории.

Содержимое `foo.js`:

    var circle = require('./circle');
    console.log( 'The area of a circle of radius 4 is '
               + circle.area(4));

Содержимое `circle.js`:

    var PI = 3.14;

    exports.area = function (r) {
      return PI * r * r;
    };

    exports.circumference = function (r) {
      return 2 * PI * r;
    };

Модуль `circle.js` экспортирует функции `area()` и `circumference()`. Для этого
достаточно добавить экспортируемые функции/объекты к специальному объекты `exports`.
(В качетве альтернативы можно использовать `this` вместо `exports`.) Переменные,
локальные для модуля, не будут видны извне. В этом примере переменная `PI` видна
только внутри модуля `circle.js`. Модули, имена которых не начинаются с `'./'`
являются стандартными модулями Node, о них будет рассказано позже.

### Поиск модулей

модули, имена которых начинаются на `'./'` считаются относительными для
вызывающего `require()` модуля. Это означает, что в примере выше `circle.js`
должен находиться в той же папке, что и `foo.js`, тогда `require('./circle')`
будет работать.

В случае отсутствия `'./'` (например `require('assert')`), модуль будет искаться
в папках, указаных в массиве `require.paths`. `require.paths` обычно выглядит
примерно так:

`[ '/home/ryan/.node_modules' ]`

Соответственно, при вызове `require('foo')` Node будет пробовать найти файлы
в следующем порядке:

* 1: `/home/ryan/.node_modules/foo`
* 2: `/home/ryan/.node_modules/foo.js`
* 3: `/home/ryan/.node_modules/foo.node`
* 4: `/home/ryan/.node_modules/foo/index.js`
* 5: `/home/ryan/.node_modules/foo/index.node`

И остановится как только файл будет найден. Файлы с расширением `'node'`
являются C/C++ дополнениями, см. 'C/C++ дополнения' ниже. `'index.js'` позволяет
вам собирать модуль в отдельной папке, дающей имя модулю.

Список `require.paths` можно изменять во время выполнения программы, или задать
с помощью переменной окружения `NODE_PATH` (содержащей пути, разделённые двоеточием).

Также Node будет производить поиск в папке `node_modules` в текущей папке,
и выше по дереву проекта. Это позволяет вам иметь различыне версии пакета
для различного окружения. Например, если у вас есть devopment версия и production
версия проекта с различным модулем foo, располагающемся в `projects/x/development/node_modules/foo` и
`projects/x/production/node_modules/foo` соответственно.


При последующих вызовах `require('foo')` поиск не будет происходить второй раз,
а модуль будет загружен из объекта `require.cache`.

Для того, чтобы определить, какой модуль был загружен при вызове `require()`,
можно воспользоваться функцией `require.resolve()`.

