<!DOCTYPE html>
<!-- saved from url=(0026)http://nodejs.org/api.html -->
<HTML><HEAD><META http-equiv="Content-Type" content="text/html; charset=UTF-8">

	<META name="generator" value="Ronn/v0.4.1">
	<TITLE>node(1) -- Synopsis for V8 JavaScript</TITLE>
	<STYLE type="text/css">
		*{
			margin: 0;padding: 0;
		}
		html,body
		{
			height: 100%;
		}
		body
		{
			font-family:helvetica, arial, sans serif;
			background:#22252a;
			color:#eee;
			font-size:16px;
      line-height:1.3;
			position:relative;
			min-width: 690px;
		}
		a
		{
			color:#CD5;
		}
		a:focus
		{
			outline: none;
			-moz-outline: none;
		}
		pre
		{
			overflow: hidden;
		}
		li
		{
			list-style: inside;
		}
		#man,#man code,#man pre,#man tt,#man kbd,#man samp
		{
			line-height:1.6;
			color:#eee;
			background:#22252a;
		}

		#man
		{
			margin: 0;
			position: absolute;
			top:0;
			bottom:0;
			left: 225px;
			right: 0;
			overflow: auto;
		}
		#man-content
		{
			padding: 0 20px;
			max-width: 650px;
		}
		#man h1,#man h2,#man h3
		{
			color:#DCDDDE;
			clear:left;
		}

		#man h1
		{
			background:url("http://nodejs.org/logo.png") no-repeat scroll center 0 transparent;
			height:111px;
			margin:15px 0 20px;
			text-align:center;
			text-indent:-2000px;
		}

		#man h2
		{
			font-size:18px;
			background:#000;
			color:#CD5;
			margin:10px 0;
			padding:5px 10px;
		}

		#man h3
		{
			font-size:16px;
			margin:0 0 0 0ex;
		}

		#man p,#man ul,#man ol,#man dl,#man pre
		{
			margin:0 0 18px;
		}

		#man pre
		{
			color:#CCCDCE;
			background:#121314;
			border-left:2ex solid #222;
			margin:0 0 20px;
			padding:5px 7px;
		}

		#man pre + h2,#man pre + h3
		{
			margin-top:22px;
		}

		#man h2 + pre,#man h3 + pre
		{
			margin-top:5px;
		}

		#man > p,#man > ul,#man > ol,#man > dl,#man > pre
		{
			margin-left:5%;
		}

		#man dt
		{
			clear:left;
			margin:0;
		}

		#man dt.flush
		{
			float:left;
			width:8ex;
		}

		#man dd
		{
			margin:0 0 0 9ex;
		}

		#man code,#man strong,#man b
		{
			font-weight:bold;
			color:#ECEDEE;
		}

		#man pre code
		{
			font-weight:normal;
			color:#DCDDDE;
			background:inherit;
		}

		#man em,var,u
		{
			font-style:normal;
			color:#CCCDCE;
			border-bottom:1px solid #999;
		}

		#man ol.man,#man ol.man li
		{
			float:left;
			width:33%;
			list-style-type:none;
			text-transform:uppercase;
			font-size:18px;
			color:#666;
			letter-spacing:1px;
			margin:2px 0 10px;
			padding:0;
		}

		#man ol.man
		{
			width:100%;
		}

		#man ol.man li.tl
		{
			text-align:left;
		}

		#man ol.man li.tc
		{
			text-align:center;
			letter-spacing:4px;
		}

		#man ol.man li.tr
		{
			text-align:right;
		}

		#man ol.man a
		{
			color:#666;
		}

		#man ol.man a:hover
		{
			color:#CCCDCE;
		}

		#toc
		{
			position: absolute;
			top:0;
			bottom:0;
			left: 0;
			padding-left: 30px;
			width: 195px;
			overflow: auto;
			overflow-x: hidden;
			font-size: 15px;
		}
		#toc li
		{
			text-wrap: word-wrap;
		}
		#toc a
		{
			display: inline-block;
			width: 100%;
			color: #fff;
			text-decoration:none;
		}
		#toc > a:hover
		{
			color: rgba(255,255,255,0.7);
		}
		#toc > ul > li
		{
			border-bottom:1px solid #0f1214;
			padding:5px 0 5px 5px;
			list-style: none;
			line-height: 1.3;
		}
		#toc ul ul
		{
			display: none;
		}
		#toc ul ul > li
		{
			border-top:1px solid rgba(0, 0, 0, 0.1);
			color:#FFFFFF;
			font-size:85%;
			line-height:1.3;
			list-style:disc outside none;
			margin-left:25px;
			max-width:165px;
			padding:3px 0 5px 5px;
		}
		#toc li.active > a
		{
			color:#CD5;
		}

		.sh_sourceCode
		{
			font-family: monospace;
			overflow:hidden;
		}

		#toc .toggler
		{
			-moz-user-select:none;
			background:none repeat scroll 0 0 #000000;
			color:#FFFFFF;
			display:inline-block;
			font-weight:bold;
			height:31px;
			line-height:32px;
			margin:-5px 8px -18px -33px;
			outline:medium none;
			padding:0;
			text-align:center;
			width:25px;
		}
		.current-section
		{
			position: fixed;
			top: 0;
			margin: 0 !important;
		}
		#toctitle
		{
			background:none repeat scroll 0 0 #000000;
			color:#CCDD55;
			font-size:18px;
			margin: 0 0 10px -30px;
			padding: 10px;
		}
	</STYLE>
<LINK rel="stylesheet" href="./node(1) -- API_files/sh_vim-dark.css" type="text/css">
</HEAD><BODY>

<DIV id="toc">
	<DIV id="toctitle">Node v0.1.100</DIV>
	<NOSCRIPT></NOSCRIPT>
<UL><LI><A href="http://nodejs.org/api.html#name-0">NAME</A></LI><LI class="active"><A href="http://nodejs.org/api.html#synopsis-1">Synopsis</A></LI><LI><A href="http://nodejs.org/api.html#standard-modules-2">Standard Modules</A></LI><LI><A href="http://nodejs.org/api.html#buffers-3">Buffers</A></LI><UL><LI><A href="http://nodejs.org/api.html#new-buffer-4">new Buffer</A></LI><LI><A href="http://nodejs.org/api.html#new-buffer-5">new Buffer</A></LI><LI><A href="http://nodejs.org/api.html#new-buffer-6">new Buffer</A></LI><LI><A href="http://nodejs.org/api.html#buffer-write-7">buffer.write</A></LI><LI><A href="http://nodejs.org/api.html#buffer-tostring-8">buffer.toString</A></LI><LI><A href="http://nodejs.org/api.html#buffer[index]-9">buffer[index]</A></LI><LI><A href="http://nodejs.org/api.html#buffer-bytelength-10">Buffer.byteLength</A></LI><LI><A href="http://nodejs.org/api.html#buffer-length-11">buffer.length</A></LI><LI><A href="http://nodejs.org/api.html#buffer-copy-12">buffer.copy</A></LI><LI><A href="http://nodejs.org/api.html#buffer-slice-13">buffer.slice</A></LI></UL><LI><A href="http://nodejs.org/api.html#" class="toggler">+</A><A href="http://nodejs.org/api.html#eventemitter-14">EventEmitter</A><UL style="display: none; "><LI><A href="http://nodejs.org/api.html#event-newlistener-15">Event: 'newListener'</A></LI><LI><A href="http://nodejs.org/api.html#event-error-16">Event: 'error'</A></LI><LI><A href="http://nodejs.org/api.html#emitter-addlistener-17">emitter.addListener</A></LI><LI><A href="http://nodejs.org/api.html#emitter-removelistener-18">emitter.removeListener</A></LI><LI><A href="http://nodejs.org/api.html#emitter-removealllisteners-19">emitter.removeAllListeners</A></LI><LI><A href="http://nodejs.org/api.html#emitter-listeners-20">emitter.listeners</A></LI><LI><A href="http://nodejs.org/api.html#emitter-emit-21">emitter.emit</A></LI></UL></LI><LI><A href="http://nodejs.org/api.html#streams-22">Streams</A></LI><LI><A href="http://nodejs.org/api.html#readable-stream-23">Readable Stream</A></LI><UL><LI><A href="http://nodejs.org/api.html#event-data-24">Event: 'data'</A></LI><LI><A href="http://nodejs.org/api.html#event-end-25">Event: 'end'</A></LI><LI><A href="http://nodejs.org/api.html#event-error-26">Event: 'error'</A></LI><LI><A href="http://nodejs.org/api.html#event-close-27">Event: 'close'</A></LI><LI><A href="http://nodejs.org/api.html#event-fd-28">Event: 'fd'</A></LI><LI><A href="http://nodejs.org/api.html#stream-setencoding-29">stream.setEncoding</A></LI><LI><A href="http://nodejs.org/api.html#stream-pause-30">stream.pause</A></LI><LI><A href="http://nodejs.org/api.html#stream-resume-31">stream.resume</A></LI><LI><A href="http://nodejs.org/api.html#stream-destroy-32">stream.destroy</A></LI></UL><LI><A href="http://nodejs.org/api.html#" class="toggler">+</A><A href="http://nodejs.org/api.html#writable-stream-33">Writable Stream</A><UL style="display: none; "><LI><A href="http://nodejs.org/api.html#event-drain-34">Event: 'drain'</A></LI><LI><A href="http://nodejs.org/api.html#event-error-35">Event: 'error'</A></LI><LI><A href="http://nodejs.org/api.html#event-close-36">Event: 'close'</A></LI><LI><A href="http://nodejs.org/api.html#stream-write-37">stream.write</A></LI><LI><A href="http://nodejs.org/api.html#stream-write-38">stream.write</A></LI><LI><A href="http://nodejs.org/api.html#stream-end-39">stream.end</A></LI><LI><A href="http://nodejs.org/api.html#stream-end-40">stream.end</A></LI><LI><A href="http://nodejs.org/api.html#stream-end-41">stream.end</A></LI><LI><A href="http://nodejs.org/api.html#stream-destroy-42">stream.destroy</A></LI></UL></LI><LI><A href="http://nodejs.org/api.html#" class="toggler">+</A><A href="http://nodejs.org/api.html#global-objects-43">Global Objects</A><UL style="display: none; "><LI><A href="http://nodejs.org/api.html#global-44">global</A></LI><LI><A href="http://nodejs.org/api.html#process-45">process</A></LI><LI><A href="http://nodejs.org/api.html#require-46">require</A></LI><LI><A href="http://nodejs.org/api.html#require-paths-47">require.paths</A></LI><LI><A href="http://nodejs.org/api.html#__filename-48">__filename</A></LI><LI><A href="http://nodejs.org/api.html#__dirname-49">__dirname</A></LI><LI><A href="http://nodejs.org/api.html#module-50">module</A></LI></UL></LI><LI><A href="http://nodejs.org/api.html#" class="toggler">+</A><A href="http://nodejs.org/api.html#process-51">process</A><UL style="display: none; "><LI><A href="http://nodejs.org/api.html#event-exit-52">Event: 'exit'</A></LI><LI><A href="http://nodejs.org/api.html#event-uncaughtexception-53">Event: 'uncaughtException'</A></LI><LI><A href="http://nodejs.org/api.html#signal-events-54">Signal Events</A></LI><LI><A href="http://nodejs.org/api.html#process-stdout-55">process.stdout</A></LI><LI><A href="http://nodejs.org/api.html#process-openstdin-56">process.openStdin</A></LI><LI><A href="http://nodejs.org/api.html#process-argv-57">process.argv</A></LI><LI><A href="http://nodejs.org/api.html#process-execpath-58">process.execPath</A></LI><LI><A href="http://nodejs.org/api.html#process-chdir-59">process.chdir</A></LI><LI><A href="http://nodejs.org/api.html#process-compile-60">process.compile</A></LI><LI><A href="http://nodejs.org/api.html#process-cwd-61">process.cwd</A></LI><LI><A href="http://nodejs.org/api.html#process-env-62">process.env</A></LI><LI><A href="http://nodejs.org/api.html#process-exit-63">process.exit</A></LI><LI><A href="http://nodejs.org/api.html#process-getgid-64">process.getgid</A></LI><LI><A href="http://nodejs.org/api.html#process-getuid-65">process.getuid</A></LI><LI><A href="http://nodejs.org/api.html#process-version-66">process.version</A></LI><LI><A href="http://nodejs.org/api.html#process-installprefix-67">process.installPrefix</A></LI><LI><A href="http://nodejs.org/api.html#process-kill-68">process.kill</A></LI><LI><A href="http://nodejs.org/api.html#process-pid-69">process.pid</A></LI><LI><A href="http://nodejs.org/api.html#process-platform-70">process.platform</A></LI><LI><A href="http://nodejs.org/api.html#process-memoryusage-71">process.memoryUsage</A></LI><LI><A href="http://nodejs.org/api.html#process-nexttick-72">process.nextTick</A></LI><LI><A href="http://nodejs.org/api.html#process-umask-73">process.umask</A></LI></UL></LI><LI><A href="http://nodejs.org/api.html#" class="toggler">+</A><A href="http://nodejs.org/api.html#sys-74">sys</A><UL style="display: none; "><LI><A href="http://nodejs.org/api.html#sys-print-75">sys.print</A></LI><LI><A href="http://nodejs.org/api.html#sys-debug-76">sys.debug</A></LI><LI><A href="http://nodejs.org/api.html#sys-log-77">sys.log</A></LI><LI><A href="http://nodejs.org/api.html#sys-inspect-78">sys.inspect</A></LI><LI><A href="http://nodejs.org/api.html#sys-pump-79">sys.pump</A></LI></UL></LI><LI><A href="http://nodejs.org/api.html#" class="toggler">+</A><A href="http://nodejs.org/api.html#timers-80">Timers</A><UL style="display: none; "><LI><A href="http://nodejs.org/api.html#settimeout-81">setTimeout</A></LI><LI><A href="http://nodejs.org/api.html#cleartimeout-82">clearTimeout</A></LI><LI><A href="http://nodejs.org/api.html#setinterval-83">setInterval</A></LI><LI><A href="http://nodejs.org/api.html#clearinterval-84">clearInterval</A></LI></UL></LI><LI><A href="http://nodejs.org/api.html#" class="toggler">+</A><A href="http://nodejs.org/api.html#child-processes-85">Child Processes</A><UL style="display: none; "><LI><A href="http://nodejs.org/api.html#event-exit-86">Event:  'exit'</A></LI><LI><A href="http://nodejs.org/api.html#child_process-spawn-87">child_process.spawn</A></LI><LI><A href="http://nodejs.org/api.html#child-kill-88">child.kill</A></LI><LI><A href="http://nodejs.org/api.html#child-pid-89">child.pid</A></LI><LI><A href="http://nodejs.org/api.html#child-stdin-write-90">child.stdin.write</A></LI><LI><A href="http://nodejs.org/api.html#child-stdin-end-91">child.stdin.end</A></LI><LI><A href="http://nodejs.org/api.html#child_process-exec-92">child_process.exec</A></LI></UL></LI><LI><A href="http://nodejs.org/api.html#" class="toggler">+</A><A href="http://nodejs.org/api.html#script-93">Script</A><UL style="display: none; "><LI><A href="http://nodejs.org/api.html#script-runinthiscontext-94">Script.runInThisContext</A></LI><LI><A href="http://nodejs.org/api.html#script-runinnewcontext-95">Script.runInNewContext</A></LI><LI><A href="http://nodejs.org/api.html#new-script-96">new Script</A></LI><LI><A href="http://nodejs.org/api.html#script-runinthiscontext-97">script.runInThisContext</A></LI><LI><A href="http://nodejs.org/api.html#script-runinnewcontext-98">script.runInNewContext</A></LI></UL></LI><LI><A href="http://nodejs.org/api.html#" class="toggler">+</A><A href="http://nodejs.org/api.html#file-system-99">File System</A><UL style="display: none; "><LI><A href="http://nodejs.org/api.html#fs-rename-100">fs.rename</A></LI><LI><A href="http://nodejs.org/api.html#fs-renamesync-101">fs.renameSync</A></LI><LI><A href="http://nodejs.org/api.html#fs-truncate-102">fs.truncate</A></LI><LI><A href="http://nodejs.org/api.html#fs-truncatesync-103">fs.truncateSync</A></LI><LI><A href="http://nodejs.org/api.html#fs-chmod-104">fs.chmod</A></LI><LI><A href="http://nodejs.org/api.html#fs-chmodsync-105">fs.chmodSync</A></LI><LI><A href="http://nodejs.org/api.html#fs-stat-106">fs.stat</A></LI><LI><A href="http://nodejs.org/api.html#fs-statsync-107">fs.statSync</A></LI><LI><A href="http://nodejs.org/api.html#fs-link-108">fs.link</A></LI><LI><A href="http://nodejs.org/api.html#fs-linksync-109">fs.linkSync</A></LI><LI><A href="http://nodejs.org/api.html#fs-symlink-110">fs.symlink</A></LI><LI><A href="http://nodejs.org/api.html#fs-symlinksync-111">fs.symlinkSync</A></LI><LI><A href="http://nodejs.org/api.html#fs-readlink-112">fs.readlink</A></LI><LI><A href="http://nodejs.org/api.html#fs-readlinksync-113">fs.readlinkSync</A></LI><LI><A href="http://nodejs.org/api.html#fs-realpath-114">fs.realpath</A></LI><LI><A href="http://nodejs.org/api.html#fs-realpathsync-115">fs.realpathSync</A></LI><LI><A href="http://nodejs.org/api.html#fs-unlink-116">fs.unlink</A></LI><LI><A href="http://nodejs.org/api.html#fs-unlinksync-117">fs.unlinkSync</A></LI><LI><A href="http://nodejs.org/api.html#fs-rmdir-118">fs.rmdir</A></LI><LI><A href="http://nodejs.org/api.html#fs-rmdirsync-119">fs.rmdirSync</A></LI><LI><A href="http://nodejs.org/api.html#fs-mkdir-120">fs.mkdir</A></LI><LI><A href="http://nodejs.org/api.html#fs-mkdirsync-121">fs.mkdirSync</A></LI><LI><A href="http://nodejs.org/api.html#fs-readdir-122">fs.readdir</A></LI><LI><A href="http://nodejs.org/api.html#fs-readdirsync-123">fs.readdirSync</A></LI><LI><A href="http://nodejs.org/api.html#fs-close-124">fs.close</A></LI><LI><A href="http://nodejs.org/api.html#fs-closesync-125">fs.closeSync</A></LI><LI><A href="http://nodejs.org/api.html#fs-open-126">fs.open</A></LI><LI><A href="http://nodejs.org/api.html#fs-opensync-127">fs.openSync</A></LI><LI><A href="http://nodejs.org/api.html#fs-write-128">fs.write</A></LI><LI><A href="http://nodejs.org/api.html#fs-writesync-129">fs.writeSync</A></LI><LI><A href="http://nodejs.org/api.html#fs-read-130">fs.read</A></LI><LI><A href="http://nodejs.org/api.html#fs-readsync-131">fs.readSync</A></LI><LI><A href="http://nodejs.org/api.html#fs-readfile-132">fs.readFile</A></LI><LI><A href="http://nodejs.org/api.html#fs-readfilesync-133">fs.readFileSync</A></LI><LI><A href="http://nodejs.org/api.html#fs-writefile-134">fs.writeFile</A></LI><LI><A href="http://nodejs.org/api.html#fs-writefilesync-135">fs.writeFileSync</A></LI><LI><A href="http://nodejs.org/api.html#fs-watchfile-136">fs.watchFile</A></LI><LI><A href="http://nodejs.org/api.html#fs-unwatchfile-137">fs.unwatchFile</A></LI></UL></LI><LI><A href="http://nodejs.org/api.html#fs-stats-138">fs.Stats</A></LI><LI><A href="http://nodejs.org/api.html#fs-readstream-139">fs.ReadStream</A></LI><UL><LI><A href="http://nodejs.org/api.html#fs-createreadstream-140">fs.createReadStream</A></LI><LI><A href="http://nodejs.org/api.html#readstream-readable-141">readStream.readable</A></LI><LI><A href="http://nodejs.org/api.html#readstream-pause-142">readStream.pause</A></LI><LI><A href="http://nodejs.org/api.html#readstream-resume-143">readStream.resume</A></LI><LI><A href="http://nodejs.org/api.html#readstream-destroy-144">readStream.destroy</A></LI></UL><LI><A href="http://nodejs.org/api.html#" class="toggler">+</A><A href="http://nodejs.org/api.html#fs-writestream-145">fs.WriteStream</A><UL style="display: none; "><LI><A href="http://nodejs.org/api.html#fs-createwritestream-146">fs.createWriteStream</A></LI><LI><A href="http://nodejs.org/api.html#writestream-writeable-147">writeStream.writeable</A></LI><LI><A href="http://nodejs.org/api.html#writestream-write-148">writeStream.write</A></LI><LI><A href="http://nodejs.org/api.html#writestream-end-149">writeStream.end</A></LI><LI><A href="http://nodejs.org/api.html#writestream-destroy-150">writeStream.destroy</A></LI></UL></LI><LI><A href="http://nodejs.org/api.html#http-151">HTTP</A></LI><LI><A href="http://nodejs.org/api.html#http-server-152">http.Server</A></LI><UL><LI><A href="http://nodejs.org/api.html#event-request-153">Event: 'request'</A></LI><LI><A href="http://nodejs.org/api.html#event-connection-154">Event: 'connection'</A></LI><LI><A href="http://nodejs.org/api.html#event-close-155">Event: 'close'</A></LI><LI><A href="http://nodejs.org/api.html#http-createserver-156">http.createServer</A></LI><LI><A href="http://nodejs.org/api.html#event-request-157">Event: 'request'</A></LI><LI><A href="http://nodejs.org/api.html#event-upgrade-158">Event: 'upgrade'</A></LI><LI><A href="http://nodejs.org/api.html#event-clienterror-159">Event: 'clientError'</A></LI><LI><A href="http://nodejs.org/api.html#server-listen-160">server.listen</A></LI><LI><A href="http://nodejs.org/api.html#server-listen-161">server.listen</A></LI><LI><A href="http://nodejs.org/api.html#server-setsecure-162">server.setSecure</A></LI><LI><A href="http://nodejs.org/api.html#server-close-163">server.close</A></LI></UL><LI><A href="http://nodejs.org/api.html#" class="toggler">+</A><A href="http://nodejs.org/api.html#http-serverrequest-164">http.ServerRequest</A><UL style="display: none; "><LI><A href="http://nodejs.org/api.html#event-data-165">Event: 'data'</A></LI><LI><A href="http://nodejs.org/api.html#event-end-166">Event: 'end'</A></LI><LI><A href="http://nodejs.org/api.html#request-method-167">request.method</A></LI><LI><A href="http://nodejs.org/api.html#request-url-168">request.url</A></LI><LI><A href="http://nodejs.org/api.html#request-headers-169">request.headers</A></LI><LI><A href="http://nodejs.org/api.html#request-httpversion-170">request.httpVersion</A></LI><LI><A href="http://nodejs.org/api.html#request-setencoding-171">request.setEncoding</A></LI><LI><A href="http://nodejs.org/api.html#request-pause-172">request.pause</A></LI><LI><A href="http://nodejs.org/api.html#request-resume-173">request.resume</A></LI><LI><A href="http://nodejs.org/api.html#request-connection-174">request.connection</A></LI></UL></LI><LI><A href="http://nodejs.org/api.html#" class="toggler">+</A><A href="http://nodejs.org/api.html#http-serverresponse-175">http.ServerResponse</A><UL style="display: none; "><LI><A href="http://nodejs.org/api.html#response-writehead-176">response.writeHead</A></LI><LI><A href="http://nodejs.org/api.html#response-write-177">response.write</A></LI><LI><A href="http://nodejs.org/api.html#response-end-178">response.end</A></LI></UL></LI><LI><A href="http://nodejs.org/api.html#" class="toggler">+</A><A href="http://nodejs.org/api.html#http-client-179">http.Client</A><UL style="display: none; "><LI><A href="http://nodejs.org/api.html#event-upgrade-180">Event: 'upgrade'</A></LI><LI><A href="http://nodejs.org/api.html#http-createclient-181">http.createClient</A></LI><LI><A href="http://nodejs.org/api.html#client-request-182">client.request</A></LI><LI><A href="http://nodejs.org/api.html#client-verifypeer-183">client.verifyPeer</A></LI><LI><A href="http://nodejs.org/api.html#client-getpeercertificate-184">client.getPeerCertificate</A></LI></UL></LI><LI><A href="http://nodejs.org/api.html#" class="toggler">+</A><A href="http://nodejs.org/api.html#http-clientrequest-185">http.ClientRequest</A><UL style="display: none; "><LI><A href="http://nodejs.org/api.html#event-response-186">Event 'response'</A></LI><LI><A href="http://nodejs.org/api.html#request-write-187">request.write</A></LI><LI><A href="http://nodejs.org/api.html#request-end-188">request.end</A></LI></UL></LI><LI><A href="http://nodejs.org/api.html#" class="toggler">+</A><A href="http://nodejs.org/api.html#http-clientresponse-189">http.ClientResponse</A><UL style="display: none; "><LI><A href="http://nodejs.org/api.html#event-data-190">Event: 'data'</A></LI><LI><A href="http://nodejs.org/api.html#event-end-191">Event: 'end'</A></LI><LI><A href="http://nodejs.org/api.html#response-statuscode-192">response.statusCode</A></LI><LI><A href="http://nodejs.org/api.html#response-httpversion-193">response.httpVersion</A></LI><LI><A href="http://nodejs.org/api.html#response-headers-194">response.headers</A></LI><LI><A href="http://nodejs.org/api.html#response-setencoding-195">response.setEncoding</A></LI><LI><A href="http://nodejs.org/api.html#response-pause-196">response.pause</A></LI><LI><A href="http://nodejs.org/api.html#response-resume-197">response.resume</A></LI><LI><A href="http://nodejs.org/api.html#response-client-198">response.client</A></LI></UL></LI><LI><A href="http://nodejs.org/api.html#" class="toggler">+</A><A href="http://nodejs.org/api.html#net-server-199">net.Server</A><UL style="display: none; "><LI><A href="http://nodejs.org/api.html#event-connection-200">Event: 'connection'</A></LI><LI><A href="http://nodejs.org/api.html#event-close-201">Event: 'close'</A></LI><LI><A href="http://nodejs.org/api.html#net-createserver-202">net.createServer</A></LI><LI><A href="http://nodejs.org/api.html#server-listen-203">server.listen</A></LI><LI><A href="http://nodejs.org/api.html#server-listen-204">server.listen</A></LI><LI><A href="http://nodejs.org/api.html#server-listenfd-205">server.listenFD</A></LI><LI><A href="http://nodejs.org/api.html#server-close-206">server.close</A></LI></UL></LI><LI><A href="http://nodejs.org/api.html#" class="toggler">+</A><A href="http://nodejs.org/api.html#net-stream-207">net.Stream</A><UL style="display: none; "><LI><A href="http://nodejs.org/api.html#event-connect-208">Event: 'connect'</A></LI><LI><A href="http://nodejs.org/api.html#event-secure-209">Event: 'secure'</A></LI><LI><A href="http://nodejs.org/api.html#event-data-210">Event: 'data'</A></LI><LI><A href="http://nodejs.org/api.html#event-end-211">Event: 'end'</A></LI><LI><A href="http://nodejs.org/api.html#event-timeout-212">Event: 'timeout'</A></LI><LI><A href="http://nodejs.org/api.html#event-drain-213">Event: 'drain'</A></LI><LI><A href="http://nodejs.org/api.html#event-error-214">Event: 'error'</A></LI><LI><A href="http://nodejs.org/api.html#event-close-215">Event: 'close'</A></LI><LI><A href="http://nodejs.org/api.html#net-createconnection-216">net.createConnection</A></LI><LI><A href="http://nodejs.org/api.html#stream-connect-217">stream.connect</A></LI><LI><A href="http://nodejs.org/api.html#stream-remoteaddress-218">stream.remoteAddress</A></LI><LI><A href="http://nodejs.org/api.html#stream-readystate-219">stream.readyState</A></LI><LI><A href="http://nodejs.org/api.html#stream-setencoding-220">stream.setEncoding</A></LI><LI><A href="http://nodejs.org/api.html#stream-setsecure-221">stream.setSecure</A></LI><LI><A href="http://nodejs.org/api.html#stream-verifypeer-222">stream.verifyPeer</A></LI><LI><A href="http://nodejs.org/api.html#stream-getpeercertificate-223">stream.getPeerCertificate</A></LI><LI><A href="http://nodejs.org/api.html#stream-write-224">stream.write</A></LI><LI><A href="http://nodejs.org/api.html#stream-end-225">stream.end</A></LI><LI><A href="http://nodejs.org/api.html#stream-destroy-226">stream.destroy</A></LI><LI><A href="http://nodejs.org/api.html#stream-pause-227">stream.pause</A></LI><LI><A href="http://nodejs.org/api.html#stream-resume-228">stream.resume</A></LI><LI><A href="http://nodejs.org/api.html#stream-settimeout-229">stream.setTimeout</A></LI><LI><A href="http://nodejs.org/api.html#stream-setnodelay-230">stream.setNoDelay</A></LI><LI><A href="http://nodejs.org/api.html#stream-setkeepalive-231">stream.setKeepAlive</A></LI></UL></LI><LI><A href="http://nodejs.org/api.html#" class="toggler">+</A><A href="http://nodejs.org/api.html#crypto-232">Crypto</A><UL style="display: none; "><LI><A href="http://nodejs.org/api.html#crypto-createcredentials-233">crypto.createCredentials</A></LI><LI><A href="http://nodejs.org/api.html#crypto-createhash-234">crypto.createHash</A></LI><LI><A href="http://nodejs.org/api.html#hash-update-235">hash.update</A></LI><LI><A href="http://nodejs.org/api.html#hash-digest-236">hash.digest</A></LI><LI><A href="http://nodejs.org/api.html#crypto-createhmac-237">crypto.createHmac</A></LI><LI><A href="http://nodejs.org/api.html#hmac-update-238">hmac.update</A></LI><LI><A href="http://nodejs.org/api.html#hmac-digest-239">hmac.digest</A></LI><LI><A href="http://nodejs.org/api.html#crypto-createcipher-240">crypto.createCipher</A></LI><LI><A href="http://nodejs.org/api.html#cipher-update-241">cipher.update</A></LI><LI><A href="http://nodejs.org/api.html#cipher-final-242">cipher.final</A></LI><LI><A href="http://nodejs.org/api.html#crypto-createdecipher-243">crypto.createDecipher</A></LI><LI><A href="http://nodejs.org/api.html#decipher-update-244">decipher.update</A></LI><LI><A href="http://nodejs.org/api.html#decipher-final-245">decipher.final</A></LI><LI><A href="http://nodejs.org/api.html#crypto-createsign-246">crypto.createSign</A></LI><LI><A href="http://nodejs.org/api.html#signer-update-247">signer.update</A></LI><LI><A href="http://nodejs.org/api.html#signer-sign-248">signer.sign</A></LI><LI><A href="http://nodejs.org/api.html#crypto-createverify-249">crypto.createVerify</A></LI><LI><A href="http://nodejs.org/api.html#verifier-update-250">verifier.update</A></LI><LI><A href="http://nodejs.org/api.html#verifier-verify-251">verifier.verify</A></LI></UL></LI><LI><A href="http://nodejs.org/api.html#" class="toggler">+</A><A href="http://nodejs.org/api.html#dns-252">DNS</A><UL style="display: none; "><LI><A href="http://nodejs.org/api.html#dns-resolve-253">dns.resolve</A></LI><LI><A href="http://nodejs.org/api.html#dns-resolve4-254">dns.resolve4</A></LI><LI><A href="http://nodejs.org/api.html#dns-resolve6-255">dns.resolve6</A></LI><LI><A href="http://nodejs.org/api.html#dns-resolvemx-256">dns.resolveMx</A></LI><LI><A href="http://nodejs.org/api.html#dns-resolvetxt-257">dns.resolveTxt</A></LI><LI><A href="http://nodejs.org/api.html#dns-resolvesrv-258">dns.resolveSrv</A></LI><LI><A href="http://nodejs.org/api.html#dns-reverse-259">dns.reverse</A></LI></UL></LI><LI><A href="http://nodejs.org/api.html#" class="toggler">+</A><A href="http://nodejs.org/api.html#assert-260">Assert</A><UL style="display: none; "><LI><A href="http://nodejs.org/api.html#assert-fail-261">assert.fail</A></LI><LI><A href="http://nodejs.org/api.html#assert-ok-262">assert.ok</A></LI><LI><A href="http://nodejs.org/api.html#assert-equal-263">assert.equal</A></LI><LI><A href="http://nodejs.org/api.html#assert-notequal-264">assert.notEqual</A></LI><LI><A href="http://nodejs.org/api.html#assert-deepequal-265">assert.deepEqual</A></LI><LI><A href="http://nodejs.org/api.html#assert-notdeepequal-266">assert.notDeepEqual</A></LI><LI><A href="http://nodejs.org/api.html#assert-strictequal-267">assert.strictEqual</A></LI><LI><A href="http://nodejs.org/api.html#assert-notstrictequal-268">assert.notStrictEqual</A></LI><LI><A href="http://nodejs.org/api.html#assert-throws-269">assert.throws</A></LI><LI><A href="http://nodejs.org/api.html#assert-doesnotthrow-270">assert.doesNotThrow</A></LI><LI><A href="http://nodejs.org/api.html#assert-iferror-271">assert.ifError</A></LI></UL></LI><LI><A href="http://nodejs.org/api.html#" class="toggler">+</A><A href="http://nodejs.org/api.html#path-272">Path</A><UL style="display: none; "><LI><A href="http://nodejs.org/api.html#path-join-273">path.join</A></LI><LI><A href="http://nodejs.org/api.html#path-normalizearray-274">path.normalizeArray</A></LI><LI><A href="http://nodejs.org/api.html#path-normalize-275">path.normalize</A></LI><LI><A href="http://nodejs.org/api.html#path-dirname-276">path.dirname</A></LI><LI><A href="http://nodejs.org/api.html#path-basename-277">path.basename</A></LI><LI><A href="http://nodejs.org/api.html#path-extname-278">path.extname</A></LI><LI><A href="http://nodejs.org/api.html#path-exists-279">path.exists</A></LI></UL></LI><LI><A href="http://nodejs.org/api.html#" class="toggler">+</A><A href="http://nodejs.org/api.html#url-280">URL</A><UL style="display: none; "><LI><A href="http://nodejs.org/api.html#url-parse-281">url.parse</A></LI><LI><A href="http://nodejs.org/api.html#url-format-282">url.format</A></LI><LI><A href="http://nodejs.org/api.html#url-resolve-283">url.resolve</A></LI></UL></LI><LI><A href="http://nodejs.org/api.html#" class="toggler">+</A><A href="http://nodejs.org/api.html#query-string-284">Query String</A><UL style="display: none; "><LI><A href="http://nodejs.org/api.html#querystring-stringify-285">querystring.stringify</A></LI><LI><A href="http://nodejs.org/api.html#querystring-parse-286">querystring.parse</A></LI><LI><A href="http://nodejs.org/api.html#querystring-escape-287">querystring.escape</A></LI><LI><A href="http://nodejs.org/api.html#querystring-unescape-288">querystring.unescape</A></LI></UL></LI><LI><A href="http://nodejs.org/api.html#" class="toggler">+</A><A href="http://nodejs.org/api.html#repl-289">REPL</A><UL style="display: none; "><LI><A href="http://nodejs.org/api.html#repl-start-290">repl.start</A></LI><LI><A href="http://nodejs.org/api.html#repl-features-291">REPL Features</A></LI></UL></LI><LI><A href="http://nodejs.org/api.html#modules-292">Modules</A></LI><LI><A href="http://nodejs.org/api.html#addons-293">Addons</A></LI></UL></DIV>
<DIV id="man">
<DIV id="man-content">
<H1 class="man-title">node(1)</H1>

<OL class="head man">
  <LI class="tl">node(1)</LI>

  <LI class="tc">
  <LI class="tr">node(1)</LI>
</OL>
<H2 id="name-0">NAME</H2>
<P><CODE class="sh_sourceCode">node</CODE> -- evented I/O for V8 JavaScript</P>

<H2 id="synopsis-1">Краткий обзор</H2><H2 id="synopsis-1" style="width: 630px; " class="current-section">Краткий обзор</H2>

<P>Пример web сервера, написанного с помощью Node и отвечающего строкой 'Hello
World':</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> http <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'http'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

http<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">createServer</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>request<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> response<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  response<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">writeHead</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_number"><SPAN class="sh_number">200</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'Content-Type'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'text/plain'</SPAN></SPAN><SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
  response<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">end</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'Hello World</SPAN></SPAN><SPAN class="sh_specialchar"><SPAN class="sh_specialchar">\n</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">).</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">listen</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_number"><SPAN class="sh_number">8124</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'Server running at http://127.0.0.1:8124/'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<P>Чтобы запустить сервер, поместите код в файл с названием <CODE class="sh_sourceCode">example<SPAN class="sh_symbol">.</SPAN>js</CODE> и выполните его программой node</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_symbol"><SPAN class="sh_symbol">&gt;</SPAN></SPAN> node example<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>js
Server running at http<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN><SPAN class="sh_comment"><SPAN class="sh_comment">//127.0.0.1:8124/</SPAN></SPAN>
</CODE></PRE>

<P>Все примеры в этом руководстве можно запустить таким же образом.</P>

<H2 id="standard-modules-2">Стандартные модули</H2>

<P>Вместе с Node поставляется несколько стандартных вкомпилированных модулей,
большинство из которых задокументированы ниже. Стандартный способ использования этих модулей &mdash;
вызов   <CODE class="sh_sourceCode"><SPAN class="sh_function">require</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">'name'</SPAN><SPAN class="sh_symbol">)</SPAN></CODE> и сохранение возвращаемого объекта в локальной
переменной с именем, совпадающим с именем модуля.</P>

<P>Пример:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> sys <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'sys'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<P>Также возможно расширение node другими модулями. См. <CODE class="sh_sourceCode"><SPAN class="sh_string">'Modules'</SPAN></CODE></P>

<H2 id="buffers-3">Буферы</H2>

<P>Чистый JavaScript поддерживает Unicode, но в нём нет средств для работы с двоичными данными.
При работе с TCP или файловой системой часто необходимо работать именно с потоками двоичных данных.
В Node предусмотрено несколько средств управления, создания и приёма двоичных потоков.</P>

<P>Бинарные данные хранятся в экземплярах класса <CODE class="sh_sourceCode">Buffer</CODE>. <CODE class="sh_sourceCode">Buffer</CODE> похож на
массив целых чисел, но ему соответствует область памяти, выделенная вне стандартной
кучи V8. Размер <CODE class="sh_sourceCode">Buffer</CODE> нельзя менять.
Подключить класс можно с помощью <CODE class="sh_sourceCode"><SPAN class="sh_function">require</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">'buffer'</SPAN><SPAN class="sh_symbol">).</SPAN>Buffer</CODE>.</P>

<P>При преобразовании между Буферами и строками JavaScript требуется явно указывать
метод кодировки символов. Node поддерживает 3 кодировки для строк: UTF-8 (<CODE class="sh_sourceCode"><SPAN class="sh_string">'utf8'</SPAN></CODE>), ASCII (<CODE class="sh_sourceCode"><SPAN class="sh_string">'ascii'</SPAN></CODE>), и
двоичную (<CODE class="sh_sourceCode"><SPAN class="sh_string">'binary'</SPAN></CODE>).</P>

<UL>
<LI><P><CODE class="sh_sourceCode"><SPAN class="sh_string">'ascii'</SPAN></CODE> - только для 7-битных ASCII-строк.  Этот метод кодировки очень быстрый, и
будет очищать старший бит символа, если тот установлен.</P></LI>
<LI><P><CODE class="sh_sourceCode"><SPAN class="sh_string">'utf8'</SPAN></CODE> - Unicode-символы.  Многие веб-страницы и документы используют UTF-8.</P></LI>
<LI><P><CODE class="sh_sourceCode"><SPAN class="sh_string">'binary'</SPAN></CODE> - ранее использовавшийся способ. Хранит двоичные данные в строке
используя первые 8 бит каждого символа. Не используйте эту кодировку.</P></LI>
</UL>


<H3 id="new-buffer-4">new Buffer(size)</H3>

<P>Создаёт новый буфер размером <CODE class="sh_sourceCode">size</CODE> байт.</P>

<H3 id="new-buffer-5">new Buffer(array)</H3>

<P>Создаёт новый буфер, используя массив <CODE class="sh_sourceCode">array</CODE> байт.</P>

<H3 id="new-buffer-6">new Buffer(str, encoding = 'utf8')</H3>

<P>Создаёт новый буфер, содержащий строку <CODE class="sh_sourceCode">str</CODE> в кодировке <CODE class="sh_sourceCode">encoding</CODE>.</P>

<H3 id="buffer-write-7">buffer.write(string, offset=0, encoding='utf8')</H3>

<P>Записывает строку <CODE class="sh_sourceCode">string</CODE> в буфер начиная с позиции <CODE class="sh_sourceCode">offset</CODE> с использованием указанной кодировки. Возвращает
количество записанных байт. Если <CODE class="sh_sourceCode">buffer</CODE> не имеет достаточно места для сохранения
всей строки метод запишет только её часть. В случае если кодировка строки &mdash; <CODE class="sh_sourceCode"><SPAN class="sh_string">'utf8'</SPAN></CODE>, метод не будет записывать частичные символы.</P>

<P>Пример: записать utf8 строку в буфер, потом напечатать его</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">Buffer <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'buffer'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">).</SPAN></SPAN>Buffer<SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>
buf <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">new</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">Buffer</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_number"><SPAN class="sh_number">256</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
len <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> buf<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">write</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'</SPAN></SPAN><SPAN class="sh_specialchar"><SPAN class="sh_specialchar">\u</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">00bd + </SPAN></SPAN><SPAN class="sh_specialchar"><SPAN class="sh_specialchar">\u</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">00bc = </SPAN></SPAN><SPAN class="sh_specialchar"><SPAN class="sh_specialchar">\u</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">00be'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">0</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>len <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">" bytes: "</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> buf<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">toString</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'utf8'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">0</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> len<SPAN class="sh_symbol"><SPAN class="sh_symbol">));</SPAN></SPAN>

<SPAN class="sh_comment"><SPAN class="sh_comment">// 12 bytes: ½ + ¼ = ¾</SPAN></SPAN>
</CODE></PRE>

<H3 id="buffer-tostring-8">buffer.toString(encoding, start, end)</H3>

<P>Декодирует и возвращает строку из данных буфера, закодированных в кодировке <CODE class="sh_sourceCode">encoding</CODE>
начиная с <CODE class="sh_sourceCode">start</CODE> и заканчивая позицией <CODE class="sh_sourceCode">end</CODE>.</P>

<P>См. пример <CODE class="sh_sourceCode">buffer<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">write</SPAN><SPAN class="sh_symbol">()</SPAN></CODE> выше.</P>

<H3 id="buffer[index]-9">buffer[index]</H3>

<P>Получает или устанавливает байт на позиции <CODE class="sh_sourceCode">index</CODE>. Значения соответствуют индивидуальным байтам,
соответственно значения могут быть от <CODE class="sh_sourceCode"><SPAN class="sh_number">0x00</SPAN></CODE> до <CODE class="sh_sourceCode"><SPAN class="sh_number">0xFF</SPAN></CODE> в шестнадцатеричной системе и от <CODE class="sh_sourceCode"><SPAN class="sh_number">0</SPAN></CODE> до <CODE class="sh_sourceCode"><SPAN class="sh_number">255</SPAN></CODE> в десятичной.</P>

<P>Пример: скопировать ASCII строку в буфер, байт за байтом:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> Buffer <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'buffer'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">).</SPAN></SPAN>Buffer<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN>
  str <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">"node.js"</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN>
  buf <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">new</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">Buffer</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>str<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>length<SPAN class="sh_symbol"><SPAN class="sh_symbol">),</SPAN></SPAN>
  i<SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>

<SPAN class="sh_keyword"><SPAN class="sh_keyword">for</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>i <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">0</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN> i <SPAN class="sh_symbol"><SPAN class="sh_symbol">&lt;</SPAN></SPAN> str<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>length <SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN> i <SPAN class="sh_symbol"><SPAN class="sh_symbol">+=</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">1</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  buf<SPAN class="sh_symbol"><SPAN class="sh_symbol">[</SPAN></SPAN>i<SPAN class="sh_symbol"><SPAN class="sh_symbol">]</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> str<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">charCodeAt</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>i<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN>

console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>buf<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

<SPAN class="sh_comment"><SPAN class="sh_comment">// node.js</SPAN></SPAN>
</CODE></PRE>

<H3 id="buffer-bytelength-10">Buffer.byteLength(string, encoding)</H3>

<P>Возвращает количество байт в строке. Это не то же самое что
<CODE class="sh_sourceCode"><SPAN class="sh_predef_func">String</SPAN><SPAN class="sh_symbol">.</SPAN><SPAN class="sh_keyword">prototype</SPAN><SPAN class="sh_symbol">.</SPAN>length</CODE> т.к. этот метод возвращает число <EM>символов</EM> в
строке.</P>

<P>Пример:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> Buffer <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'buffer'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">).</SPAN></SPAN>Buffer<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN>
  str <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'</SPAN></SPAN><SPAN class="sh_specialchar"><SPAN class="sh_specialchar">\u</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">00bd + </SPAN></SPAN><SPAN class="sh_specialchar"><SPAN class="sh_specialchar">\u</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">00bc = </SPAN></SPAN><SPAN class="sh_specialchar"><SPAN class="sh_specialchar">\u</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">00be'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>

console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>str <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">": "</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> str<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>length <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">" characters, "</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN>
  Buffer<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">byteLength</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>str<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'utf8'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">" bytes"</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

<SPAN class="sh_comment"><SPAN class="sh_comment">// ½ + ¼ = ¾: 9 символов, 12 байт</SPAN></SPAN>
</CODE></PRE>

<H3 id="buffer-length-11">buffer.length</H3>

<P>Размер буфера в байтах. Заметьте, что это значение не всегда соответствует размеру
содержимого. <CODE class="sh_sourceCode">length</CODE> возвращает объем памяти, зарезервированный
для объекта буфера. Это значение не изменяется при изменении содержимого буфера.</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> Buffer <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'buffer'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">).</SPAN></SPAN>Buffer<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN>
  buf <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">new</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">Buffer</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_number"><SPAN class="sh_number">1234</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>buf<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>length<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
buf<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">write</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">"some string"</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">"ascii"</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">0</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>buf<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>length<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

<SPAN class="sh_comment"><SPAN class="sh_comment">// 1234</SPAN></SPAN>
<SPAN class="sh_comment"><SPAN class="sh_comment">// 1234</SPAN></SPAN>
</CODE></PRE>

<H3 id="buffer-copy-12">buffer.copy(targetBuffer, targetStart, sourceStart, sourceEnd)</H3>

<P>Копрует данные между буферами с помощью <CODE class="sh_sourceCode">memcpy()</CODE>.</P>

<P>Пример: создать два буфера, потом скопировать <CODE class="sh_sourceCode">buf1</CODE> с байта 16 по байт 19
в <CODE class="sh_sourceCode">buf2</CODE>, начиная с 8-го байта в <CODE class="sh_sourceCode">buf2</CODE>.</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> Buffer <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'buffer'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">).</SPAN></SPAN>Buffer<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN>
  buf1 <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">new</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">Buffer</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_number"><SPAN class="sh_number">26</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">),</SPAN></SPAN>
  buf2 <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">new</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">Buffer</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_number"><SPAN class="sh_number">26</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">),</SPAN></SPAN>
  i<SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>

<SPAN class="sh_keyword"><SPAN class="sh_keyword">for</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>i <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">0</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN> i <SPAN class="sh_symbol"><SPAN class="sh_symbol">&lt;</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">26</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN> i <SPAN class="sh_symbol"><SPAN class="sh_symbol">+=</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">1</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  buf1<SPAN class="sh_symbol"><SPAN class="sh_symbol">[</SPAN></SPAN>i<SPAN class="sh_symbol"><SPAN class="sh_symbol">]</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> i <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">97</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN> <SPAN class="sh_comment"><SPAN class="sh_comment">// 97 is ASCII a</SPAN></SPAN>
  buf2<SPAN class="sh_symbol"><SPAN class="sh_symbol">[</SPAN></SPAN>i<SPAN class="sh_symbol"><SPAN class="sh_symbol">]</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">33</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN> <SPAN class="sh_comment"><SPAN class="sh_comment">// ASCII !</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN>

buf1<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">copy</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>buf2<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">8</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">16</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">20</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>buf2<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">toString</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'ascii'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">0</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">25</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">));</SPAN></SPAN>

<SPAN class="sh_comment"><SPAN class="sh_comment">// !!!!!!!!qrst!!!!!!!!!!!!!</SPAN></SPAN>
</CODE></PRE>

<H3 id="buffer-slice-13">buffer.slice(start, end)</H3>

<P>Возвращает новый буфер, указывающий на ту же область памяти
что предыдущий, но начиная с <CODE class="sh_sourceCode">start</CODE> и заканчивая <CODE class="sh_sourceCode">end</CODE>
байтами.</P>

<P><STRONG>Изменение содержимого нового буфера затронет содержимое старого!</STRONG></P>

<P>Пример: построить буфер с ASCII-алфавитом, вырезать часть в новый буфер,
затем изменить 1 часть в оригинальном буфере.</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> Buffer <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'buffer'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">).</SPAN></SPAN>Buffer<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN>
  buf1 <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">new</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">Buffer</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_number"><SPAN class="sh_number">26</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">),</SPAN></SPAN> buf2<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN>
  i<SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>

<SPAN class="sh_keyword"><SPAN class="sh_keyword">for</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>i <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">0</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN> i <SPAN class="sh_symbol"><SPAN class="sh_symbol">&lt;</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">26</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN> i <SPAN class="sh_symbol"><SPAN class="sh_symbol">+=</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">1</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  buf1<SPAN class="sh_symbol"><SPAN class="sh_symbol">[</SPAN></SPAN>i<SPAN class="sh_symbol"><SPAN class="sh_symbol">]</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> i <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">97</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN> <SPAN class="sh_comment"><SPAN class="sh_comment">// 97 is ASCII a</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN>

buf2 <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> buf1<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">slice</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_number"><SPAN class="sh_number">0</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">3</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>buf2<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">toString</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'ascii'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">0</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> buf2<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>length<SPAN class="sh_symbol"><SPAN class="sh_symbol">));</SPAN></SPAN>
buf1<SPAN class="sh_symbol"><SPAN class="sh_symbol">[</SPAN></SPAN><SPAN class="sh_number"><SPAN class="sh_number">0</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">]</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">33</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>
console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>buf2<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">toString</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'ascii'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">0</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> buf2<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>length<SPAN class="sh_symbol"><SPAN class="sh_symbol">));</SPAN></SPAN>

<SPAN class="sh_comment"><SPAN class="sh_comment">// abc</SPAN></SPAN>
<SPAN class="sh_comment"><SPAN class="sh_comment">// !bc</SPAN></SPAN>
</CODE></PRE>

<H2 id="eventemitter-14">EventEmitter</H2>

<P>Many objects in Node emit events: a TCP server emits an event each time
there is a stream, a child process emits an event when it exits. All
objects which emit events are instances of <CODE class="sh_sourceCode">events<SPAN class="sh_symbol">.</SPAN>EventEmitter</CODE>.</P>

<P>Events are represented by a camel-cased string. Here are some examples:
<CODE class="sh_sourceCode"><SPAN class="sh_string">'stream'</SPAN></CODE>, <CODE class="sh_sourceCode"><SPAN class="sh_string">'data'</SPAN></CODE>, <CODE class="sh_sourceCode"><SPAN class="sh_string">'messageBegin'</SPAN></CODE>.</P>

<P>Functions can be then be attached to objects, to be executed when an event
is emitted. These functions are called <EM>listeners</EM>.</P>

<P><CODE class="sh_sourceCode"><SPAN class="sh_function">require</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">'events'</SPAN><SPAN class="sh_symbol">).</SPAN>EventEmitter</CODE> to access the <CODE class="sh_sourceCode">EventEmitter</CODE> class.</P>

<P>All EventEmitters emit the event <CODE class="sh_sourceCode"><SPAN class="sh_string">'newListener'</SPAN></CODE> when new listeners are
added.</P>

<P>When an EventEmitter experiences an error, the typical action is to emit an
<CODE class="sh_sourceCode"><SPAN class="sh_string">'error'</SPAN></CODE> event.  Error events are special--if there is no handler for them
they will print a stack trace and exit the program.</P>

<H3 id="event-newlistener-15">Event: 'newListener'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">(</SPAN>event<SPAN class="sh_symbol">,</SPAN> listener<SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{</SPAN> <SPAN class="sh_cbracket">}</SPAN></CODE></P>

<P>This event is made any time someone adds a new listener.</P>

<H3 id="event-error-16">Event: 'error'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">(</SPAN>exception<SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{</SPAN> <SPAN class="sh_cbracket">}</SPAN></CODE></P>

<P>If an error was encountered, then this event is emitted. This event is
special - when there are no listeners to receive the error Node will
terminate execution and display the exception's stack trace.</P>

<H3 id="emitter-addlistener-17">emitter.addListener(event, listener)</H3>

<P>Adds a listener to the end of the listeners array for the specified event.</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">server<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">addListener</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'stream'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>stream<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'someone connected!'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<H3 id="emitter-removelistener-18">emitter.removeListener(event, listener)</H3>

<P>Remove a listener from the listener array for the specified event.
<STRONG>Caution</STRONG>: changes array indices in the listener array behind the listener.</P>

<H3 id="emitter-removealllisteners-19">emitter.removeAllListeners(event)</H3>

<P>Removes all listeners from the listener array for the specified event.</P>

<H3 id="emitter-listeners-20">emitter.listeners(event)</H3>

<P>Returns an array of listeners for the specified event. This array can be
manipulated, e.g. to remove listeners.</P>

<H3 id="emitter-emit-21">emitter.emit(event, arg1, arg2, ...)</H3>

<P>Execute each of the listeners in order with the supplied arguments.</P>

<H2 id="streams-22">Streams</H2>

<P>A stream is an abstract interface implemented by various objects in Node.
For example a request to an HTTP server is a stream, as is stdout. Streams
are readable, writable, or both. All streams are instances of <CODE class="sh_sourceCode">EventEmitter</CODE>.</P>

<H2 id="readable-stream-23">Readable Stream</H2>

<P>A <STRONG>readable stream</STRONG> has the following methods, members, and events.</P>

<H3 id="event-data-24">Event: 'data'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">(</SPAN>data<SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{</SPAN> <SPAN class="sh_cbracket">}</SPAN></CODE></P>

<P>The <CODE class="sh_sourceCode"><SPAN class="sh_string">'data'</SPAN></CODE> event emits either a <CODE class="sh_sourceCode">Buffer</CODE> (by default) or a string if
<CODE class="sh_sourceCode"><SPAN class="sh_function">setEncoding</SPAN><SPAN class="sh_symbol">()</SPAN></CODE> was used.</P>

<H3 id="event-end-25">Event: 'end'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">()</SPAN> <SPAN class="sh_cbracket">{</SPAN> <SPAN class="sh_cbracket">}</SPAN></CODE></P>

<P>Emitted when the stream has received an EOF (FIN in TCP terminology).
Indicates that no more <CODE class="sh_sourceCode"><SPAN class="sh_string">'data'</SPAN></CODE> events will happen. If the stream is also
writable, it may be possible to continue writing.</P>

<H3 id="event-error-26">Event: 'error'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">(</SPAN>exception<SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{</SPAN> <SPAN class="sh_cbracket">}</SPAN></CODE></P>

<P>Emitted if there was an error receiving data.</P>

<H3 id="event-close-27">Event: 'close'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">()</SPAN> <SPAN class="sh_cbracket">{</SPAN> <SPAN class="sh_cbracket">}</SPAN></CODE></P>

<P>Emitted when the underlying file descriptor has be closed. Not all streams
will emit this.  (For example, an incoming HTTP request will not emit
<CODE class="sh_sourceCode"><SPAN class="sh_string">'close'</SPAN></CODE>.)</P>

<H3 id="event-fd-28">Event: 'fd'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">(</SPAN>fd<SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{</SPAN> <SPAN class="sh_cbracket">}</SPAN></CODE></P>

<P>Emitted when a file descriptor is received on the stream. Only UNIX streams
support this functionality; all others will simply never emit this event.</P>

<H3 id="stream-setencoding-29">stream.setEncoding(encoding)</H3>

<P>Makes the data event emit a string instead of a <CODE class="sh_sourceCode">Buffer</CODE>. <CODE class="sh_sourceCode">encoding</CODE> can be
<CODE class="sh_sourceCode"><SPAN class="sh_string">'utf8'</SPAN></CODE>, <CODE class="sh_sourceCode"><SPAN class="sh_string">'ascii'</SPAN></CODE>, or <CODE class="sh_sourceCode"><SPAN class="sh_string">'binary'</SPAN></CODE>.</P>

<H3 id="stream-pause-30">stream.pause()</H3>

<P>Pauses the incoming <CODE class="sh_sourceCode"><SPAN class="sh_string">'data'</SPAN></CODE> events.</P>

<H3 id="stream-resume-31">stream.resume()</H3>

<P>Resumes the incoming <CODE class="sh_sourceCode"><SPAN class="sh_string">'data'</SPAN></CODE> events after a <CODE class="sh_sourceCode"><SPAN class="sh_function">pause</SPAN><SPAN class="sh_symbol">()</SPAN></CODE>.</P>

<H3 id="stream-destroy-32">stream.destroy()</H3>

<P>Closes the underlying file descriptor. Stream will not emit any more events.</P>

<H2 id="writable-stream-33">Writable Stream</H2>

<P>A <STRONG>writable stream</STRONG> has the following methods, members, and events.</P>

<H3 id="event-drain-34">Event: 'drain'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">()</SPAN> <SPAN class="sh_cbracket">{</SPAN> <SPAN class="sh_cbracket">}</SPAN></CODE></P>

<P>Emitted after a <CODE class="sh_sourceCode"><SPAN class="sh_function">write</SPAN><SPAN class="sh_symbol">()</SPAN></CODE> method was called that returned <CODE class="sh_sourceCode"><SPAN class="sh_keyword">false</SPAN></CODE> to
indicate that it is safe to write again.</P>

<H3 id="event-error-35">Event: 'error'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">(</SPAN>exception<SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{</SPAN> <SPAN class="sh_cbracket">}</SPAN></CODE></P>

<P>Emitted on error with the exception <CODE class="sh_sourceCode">exception</CODE>.</P>

<H3 id="event-close-36">Event: 'close'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">()</SPAN> <SPAN class="sh_cbracket">{</SPAN> <SPAN class="sh_cbracket">}</SPAN></CODE></P>

<P>Emitted when the underlying file descriptor has been closed.</P>

<H3 id="stream-write-37">stream.write(string, encoding, [fd])</H3>

<P>Writes <CODE class="sh_sourceCode">string</CODE> with the given <CODE class="sh_sourceCode">encoding</CODE> to the stream.  Returns <CODE class="sh_sourceCode"><SPAN class="sh_keyword">true</SPAN></CODE> if
the string has been flushed to the kernel buffer.  Returns <CODE class="sh_sourceCode"><SPAN class="sh_keyword">false</SPAN></CODE> to
indicate that the kernel buffer is full, and the data will be sent out in
the future. The <CODE class="sh_sourceCode"><SPAN class="sh_string">'drain'</SPAN></CODE> event will indicate when the kernel buffer is
empty again. The <CODE class="sh_sourceCode">encoding</CODE> defaults to <CODE class="sh_sourceCode"><SPAN class="sh_string">'utf8'</SPAN></CODE>.</P>

<P>If the optional <CODE class="sh_sourceCode">fd</CODE> parameter is specified, it is interpreted as an integral
file descriptor to be sent over the stream. This is only supported for UNIX
streams, and is silently ignored otherwise. When writing a file descriptor in
this manner, closing the descriptor before the stream drains risks sending an
invalid (closed) FD.</P>

<H3 id="stream-write-38">stream.write(buffer)</H3>

<P>Same as the above except with a raw buffer.</P>

<H3 id="stream-end-39">stream.end()</H3>

<P>Terminates the stream with EOF or FIN.</P>

<H3 id="stream-end-40">stream.end(string, encoding)</H3>

<P>Sends <CODE class="sh_sourceCode">string</CODE> with the given <CODE class="sh_sourceCode">encoding</CODE> and terminates the stream with EOF
or FIN. This is useful to reduce the number of packets sent.</P>

<H3 id="stream-end-41">stream.end(buffer)</H3>

<P>Same as above but with a <CODE class="sh_sourceCode">buffer</CODE>.</P>

<H3 id="stream-destroy-42">stream.destroy()</H3>

<P>Closes the underlying file descriptor. Stream will not emit any more events.</P>

<H2 id="global-objects-43">Global Objects</H2>

<P>These object are available in the global scope and can be accessed from anywhere.</P>

<H3 id="global-44">global</H3>

<P>The global namespace object.</P>

<H3 id="process-45">process</H3>

<P>The process object. Most stuff lives in here. See the <CODE class="sh_sourceCode"><SPAN class="sh_string">'process object'</SPAN></CODE>
section.</P>

<H3 id="require-46">require()</H3>

<P>To require modules. See the <CODE class="sh_sourceCode"><SPAN class="sh_string">'Modules'</SPAN></CODE> section.</P>

<H3 id="require-paths-47">require.paths</H3>

<P>An array of search paths for <CODE class="sh_sourceCode"><SPAN class="sh_function">require</SPAN><SPAN class="sh_symbol">()</SPAN></CODE>.  This array can be modified to add custom paths.</P>

<P>Example: add a new path to the beginning of the search list</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">require<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>paths<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">unshift</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'/usr/local/node'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>require<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>paths<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_comment"><SPAN class="sh_comment">// /usr/local/node,/Users/mjr/.node_libraries</SPAN></SPAN>
</CODE></PRE>

<H3 id="__filename-48">__filename</H3>

<P>The filename of the script being executed.  This is the absolute path, and not necessarily
the same filename passed in as a command line argument.</P>

<H3 id="__dirname-49">__dirname</H3>

<P>The dirname of the script being executed.</P>

<P>Example: running <CODE class="sh_sourceCode">node example<SPAN class="sh_symbol">.</SPAN>js</CODE> from <CODE class="sh_sourceCode"><SPAN class="sh_regexp">/Users/m</SPAN>jr</CODE></P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>__filename<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>__dirname<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_comment"><SPAN class="sh_comment">// /Users/mjr/example.js</SPAN></SPAN>
<SPAN class="sh_comment"><SPAN class="sh_comment">// /Users/mjr</SPAN></SPAN>
</CODE></PRE>

<H3 id="module-50">module</H3>

<P>A reference to the current module (of type <CODE class="sh_sourceCode">process<SPAN class="sh_symbol">.</SPAN>Module</CODE>). In particular
<CODE class="sh_sourceCode">module<SPAN class="sh_symbol">.</SPAN>exports</CODE> is the same as the <CODE class="sh_sourceCode">exports</CODE> object. See <CODE class="sh_sourceCode"><SPAN class="sh_normal">src</SPAN><SPAN class="sh_symbol">/</SPAN>process<SPAN class="sh_symbol">.</SPAN>js</CODE>
for more information.</P>

<H2 id="process-51">process</H2>

<P>The <CODE class="sh_sourceCode">process</CODE> object is a global object and can be accessed from anywhere.
It is an instance of <CODE class="sh_sourceCode">EventEmitter</CODE>.</P>

<H3 id="event-exit-52">Event: 'exit'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">()</SPAN> <SPAN class="sh_cbracket">{}</SPAN></CODE></P>

<P>Emitted when the process is about to exit.  This is a good hook to perform
constant time checks of the module's state (like for unit tests).  The main
event loop will no longer be run after the 'exit' callback finishes, so
timers may not be scheduled.</P>

<P>Example of listening for <CODE class="sh_sourceCode">exit</CODE>:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">addListener</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'exit'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">()</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">nextTick</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">()</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
   console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'This will not run'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
  <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
  console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'About to exit.'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<H3 id="event-uncaughtexception-53">Event: 'uncaughtException'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">(</SPAN>err<SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{</SPAN> <SPAN class="sh_cbracket">}</SPAN></CODE></P>

<P>Emitted when an exception bubbles all the way back to the event loop. If a
listener is added for this exception, the default action (which is to print
a stack trace and exit) will not occur.</P>

<P>Example of listening for <CODE class="sh_sourceCode">uncaughtException</CODE>:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">addListener</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'uncaughtException'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>err<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'Caught exception: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> err<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

<SPAN class="sh_function"><SPAN class="sh_function">setTimeout</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">()</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'This will still run.'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">500</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

<SPAN class="sh_comment"><SPAN class="sh_comment">// Intentionally cause an exception, but don't catch it.</SPAN></SPAN>
<SPAN class="sh_function"><SPAN class="sh_function">nonexistentFunc</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">();</SPAN></SPAN>
console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'This will not run.'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<P>Note that <CODE class="sh_sourceCode">uncaughtException</CODE> is a very crude mechanism for exception
handling.  Using try / catch in your program will give you more control over
your program's flow.  Especially for server programs that are designed to
stay running forever, <CODE class="sh_sourceCode">uncaughtException</CODE> can be a useful safety mechanism.</P>

<H3 id="signal-events-54">Signal Events</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">()</SPAN> <SPAN class="sh_cbracket">{}</SPAN></CODE></P>

<P>Emitted when the processes receives a signal. See sigaction(2) for a list of
standard POSIX signal names such as SIGINT, SIGUSR1, etc.</P>

<P>Example of listening for <CODE class="sh_sourceCode">SIGINT</CODE>:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> stdin <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">openStdin</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">();</SPAN></SPAN>

process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">addListener</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'SIGINT'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">()</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'Got SIGINT.  Press Control-D to exit.'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<P>An easy way to send the <CODE class="sh_sourceCode">SIGINT</CODE> signal is with <CODE class="sh_sourceCode">Control<SPAN class="sh_symbol">-</SPAN>C</CODE> in most terminal
programs.</P>

<H3 id="process-stdout-55">process.stdout</H3>

<P>A writable stream to <CODE class="sh_sourceCode">stdout</CODE>.</P>

<P>Example: the definition of <CODE class="sh_sourceCode">console<SPAN class="sh_symbol">.</SPAN>log</CODE></P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>log <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>d<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>stdout<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">write</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>d <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'</SPAN></SPAN><SPAN class="sh_specialchar"><SPAN class="sh_specialchar">\n</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>
</CODE></PRE>

<H3 id="process-openstdin-56">process.openStdin()</H3>

<P>Opens the standard input stream, returns a readable stream.</P>

<P>Example of opening standard input and listening for both events:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> stdin <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">openStdin</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">();</SPAN></SPAN>

stdin<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">setEncoding</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'utf8'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

stdin<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">addListener</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'data'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>chunk<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>stdout<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">write</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'data: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> chunk<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

stdin<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">addListener</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'end'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">()</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>stdout<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">write</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'end'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<H3 id="process-argv-57">process.argv</H3>

<P>An array containing the command line arguments.  The first element will be
'node', the second element will be the name of the JavaScript file.  The
next elements will be any additional command line arguments.</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_comment"><SPAN class="sh_comment">// print process.argv</SPAN></SPAN>
process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>argv<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">forEach</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>val<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> index<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> array<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>index <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">': '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> val<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<P>This will generate:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">$ node process<SPAN class="sh_number"><SPAN class="sh_number">-2</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>js one two<SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN>three four
<SPAN class="sh_number"><SPAN class="sh_number">0</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> node
<SPAN class="sh_number"><SPAN class="sh_number">1</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_regexp"><SPAN class="sh_regexp">/Users/m</SPAN></SPAN><SPAN class="sh_normal"><SPAN class="sh_normal">jr</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">/</SPAN></SPAN><SPAN class="sh_normal"><SPAN class="sh_normal">work</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">/</SPAN></SPAN><SPAN class="sh_normal"><SPAN class="sh_normal">node</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">/</SPAN></SPAN>process<SPAN class="sh_number"><SPAN class="sh_number">-2</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>js
<SPAN class="sh_number"><SPAN class="sh_number">2</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> one
<SPAN class="sh_number"><SPAN class="sh_number">3</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> two<SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN>three
<SPAN class="sh_number"><SPAN class="sh_number">4</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> four
</CODE></PRE>

<H3 id="process-execpath-58">process.execPath</H3>

<P>This is the absolute pathname of the executable that started the process.</P>

<H3 id="process-chdir-59">process.chdir(directory)</H3>

<P>Changes the current working directory of the process or throws an exception if that fails.</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'Starting directory: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">cwd</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">());</SPAN></SPAN>
<SPAN class="sh_keyword"><SPAN class="sh_keyword">try</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">chdir</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'/tmp'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
  console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'New directory: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">cwd</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">());</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN>
<SPAN class="sh_keyword"><SPAN class="sh_keyword">catch</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>err<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'chdir: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> err<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN>
</CODE></PRE>

<H3 id="process-compile-60">process.compile(code, filename)</H3>

<P>Similar to <CODE class="sh_sourceCode"><SPAN class="sh_predef_func">eval</SPAN></CODE> except that you can specify a <CODE class="sh_sourceCode">filename</CODE> for better
error reporting and the <CODE class="sh_sourceCode">code</CODE> cannot see the local scope.  The value of <CODE class="sh_sourceCode">filename</CODE>
will be used as a filename if a stack trace is generated by the compiled code.</P>

<P>Example of using <CODE class="sh_sourceCode">process<SPAN class="sh_symbol">.</SPAN>compile</CODE> and <CODE class="sh_sourceCode"><SPAN class="sh_predef_func">eval</SPAN></CODE> to run the same code:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> localVar <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">123</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN>
    compiled<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> evaled<SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>

compiled <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">compile</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'localVar = 1;'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'myfile.js'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'localVar: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> localVar <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">', compiled: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> compiled<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
evaled <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_predef_func"><SPAN class="sh_predef_func">eval</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'localVar = 1;'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'localVar: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> localVar <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">', evaled: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> evaled<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

<SPAN class="sh_comment"><SPAN class="sh_comment">// localVar: 123, compiled: 1</SPAN></SPAN>
<SPAN class="sh_comment"><SPAN class="sh_comment">// localVar: 1, evaled: 1</SPAN></SPAN>
</CODE></PRE>

<P><CODE class="sh_sourceCode">process<SPAN class="sh_symbol">.</SPAN>compile</CODE> does not have access to the local scope, so <CODE class="sh_sourceCode">localVar</CODE> is unchanged.
<CODE class="sh_sourceCode"><SPAN class="sh_predef_func">eval</SPAN></CODE> does have access to the local scope, so <CODE class="sh_sourceCode">localVar</CODE> is changed.</P>

<P>In case of syntax error in <CODE class="sh_sourceCode">code</CODE>, <CODE class="sh_sourceCode">process<SPAN class="sh_symbol">.</SPAN>compile</CODE> exits node.</P>

<P>See also: <CODE class="sh_sourceCode">Script</CODE></P>

<H3 id="process-cwd-61">process.cwd()</H3>

<P>Returns the current working directory of the process.</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'Current directory: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">cwd</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">());</SPAN></SPAN>
</CODE></PRE>

<H3 id="process-env-62">process.env</H3>

<P>An object containing the user environment. See environ(7).</P>

<H3 id="process-exit-63">process.exit(code)</H3>

<P>Ends the process with the specified <CODE class="sh_sourceCode">code</CODE>.  If omitted, exit uses the
'success' code <CODE class="sh_sourceCode"><SPAN class="sh_number">0</SPAN></CODE>.</P>

<P>To exit with a 'failure' code:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">exit</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_number"><SPAN class="sh_number">1</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<P>The shell that executed node should see the exit code as 1.</P>

<H3 id="process-getgid-64">process.getgid(), process.setgid(id)</H3>

<P>Gets/sets the group identity of the process. (See setgid(2).)  This is the numerical group id, not the group name.</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'Current gid: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">getgid</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">());</SPAN></SPAN>
<SPAN class="sh_keyword"><SPAN class="sh_keyword">try</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">setgid</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_number"><SPAN class="sh_number">501</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
  console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'New gid: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">getgid</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">());</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN>
<SPAN class="sh_keyword"><SPAN class="sh_keyword">catch</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>err<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'Failed to set gid: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> err<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN>
</CODE></PRE>

<H3 id="process-getuid-65">process.getuid(), process.setuid(id)</H3>

<P>Gets/sets the user identity of the process. (See setuid(2).)  This is the numerical userid, not the username.</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'Current uid: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">getuid</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">());</SPAN></SPAN>
<SPAN class="sh_keyword"><SPAN class="sh_keyword">try</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">setuid</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_number"><SPAN class="sh_number">501</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
  console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'New uid: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">getuid</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">());</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN>
<SPAN class="sh_keyword"><SPAN class="sh_keyword">catch</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>err<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'Failed to set uid: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> err<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN>
</CODE></PRE>

<H3 id="process-version-66">process.version</H3>

<P>A compiled-in property that exposes <CODE class="sh_sourceCode">NODE_VERSION</CODE>.</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'Version: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>version<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<H3 id="process-installprefix-67">process.installPrefix</H3>

<P>A compiled-in property that exposes <CODE class="sh_sourceCode">NODE_PREFIX</CODE>.</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'Prefix: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>installPrefix<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<H3 id="process-kill-68">process.kill(pid, signal)</H3>

<P>Send a signal to a process. <CODE class="sh_sourceCode">pid</CODE> is the process id and <CODE class="sh_sourceCode">signal</CODE> is the
string describing the signal to send.  Signal names are strings like
'SIGINT' or 'SIGUSR1'.  If omitted, the signal will be 'SIGINT'.
See kill(2) for more information.</P>

<P>Note that just because the name of this function is <CODE class="sh_sourceCode">process<SPAN class="sh_symbol">.</SPAN>kill</CODE>, it is
really just a signal sender, like the <CODE class="sh_sourceCode">kill</CODE> system call.  The signal sent
may do something other than kill the target process.</P>

<P>Example of sending a signal to yourself:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">addListener</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'SIGHUP'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">()</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'Got SIGHUP signal.'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

<SPAN class="sh_function"><SPAN class="sh_function">setTimeout</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">()</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'Exiting.'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
  process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">exit</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_number"><SPAN class="sh_number">0</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">100</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">kill</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>pid<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'SIGHUP'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<H3 id="process-pid-69">process.pid</H3>

<P>The PID of the process.</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'This process is pid '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>pid<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<H3 id="process-platform-70">process.platform</H3>

<P>What platform you're running on. <CODE class="sh_sourceCode"><SPAN class="sh_string">'linux2'</SPAN></CODE>, <CODE class="sh_sourceCode"><SPAN class="sh_string">'darwin'</SPAN></CODE>, etc.</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'This platform is '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>platform<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<H3 id="process-memoryusage-71">process.memoryUsage()</H3>

<P>Returns an object describing the memory usage of the Node process.</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> sys <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'sys'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>sys<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">inspect</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">memoryUsage</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">()));</SPAN></SPAN>
</CODE></PRE>

<P>This will generate:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN> rss<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">4935680</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> vsize<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">41893888</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> heapTotal<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">1826816</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> heapUsed<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">650472</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN>
</CODE></PRE>

<P><CODE class="sh_sourceCode">heapTotal</CODE> and <CODE class="sh_sourceCode">heapUsed</CODE> refer to V8's memory usage.</P>

<H3 id="process-nexttick-72">process.nextTick(callback)</H3>

<P>On the next loop around the event loop call this callback.
This is <EM>not</EM> a simple alias to <CODE class="sh_sourceCode"><SPAN class="sh_function">setTimeout</SPAN><SPAN class="sh_symbol">(</SPAN>fn<SPAN class="sh_symbol">,</SPAN> <SPAN class="sh_number">0</SPAN><SPAN class="sh_symbol">)</SPAN></CODE>, it's much more
efficient.</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">nextTick</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">()</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'nextTick callback'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<H3 id="process-umask-73">process.umask(mask)</H3>

<P>Sets or read the process's file mode creation mask. Child processes inherit
the mask from the parent process. Returns the old mask if <CODE class="sh_sourceCode">mask</CODE> argument is
given, otherwise returns the current mask.</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> oldmask<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> newmask <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">0644</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>

oldmask <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">umask</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>newmask<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'Changed umask from: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> oldmask<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">toString</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_number"><SPAN class="sh_number">8</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN>
            <SPAN class="sh_string"><SPAN class="sh_string">' to '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> newmask<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">toString</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_number"><SPAN class="sh_number">8</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">));</SPAN></SPAN>
</CODE></PRE>

<H2 id="sys-74">sys</H2>

<P>These functions are in the module <CODE class="sh_sourceCode"><SPAN class="sh_string">'sys'</SPAN></CODE>. Use <CODE class="sh_sourceCode"><SPAN class="sh_function">require</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">'sys'</SPAN><SPAN class="sh_symbol">)</SPAN></CODE> to access
them.</P>

<H3 id="sys-print-75">sys.print(string)</H3>

<P>Like <CODE class="sh_sourceCode">console<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">log</SPAN><SPAN class="sh_symbol">()</SPAN></CODE> but without the trailing newline.</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'sys'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">).</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">print</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'String with no newline'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<H3 id="sys-debug-76">sys.debug(string)</H3>

<P>A synchronous output function. Will block the process and
output <CODE class="sh_sourceCode">string</CODE> immediately to <CODE class="sh_sourceCode">stderr</CODE>.</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'sys'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">).</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">debug</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'message on stderr'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<H3 id="sys-log-77">sys.log(string)</H3>

<P>Output with timestamp on <CODE class="sh_sourceCode">stdout</CODE>.</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'sys'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">).</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'Timestmaped message.'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<H3 id="sys-inspect-78">sys.inspect(object, showHidden, depth)</H3>

<P>Return a string representation of <CODE class="sh_sourceCode">object</CODE>, which is useful for debugging.</P>

<P>If <CODE class="sh_sourceCode">showHidden</CODE> is <CODE class="sh_sourceCode"><SPAN class="sh_keyword">true</SPAN></CODE>, then the object's non-enumerable properties will be
shown too.</P>

<P>If <CODE class="sh_sourceCode">depth</CODE> is provided, it tells <CODE class="sh_sourceCode">inspect</CODE> how many times to recurse while
formatting the object. This is useful for inspecting large complicated objects.</P>

<P>The default is to only recurse twice.  To make it recurse indefinitely, pass
in <CODE class="sh_sourceCode"><SPAN class="sh_keyword">null</SPAN></CODE> for <CODE class="sh_sourceCode">depth</CODE>.</P>

<P>Example of inspecting all properties of the <CODE class="sh_sourceCode">sys</CODE> object:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> sys <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'sys'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>sys<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">inspect</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>sys<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">true</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">null</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">));</SPAN></SPAN>
</CODE></PRE>

<H3 id="sys-pump-79">sys.pump(readableStream, writeableStream, [callback])</H3>

<P>Experimental</P>

<P>Read the data from <CODE class="sh_sourceCode">readableStream</CODE> and send it to the <CODE class="sh_sourceCode">writableStream</CODE>.
When <CODE class="sh_sourceCode">writeableStream<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">write</SPAN><SPAN class="sh_symbol">(</SPAN>data<SPAN class="sh_symbol">)</SPAN></CODE> returns <CODE class="sh_sourceCode"><SPAN class="sh_keyword">false</SPAN></CODE> <CODE class="sh_sourceCode">readableStream</CODE> will be
paused until the <CODE class="sh_sourceCode">drain</CODE> event occurs on the <CODE class="sh_sourceCode">writableStream</CODE>. <CODE class="sh_sourceCode">callback</CODE> is
called when <CODE class="sh_sourceCode">writableStream</CODE> is closed.</P>

<H2 id="timers-80">Timers</H2>

<H3 id="settimeout-81">setTimeout(callback, delay, [arg, ...])</H3>

<P>To schedule execution of <CODE class="sh_sourceCode">callback</CODE> after <CODE class="sh_sourceCode">delay</CODE> milliseconds. Returns a
<CODE class="sh_sourceCode">timeoutId</CODE> for possible use with <CODE class="sh_sourceCode"><SPAN class="sh_function">clearTimeout</SPAN><SPAN class="sh_symbol">()</SPAN></CODE>.</P>

<H3 id="cleartimeout-82">clearTimeout(timeoutId)</H3>

<P>Prevents a timeout from triggering.</P>

<H3 id="setinterval-83">setInterval(callback, delay, [arg, ...])</H3>

<P>To schedule the repeated execution of <CODE class="sh_sourceCode">callback</CODE> every <CODE class="sh_sourceCode">delay</CODE> milliseconds.
Returns a <CODE class="sh_sourceCode">intervalId</CODE> for possible use with <CODE class="sh_sourceCode"><SPAN class="sh_function">clearInterval</SPAN><SPAN class="sh_symbol">()</SPAN></CODE>.</P>

<P>Optionally, you can also pass arguments to the callback.</P>

<H3 id="clearinterval-84">clearInterval(intervalId)</H3>

<P>Stops a interval from triggering.</P>

<H2 id="child-processes-85">Child Processes</H2>

<P>Node provides a tri-directional <CODE class="sh_sourceCode"><SPAN class="sh_function">popen</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_number">3</SPAN><SPAN class="sh_symbol">)</SPAN></CODE> facility through the <CODE class="sh_sourceCode">ChildProcess</CODE>
class.</P>

<P>It is possible to stream data through the child's <CODE class="sh_sourceCode">stdin</CODE>, <CODE class="sh_sourceCode">stdout</CODE>, and
<CODE class="sh_sourceCode">stderr</CODE> in a fully non-blocking way.</P>

<P>To create a child process use <CODE class="sh_sourceCode"><SPAN class="sh_function">require</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">'child_process'</SPAN><SPAN class="sh_symbol">).</SPAN><SPAN class="sh_function">spawn</SPAN><SPAN class="sh_symbol">()</SPAN></CODE>.</P>

<P>Child processes always have three streams associated with them. <CODE class="sh_sourceCode">child<SPAN class="sh_symbol">.</SPAN>stdin</CODE>,
<CODE class="sh_sourceCode">child<SPAN class="sh_symbol">.</SPAN>stdout</CODE>, and <CODE class="sh_sourceCode">child<SPAN class="sh_symbol">.</SPAN>stderr</CODE>.</P>

<P><CODE class="sh_sourceCode">ChildProcess</CODE> is an EventEmitter.</P>

<H3 id="event-exit-86">Event:  'exit'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">(</SPAN>code<SPAN class="sh_symbol">,</SPAN> signal<SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{}</SPAN></CODE></P>

<P>This event is emitted after the child process ends. If the process terminated
normally, <CODE class="sh_sourceCode">code</CODE> is the final exit code of the process, otherwise <CODE class="sh_sourceCode"><SPAN class="sh_keyword">null</SPAN></CODE>. If
the process terminated due to receipt of a signal, <CODE class="sh_sourceCode">signal</CODE> is the string name
of the signal, otherwise <CODE class="sh_sourceCode"><SPAN class="sh_keyword">null</SPAN></CODE>.</P>

<P>After this event is emitted, the <CODE class="sh_sourceCode"><SPAN class="sh_string">'output'</SPAN></CODE> and <CODE class="sh_sourceCode"><SPAN class="sh_string">'error'</SPAN></CODE> callbacks will no
longer be made.</P>

<P>See <CODE class="sh_sourceCode"><SPAN class="sh_function">waitpid</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_number">2</SPAN><SPAN class="sh_symbol">)</SPAN></CODE>.</P>

<H3 id="child_process-spawn-87">child_process.spawn(command, args, env)</H3>

<P>Launches a new process with the given <CODE class="sh_sourceCode">command</CODE>, command line arguments, and
environment variables.  If omitted, <CODE class="sh_sourceCode">args</CODE> defaults to an empty Array, and <CODE class="sh_sourceCode">env</CODE>
defaults to <CODE class="sh_sourceCode">process<SPAN class="sh_symbol">.</SPAN>env</CODE>.</P>

<P>Example of running <CODE class="sh_sourceCode">ls <SPAN class="sh_symbol">-</SPAN><SPAN class="sh_normal">lh </SPAN><SPAN class="sh_symbol">/</SPAN>usr</CODE>, capturing <CODE class="sh_sourceCode">stdout</CODE>, <CODE class="sh_sourceCode">stderr</CODE>, and the exit code:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> sys   <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'sys'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">),</SPAN></SPAN>
    spawn <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'child_process'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">).</SPAN></SPAN>spawn<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN>
    ls    <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">spawn</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'ls'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">[</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'-lh'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'/usr'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">]);</SPAN></SPAN>

ls<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>stdout<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">addListener</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'data'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>data<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  sys<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">print</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'stdout: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> data<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

ls<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>stderr<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">addListener</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'data'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>data<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  sys<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">print</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'stderr: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> data<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

ls<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">addListener</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'exit'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>code<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'child process exited with code '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> code<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<P>Example of checking for failed exec:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> spawn <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'child_process'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">).</SPAN></SPAN>spawn<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN>
    child <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">spawn</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'bad_command'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

child<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>stderr<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">addListener</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'data'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>data<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  <SPAN class="sh_keyword"><SPAN class="sh_keyword">if</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_regexp"><SPAN class="sh_regexp">/^execvp\(\)/</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">test</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>data<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">asciiSlice</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_number"><SPAN class="sh_number">0</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN>data<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>length<SPAN class="sh_symbol"><SPAN class="sh_symbol">)))</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
    console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'Failed to start child process.'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
  <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<P>See also: <CODE class="sh_sourceCode">child_process<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">exec</SPAN><SPAN class="sh_symbol">()</SPAN></CODE></P>

<H3 id="child-kill-88">child.kill(signal)</H3>

<P>Send a signal to the child process. If no argument is given, the process will
be sent <CODE class="sh_sourceCode"><SPAN class="sh_string">'SIGTERM'</SPAN></CODE>. See <CODE class="sh_sourceCode"><SPAN class="sh_function">signal</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_number">7</SPAN><SPAN class="sh_symbol">)</SPAN></CODE> for a list of available signals.</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> spawn <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'child_process'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">).</SPAN></SPAN>spawn<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN>
    grep  <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">spawn</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'grep'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">[</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'ssh'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">]);</SPAN></SPAN>

grep<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">addListener</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'exit'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>code<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> signal<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'child process terminated due to receipt of signal '</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN>signal<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

<SPAN class="sh_comment"><SPAN class="sh_comment">// send SIGHUP to process</SPAN></SPAN>
grep<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">kill</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'SIGHUP'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<P>Note that while the function is called <CODE class="sh_sourceCode">kill</CODE>, the signal delivered to the child
process may not actually kill it.  <CODE class="sh_sourceCode">kill</CODE> really just sends a signal to a process.</P>

<P>See <CODE class="sh_sourceCode"><SPAN class="sh_function">kill</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_number">2</SPAN><SPAN class="sh_symbol">)</SPAN></CODE></P>

<H3 id="child-pid-89">child.pid</H3>

<P>The PID of the child process.</P>

<P>Пример:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> spawn <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'child_process'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">).</SPAN></SPAN>spawn<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN>
    grep  <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">spawn</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'grep'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">[</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'ssh'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">]);</SPAN></SPAN>

console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'Spawned child pid: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> grep<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>pid<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
grep<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>stdin<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">end</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">();</SPAN></SPAN>
</CODE></PRE>

<H3 id="child-stdin-write-90">child.stdin.write(data, encoding)</H3>

<P>Write data to the child process's <CODE class="sh_sourceCode">stdin</CODE>. The second argument is optional and
specifies the encoding: possible values are <CODE class="sh_sourceCode"><SPAN class="sh_string">'utf8'</SPAN></CODE>, <CODE class="sh_sourceCode"><SPAN class="sh_string">'ascii'</SPAN></CODE>, and
<CODE class="sh_sourceCode"><SPAN class="sh_string">'binary'</SPAN></CODE>.</P>

<P>Example: A very elaborate way to run 'ps ax | grep ssh'</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> sys   <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'sys'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">),</SPAN></SPAN>
    spawn <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'child_process'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">).</SPAN></SPAN>spawn<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN>
    ps    <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">spawn</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'ps'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">[</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'ax'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">]),</SPAN></SPAN>
    grep  <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">spawn</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'grep'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">[</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'ssh'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">]);</SPAN></SPAN>

ps<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>stdout<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">addListener</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'data'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>data<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  grep<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>stdin<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">write</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>data<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

ps<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>stderr<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">addListener</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'data'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>data<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  sys<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">print</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'ps stderr: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> data<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

ps<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">addListener</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'exit'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>code<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  <SPAN class="sh_keyword"><SPAN class="sh_keyword">if</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>code <SPAN class="sh_symbol"><SPAN class="sh_symbol">!==</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">0</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
    console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'ps process exited with code '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> code<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
  <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN>
  grep<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>stdin<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">end</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">();</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

grep<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>stdout<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">addListener</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'data'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>data<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  sys<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">print</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>data<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

grep<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>stderr<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">addListener</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'data'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>data<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  sys<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">print</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'grep stderr: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> data<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

grep<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">addListener</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'exit'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>code<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  <SPAN class="sh_keyword"><SPAN class="sh_keyword">if</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>code <SPAN class="sh_symbol"><SPAN class="sh_symbol">!==</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">0</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
    console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'grep process exited with code '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> code<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
  <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<H3 id="child-stdin-end-91">child.stdin.end()</H3>

<P>Closes the child process's <CODE class="sh_sourceCode">stdin</CODE> stream.  This often causes the child process to terminate.</P>

<P>Пример:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> spawn <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'child_process'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">).</SPAN></SPAN>spawn<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN>
    grep  <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">spawn</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'grep'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">[</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'ssh'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">]);</SPAN></SPAN>

grep<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">addListener</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'exit'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>code<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'child process exited with code '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> code<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

grep<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>stdin<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">end</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">();</SPAN></SPAN>
</CODE></PRE>

<H3 id="child_process-exec-92">child_process.exec(command, [options, ] callback)</H3>

<P>High-level way to execute a command as a child process, buffer the
output, and return it all in a callback.</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> sys   <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'sys'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">),</SPAN></SPAN>
    exec  <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'child_process'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">).</SPAN></SPAN>exec<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN>
    child<SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>

child <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">exec</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'cat *.js bad_file | wc -l'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN>
  <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>error<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> stdout<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> stderr<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
    sys<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">print</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'stdout: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> stdout<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
    sys<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">print</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'stderr: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> stderr<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
    <SPAN class="sh_keyword"><SPAN class="sh_keyword">if</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>error <SPAN class="sh_symbol"><SPAN class="sh_symbol">!==</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">null</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
      console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'exec error: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> error<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
    <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN>
  <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<P>The callback gets the arguments <CODE class="sh_sourceCode"><SPAN class="sh_symbol">(</SPAN>error<SPAN class="sh_symbol">,</SPAN> stdout<SPAN class="sh_symbol">,</SPAN> stderr<SPAN class="sh_symbol">)</SPAN></CODE>. On success, <CODE class="sh_sourceCode">error</CODE>
will be <CODE class="sh_sourceCode"><SPAN class="sh_keyword">null</SPAN></CODE>.  On error, <CODE class="sh_sourceCode">error</CODE> will be an instance of <CODE class="sh_sourceCode"><SPAN class="sh_predef_func">Error</SPAN></CODE> and <CODE class="sh_sourceCode">err<SPAN class="sh_symbol">.</SPAN>code</CODE>
will be the exit code of the child process, and <CODE class="sh_sourceCode">err<SPAN class="sh_symbol">.</SPAN>signal</CODE> will be set to the
signal that terminated the process.</P>

<P>There is a second optional argument to specify several options. The default options are</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN> encoding<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'utf8'</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> timeout<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">0</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> maxBuffer<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">200</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">*</SPAN></SPAN><SPAN class="sh_number"><SPAN class="sh_number">1024</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> killSignal<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'SIGKILL'</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN>
</CODE></PRE>

<P>If <CODE class="sh_sourceCode">timeout</CODE> is greater than 0, then it will kill the child process
if it runs longer than <CODE class="sh_sourceCode">timeout</CODE> milliseconds. The child process is killed with
<CODE class="sh_sourceCode">killSignal</CODE> (default: <CODE class="sh_sourceCode"><SPAN class="sh_string">'SIGKILL'</SPAN></CODE>). <CODE class="sh_sourceCode">maxBuffer</CODE> specifies the largest
amount of data allowed on stdout or stderr - if this value is exceeded then
the child process is killed.</P>

<H2 id="script-93">Script</H2>

<P><CODE class="sh_sourceCode">Script</CODE> class compiles and runs JavaScript code. You can access this class with:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> Script <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">binding</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'evals'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">).</SPAN></SPAN>Script<SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>
</CODE></PRE>

<P>New JavaScript code can be compiled and run immediately or compiled, saved, and run later.</P>

<H3 id="script-runinthiscontext-94">Script.runInThisContext(code, filename)</H3>

<P>Similar to <CODE class="sh_sourceCode">process<SPAN class="sh_symbol">.</SPAN>compile</CODE>.  <CODE class="sh_sourceCode">Script<SPAN class="sh_symbol">.</SPAN>runInThisContext</CODE> compiles <CODE class="sh_sourceCode">code</CODE> as if it were loaded from <CODE class="sh_sourceCode">filename</CODE>,
runs it and returns the result. Running code does not have access to local scope. <CODE class="sh_sourceCode">filename</CODE> is optional.</P>

<P>Example of using <CODE class="sh_sourceCode">Script<SPAN class="sh_symbol">.</SPAN>runInThisContext</CODE> and <CODE class="sh_sourceCode"><SPAN class="sh_predef_func">eval</SPAN></CODE> to run the same code:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> localVar <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">123</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN>
    usingscript<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> evaled<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN>
    Script <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">binding</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'evals'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">).</SPAN></SPAN>Script<SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>

usingscript <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> Script<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">runInThisContext</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'localVar = 1;'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN>
  <SPAN class="sh_string"><SPAN class="sh_string">'myfile.js'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'localVar: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> localVar <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">', usingscript: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN>
  usingscript<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
evaled <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_predef_func"><SPAN class="sh_predef_func">eval</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'localVar = 1;'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'localVar: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> localVar <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">', evaled: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN>
  evaled<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

<SPAN class="sh_comment"><SPAN class="sh_comment">// localVar: 123, usingscript: 1</SPAN></SPAN>
<SPAN class="sh_comment"><SPAN class="sh_comment">// localVar: 1, evaled: 1</SPAN></SPAN>
</CODE></PRE>

<P><CODE class="sh_sourceCode">Script<SPAN class="sh_symbol">.</SPAN>runInThisContext</CODE> does not have access to the local scope, so <CODE class="sh_sourceCode">localVar</CODE> is unchanged.
<CODE class="sh_sourceCode"><SPAN class="sh_predef_func">eval</SPAN></CODE> does have access to the local scope, so <CODE class="sh_sourceCode">localVar</CODE> is changed.</P>

<P>In case of syntax error in <CODE class="sh_sourceCode">code</CODE>, <CODE class="sh_sourceCode">Script<SPAN class="sh_symbol">.</SPAN>runInThisContext</CODE> emits the syntax error to stderr
and throws.an exception.</P>

<H3 id="script-runinnewcontext-95">Script.runInNewContext(code, sandbox, filename)</H3>

<P><CODE class="sh_sourceCode">Script<SPAN class="sh_symbol">.</SPAN>runInNewContext</CODE> compiles <CODE class="sh_sourceCode">code</CODE> to run in <CODE class="sh_sourceCode">sandbox</CODE> as if it were loaded from <CODE class="sh_sourceCode">filename</CODE>,
then runs it and returns the result. Running code does not have access to local scope and
the object <CODE class="sh_sourceCode">sandbox</CODE> will be used as the global object for <CODE class="sh_sourceCode">code</CODE>.
<CODE class="sh_sourceCode">sandbox</CODE> and <CODE class="sh_sourceCode">filename</CODE> are optional.</P>

<P>Example: compile and execute code that increments a global variable and sets a new one.
These globals are contained in the sandbox.</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> sys <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'sys'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">),</SPAN></SPAN>
    Script <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">binding</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'evals'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">).</SPAN></SPAN>Script<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN>
    sandbox <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
      animal<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'cat'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN>
      count<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">2</SPAN></SPAN>
    <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>

Script<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">runInNewContext</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>
  <SPAN class="sh_string"><SPAN class="sh_string">'count += 1; name = "kitty"'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> sandbox<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'myfile.js'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>sys<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">inspect</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>sandbox<SPAN class="sh_symbol"><SPAN class="sh_symbol">));</SPAN></SPAN>

<SPAN class="sh_comment"><SPAN class="sh_comment">// { animal: 'cat', count: 3, name: 'kitty' }</SPAN></SPAN>
</CODE></PRE>

<P>Note that running untrusted code is a tricky business requiring great care.  To prevent accidental
global variable leakage, <CODE class="sh_sourceCode">Script<SPAN class="sh_symbol">.</SPAN>runInNewContext</CODE> is quite useful, but safely running untrusted code
requires a separate process.</P>

<P>In case of syntax error in <CODE class="sh_sourceCode">code</CODE>, <CODE class="sh_sourceCode">Script<SPAN class="sh_symbol">.</SPAN>runInThisContext</CODE> emits the syntax error to stderr
and throws an exception.</P>

<H3 id="new-script-96">new Script(code, filename)</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">new</SPAN> Script</CODE> compiles <CODE class="sh_sourceCode">code</CODE> as if it were loaded from <CODE class="sh_sourceCode">filename</CODE>,
but does not run it. Instead, it returns a <CODE class="sh_sourceCode">Script</CODE> object representing this compiled code.
This script can be run later many times using methods below.
The returned script is not bound to any global object.
It is bound before each run, just for that run. <CODE class="sh_sourceCode">filename</CODE> is optional.</P>

<P>In case of syntax error in <CODE class="sh_sourceCode">code</CODE>, <CODE class="sh_sourceCode"><SPAN class="sh_keyword">new</SPAN> Script</CODE> emits the syntax error to stderr
and throws an exception.</P>

<H3 id="script-runinthiscontext-97">script.runInThisContext()</H3>

<P>Similar to <CODE class="sh_sourceCode">Script<SPAN class="sh_symbol">.</SPAN>runInThisContext</CODE> (note capital 'S'), but now being a method of a precompiled Script object.
<CODE class="sh_sourceCode">script<SPAN class="sh_symbol">.</SPAN>runInThisContext</CODE> runs the code of <CODE class="sh_sourceCode">script</CODE> and returns the result.
Running code does not have access to local scope, but does have access to the <CODE class="sh_sourceCode">global</CODE> object
(v8: in actual context).</P>

<P>Example of using <CODE class="sh_sourceCode">script<SPAN class="sh_symbol">.</SPAN>runInThisContext</CODE> to compile code once and run it multiple times:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> Script <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">binding</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'evals'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">).</SPAN></SPAN>Script<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN>
    scriptObj<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> i<SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>

globalVar <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">0</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>

scriptObj <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">new</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">Script</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'globalVar += 1'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'myfile.js'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

<SPAN class="sh_keyword"><SPAN class="sh_keyword">for</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>i <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">0</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN> i <SPAN class="sh_symbol"><SPAN class="sh_symbol">&lt;</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">1000</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN> i <SPAN class="sh_symbol"><SPAN class="sh_symbol">+=</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">1</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  scriptObj<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">runInThisContext</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">();</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN>

console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>globalVar<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

<SPAN class="sh_comment"><SPAN class="sh_comment">// 1000</SPAN></SPAN>
</CODE></PRE>

<H3 id="script-runinnewcontext-98">script.runInNewContext(sandbox)</H3>

<P>Similar to <CODE class="sh_sourceCode">Script<SPAN class="sh_symbol">.</SPAN>runInNewContext</CODE> (note capital 'S'), but now being a method of a precompiled Script object.
<CODE class="sh_sourceCode">script<SPAN class="sh_symbol">.</SPAN>runInNewContext</CODE> runs the code of <CODE class="sh_sourceCode">script</CODE> with <CODE class="sh_sourceCode">sandbox</CODE> as the global object and returns the result.
Running code does not have access to local scope. <CODE class="sh_sourceCode">sandbox</CODE> is optional.</P>

<P>Example: compile code that increments a global variable and sets one, then execute this code multiple times.
These globals are contained in the sandbox.</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> sys <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'sys'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">),</SPAN></SPAN>
    Script <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> process<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">binding</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'evals'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">).</SPAN></SPAN>Script<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN>
    scriptObj<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> i<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN>
    sandbox <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
      animal<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'cat'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN>
      count<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">2</SPAN></SPAN>
    <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>

scriptObj <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">new</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">Script</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>
    <SPAN class="sh_string"><SPAN class="sh_string">'count += 1; name = "kitty"'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'myfile.js'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

<SPAN class="sh_keyword"><SPAN class="sh_keyword">for</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>i <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">0</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN> i <SPAN class="sh_symbol"><SPAN class="sh_symbol">&lt;</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">10</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN> i <SPAN class="sh_symbol"><SPAN class="sh_symbol">+=</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">1</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  scriptObj<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">runInNewContext</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>sandbox<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN>

console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>sys<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">inspect</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>sandbox<SPAN class="sh_symbol"><SPAN class="sh_symbol">));</SPAN></SPAN>

<SPAN class="sh_comment"><SPAN class="sh_comment">// { animal: 'cat', count: 12, name: 'kitty' }</SPAN></SPAN>
</CODE></PRE>

<P>Note that running untrusted code is a tricky business requiring great care.  To prevent accidental
global variable leakage, <CODE class="sh_sourceCode">script<SPAN class="sh_symbol">.</SPAN>runInNewContext</CODE> is quite useful, but safely running untrusted code
requires a separate process.</P>

<H2 id="file-system-99">File System</H2>

<P>File I/O is provided by simple wrappers around standard POSIX functions.  To
use this module do <CODE class="sh_sourceCode"><SPAN class="sh_function">require</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">'fs'</SPAN><SPAN class="sh_symbol">)</SPAN></CODE>. All the methods have asynchronous and
synchronous forms.</P>

<P>The asynchronous form always take a completion callback as its last argument.
The arguments passed to the completion callback depend on the method, but the
first argument is always reserved for an exception. If the operation was
completed successfully, then the first argument will be <CODE class="sh_sourceCode"><SPAN class="sh_keyword">null</SPAN></CODE> or <CODE class="sh_sourceCode"><SPAN class="sh_predef_var">undefined</SPAN></CODE>.</P>

<P>Here is an example of the asynchronous version:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> fs <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'fs'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

fs<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">unlink</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'/tmp/hello'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>err<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  <SPAN class="sh_keyword"><SPAN class="sh_keyword">if</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>err<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">throw</SPAN></SPAN> err<SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>
  console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'successfully deleted /tmp/hello'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<P>Here is the synchronous version:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> fs <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'fs'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

fs<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">unlinkSync</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'/tmp/hello'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN>
console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'successfully deleted /tmp/hello'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<P>With the asynchronous methods there is no guaranteed ordering. So the
following is prone to error:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">fs<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">rename</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'/tmp/hello'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'/tmp/world'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>err<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  <SPAN class="sh_keyword"><SPAN class="sh_keyword">if</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>err<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">throw</SPAN></SPAN> err<SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>
  console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'renamed complete'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
fs<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">stat</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'/tmp/world'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>err<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> stats<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  <SPAN class="sh_keyword"><SPAN class="sh_keyword">if</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>err<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">throw</SPAN></SPAN> err<SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>
  console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'stats: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> JSON<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">stringify</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>stats<SPAN class="sh_symbol"><SPAN class="sh_symbol">));</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<P>It could be that <CODE class="sh_sourceCode">fs<SPAN class="sh_symbol">.</SPAN>stat</CODE> is executed before <CODE class="sh_sourceCode">fs<SPAN class="sh_symbol">.</SPAN>rename</CODE>.
The correct way to do this is to chain the callbacks.</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">fs<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">rename</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'/tmp/hello'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'/tmp/world'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>err<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  <SPAN class="sh_keyword"><SPAN class="sh_keyword">if</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>err<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">throw</SPAN></SPAN> err<SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>
  fs<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">stat</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'/tmp/world'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>err<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> stats<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
    <SPAN class="sh_keyword"><SPAN class="sh_keyword">if</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>err<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">throw</SPAN></SPAN> err<SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>
    console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'stats: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> JSON<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">stringify</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>stats<SPAN class="sh_symbol"><SPAN class="sh_symbol">));</SPAN></SPAN>
  <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<P>In busy processes, the programmer is <EM>strongly encouraged</EM> to use the
asynchronous versions of these calls. The synchronous versions will block
the entire process until they complete--halting all connections.</P>

<H3 id="fs-rename-100">fs.rename(path1, path2, callback)</H3>

<P>Asynchronous rename(2). No arguments other than a possible exception are given to the completion callback.</P>

<H3 id="fs-renamesync-101">fs.renameSync(path1, path2)</H3>

<P>Synchronous rename(2).</P>

<H3 id="fs-truncate-102">fs.truncate(fd, len, callback)</H3>

<P>Asynchronous ftruncate(2). No arguments other than a possible exception are given to the completion callback.</P>

<H3 id="fs-truncatesync-103">fs.truncateSync(fd, len)</H3>

<P>Synchronous ftruncate(2).</P>

<H3 id="fs-chmod-104">fs.chmod(path, mode, callback)</H3>

<P>Asynchronous chmod(2). No arguments other than a possible exception are given to the completion callback.</P>

<H3 id="fs-chmodsync-105">fs.chmodSync(path, mode)</H3>

<P>Synchronous chmod(2).</P>

<H3 id="fs-stat-106">fs.stat(path, callback), fs.lstat(path, callback), fs.fstat(fd, callback)</H3>

<P>Asynchronous stat(2), lstat(2) or fstat(2). The callback gets two arguments <CODE class="sh_sourceCode"><SPAN class="sh_symbol">(</SPAN>err<SPAN class="sh_symbol">,</SPAN> stats<SPAN class="sh_symbol">)</SPAN></CODE> where <CODE class="sh_sourceCode">stats</CODE> is a <CODE class="sh_sourceCode">fs<SPAN class="sh_symbol">.</SPAN>Stats</CODE> object. It looks like this:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN> dev<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">2049</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> ino<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">305352</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> mode<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">16877</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> nlink<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">12</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> uid<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">1000</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> gid<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">1000</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> rdev<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">0</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> size<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">4096</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> blksize<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">4096</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> blocks<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">8</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> atime<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'2009-06-29T11:11:55Z'</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> mtime<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'2009-06-29T11:11:40Z'</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> ctime<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'2009-06-29T11:11:40Z'</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN>
</CODE></PRE>

<P>See the <CODE class="sh_sourceCode">fs<SPAN class="sh_symbol">.</SPAN>Stats</CODE> section below for more information.</P>

<H3 id="fs-statsync-107">fs.statSync(path), fs.lstatSync(path), fs.fstatSync(fd)</H3>

<P>Synchronous stat(2), lstat(2) or fstat(2). Returns an instance of <CODE class="sh_sourceCode">fs<SPAN class="sh_symbol">.</SPAN>Stats</CODE>.</P>

<H3 id="fs-link-108">fs.link(srcpath, dstpath, callback)</H3>

<P>Asynchronous link(2). No arguments other than a possible exception are given to the completion callback.</P>

<H3 id="fs-linksync-109">fs.linkSync(dstpath, srcpath)</H3>

<P>Synchronous link(2).</P>

<H3 id="fs-symlink-110">fs.symlink(linkdata, path, callback)</H3>

<P>Asynchronous symlink(2). No arguments other than a possible exception are given to the completion callback.</P>

<H3 id="fs-symlinksync-111">fs.symlinkSync(linkdata, path)</H3>

<P>Synchronous symlink(2).</P>

<H3 id="fs-readlink-112">fs.readlink(path, callback)</H3>

<P>Asynchronous readlink(2). The callback gets two arguments <CODE class="sh_sourceCode"><SPAN class="sh_symbol">(</SPAN>err<SPAN class="sh_symbol">,</SPAN> resolvedPath<SPAN class="sh_symbol">)</SPAN></CODE>.</P>

<H3 id="fs-readlinksync-113">fs.readlinkSync(path)</H3>

<P>Synchronous readlink(2). Returns the resolved path.</P>

<H3 id="fs-realpath-114">fs.realpath(path, callback)</H3>

<P>Asynchronous realpath(2).  The callback gets two arguments <CODE class="sh_sourceCode"><SPAN class="sh_symbol">(</SPAN>err<SPAN class="sh_symbol">,</SPAN> resolvedPath<SPAN class="sh_symbol">)</SPAN></CODE>.</P>

<H3 id="fs-realpathsync-115">fs.realpathSync(path)</H3>

<P>Synchronous realpath(2). Returns the resolved path.</P>

<H3 id="fs-unlink-116">fs.unlink(path, callback)</H3>

<P>Asynchronous unlink(2). No arguments other than a possible exception are given to the completion callback.</P>

<H3 id="fs-unlinksync-117">fs.unlinkSync(path)</H3>

<P>Synchronous unlink(2).</P>

<H3 id="fs-rmdir-118">fs.rmdir(path, callback)</H3>

<P>Asynchronous rmdir(2). No arguments other than a possible exception are given to the completion callback.</P>

<H3 id="fs-rmdirsync-119">fs.rmdirSync(path)</H3>

<P>Synchronous rmdir(2).</P>

<H3 id="fs-mkdir-120">fs.mkdir(path, mode, callback)</H3>

<P>Asynchronous mkdir(2). No arguments other than a possible exception are given to the completion callback.</P>

<H3 id="fs-mkdirsync-121">fs.mkdirSync(path, mode)</H3>

<P>Synchronous mkdir(2).</P>

<H3 id="fs-readdir-122">fs.readdir(path, callback)</H3>

<P>Asynchronous readdir(3).  Reads the contents of a directory.
The callback gets two arguments <CODE class="sh_sourceCode"><SPAN class="sh_symbol">(</SPAN>err<SPAN class="sh_symbol">,</SPAN> files<SPAN class="sh_symbol">)</SPAN></CODE> where <CODE class="sh_sourceCode">files</CODE> is an array of
the names of the files in the directory excluding <CODE class="sh_sourceCode"><SPAN class="sh_string">'.'</SPAN></CODE> and <CODE class="sh_sourceCode"><SPAN class="sh_string">'..'</SPAN></CODE>.</P>

<H3 id="fs-readdirsync-123">fs.readdirSync(path)</H3>

<P>Synchronous readdir(3). Returns an array of filenames excluding <CODE class="sh_sourceCode"><SPAN class="sh_string">'.'</SPAN></CODE> and
<CODE class="sh_sourceCode"><SPAN class="sh_string">'..'</SPAN></CODE>.</P>

<H3 id="fs-close-124">fs.close(fd, callback)</H3>

<P>Asynchronous close(2).  No arguments other than a possible exception are given to the completion callback.</P>

<H3 id="fs-closesync-125">fs.closeSync(fd)</H3>

<P>Synchronous close(2).</P>

<H3 id="fs-open-126">fs.open(path, flags, mode, callback)</H3>

<P>Asynchronous file open. See open(2). Flags can be 'r', 'r+', 'w', 'w+', 'a',
or 'a+'. The callback gets two arguments <CODE class="sh_sourceCode"><SPAN class="sh_symbol">(</SPAN>err<SPAN class="sh_symbol">,</SPAN> fd<SPAN class="sh_symbol">)</SPAN></CODE>.</P>

<H3 id="fs-opensync-127">fs.openSync(path, flags, mode)</H3>

<P>Synchronous open(2).</P>

<H3 id="fs-write-128">fs.write(fd, buffer, offset, length, position, callback)</H3>

<P>Write <CODE class="sh_sourceCode">buffer</CODE> to the file specified by <CODE class="sh_sourceCode">fd</CODE>.</P>

<P><CODE class="sh_sourceCode">offset</CODE> and <CODE class="sh_sourceCode">length</CODE> determine the part of the buffer to be written.</P>

<P><CODE class="sh_sourceCode">position</CODE> refers to the offset from the beginning of the file where this data
should be written. If <CODE class="sh_sourceCode">position</CODE> is <CODE class="sh_sourceCode"><SPAN class="sh_keyword">null</SPAN></CODE>, the data will be written at the
current position.
See pwrite(2).</P>

<P>The callback will be given two arguments <CODE class="sh_sourceCode"><SPAN class="sh_symbol">(</SPAN>err<SPAN class="sh_symbol">,</SPAN> written<SPAN class="sh_symbol">)</SPAN></CODE> where <CODE class="sh_sourceCode">written</CODE>
specifies how many <EM>bytes</EM> were written.</P>

<H3 id="fs-writesync-129">fs.writeSync(fd, data, position, encoding)</H3>

<P>Synchronous version of <CODE class="sh_sourceCode">fs<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">write</SPAN><SPAN class="sh_symbol">()</SPAN></CODE>. Returns the number of bytes written.</P>

<H3 id="fs-read-130">fs.read(fd, buffer, offset, length, position, callback)</H3>

<P>Read data from the file specified by <CODE class="sh_sourceCode">fd</CODE>.</P>

<P><CODE class="sh_sourceCode">buffer</CODE> is the buffer that the data will be written to.</P>

<P><CODE class="sh_sourceCode">offset</CODE> is offset within the buffer where writing will start.</P>

<P><CODE class="sh_sourceCode">length</CODE> is an integer specifying the number of bytes to read.</P>

<P><CODE class="sh_sourceCode">position</CODE> is an integer specifying where to begin reading from in the file.
If <CODE class="sh_sourceCode">position</CODE> is <CODE class="sh_sourceCode"><SPAN class="sh_keyword">null</SPAN></CODE>, data will be read from the current file position.</P>

<P>The callback is given the two arguments, <CODE class="sh_sourceCode"><SPAN class="sh_symbol">(</SPAN>err<SPAN class="sh_symbol">,</SPAN> bytesRead<SPAN class="sh_symbol">)</SPAN></CODE>.</P>

<H3 id="fs-readsync-131">fs.readSync(fd, buffer, offset, length, position)</H3>

<P>Synchronous version of <CODE class="sh_sourceCode">fs<SPAN class="sh_symbol">.</SPAN>read</CODE>. Returns the number of <CODE class="sh_sourceCode">bytesRead</CODE>.</P>

<H3 id="fs-readfile-132">fs.readFile(filename, [encoding,] callback)</H3>

<P>Asynchronously reads the entire contents of a file. Example:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">fs<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">readFile</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'/etc/passwd'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>err<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> data<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  <SPAN class="sh_keyword"><SPAN class="sh_keyword">if</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>err<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">throw</SPAN></SPAN> err<SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>
  console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>data<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<P>The callback is passed two arguments <CODE class="sh_sourceCode"><SPAN class="sh_symbol">(</SPAN>err<SPAN class="sh_symbol">,</SPAN> data<SPAN class="sh_symbol">)</SPAN></CODE>, where <CODE class="sh_sourceCode">data</CODE> is the
contents of the file.</P>

<P>If no encoding is specified, then the raw buffer is returned.</P>

<H3 id="fs-readfilesync-133">fs.readFileSync(filename [, encoding])</H3>

<P>Synchronous version of <CODE class="sh_sourceCode">fs<SPAN class="sh_symbol">.</SPAN>readFile</CODE>. Returns the contents of the <CODE class="sh_sourceCode">filename</CODE>.</P>

<P>If <CODE class="sh_sourceCode">encoding</CODE> is specified then this function returns a string. Otherwise it
returns a buffer.</P>

<H3 id="fs-writefile-134">fs.writeFile(filename, data, encoding='utf8', callback)</H3>

<P>Asynchronously writes data to a file. Example:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">fs<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">writeFile</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'message.txt'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'Hello Node'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>err<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  <SPAN class="sh_keyword"><SPAN class="sh_keyword">if</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>err<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">throw</SPAN></SPAN> err<SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>
  console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'It</SPAN></SPAN><SPAN class="sh_specialchar"><SPAN class="sh_specialchar">\'</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">s saved!'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<H3 id="fs-writefilesync-135">fs.writeFileSync(filename, data, encoding='utf8')</H3>

<P>The synchronous version of <CODE class="sh_sourceCode">fs<SPAN class="sh_symbol">.</SPAN>writeFile</CODE>.</P>

<H3 id="fs-watchfile-136">fs.watchFile(filename, [options,] listener)</H3>

<P>Watch for changes on <CODE class="sh_sourceCode">filename</CODE>. The callback <CODE class="sh_sourceCode">listener</CODE> will be called each
time the file changes.</P>

<P>The second argument is optional. The <CODE class="sh_sourceCode">options</CODE> if provided should be an object
containing two members a boolean, <CODE class="sh_sourceCode">persistent</CODE>, and <CODE class="sh_sourceCode">interval</CODE>, a polling
value in milliseconds. The default is <CODE class="sh_sourceCode"><SPAN class="sh_cbracket">{</SPAN>persistent<SPAN class="sh_symbol">:</SPAN> <SPAN class="sh_keyword">true</SPAN><SPAN class="sh_symbol">,</SPAN> interval<SPAN class="sh_symbol">:</SPAN> <SPAN class="sh_number">0</SPAN><SPAN class="sh_cbracket">}</SPAN></CODE>.</P>

<P>The <CODE class="sh_sourceCode">listener</CODE> gets two arguments the current stat object and the previous
stat object:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">fs<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">watchFile</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>f<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>curr<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> prev<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'the current mtime is: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> curr<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>mtime<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
  console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'the previous mtime was: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> prev<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>mtime<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<P>These stat objects are instances of <CODE class="sh_sourceCode">fs<SPAN class="sh_symbol">.</SPAN>Stat</CODE>.</P>

<H3 id="fs-unwatchfile-137">fs.unwatchFile(filename)</H3>

<P>Stop watching for changes on <CODE class="sh_sourceCode">filename</CODE>.</P>

<H2 id="fs-stats-138">fs.Stats</H2>

<P>Objects returned from <CODE class="sh_sourceCode">fs<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">stat</SPAN><SPAN class="sh_symbol">()</SPAN></CODE> and <CODE class="sh_sourceCode">fs<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">lstat</SPAN><SPAN class="sh_symbol">()</SPAN></CODE> are of this type.</P>

<UL>
<LI><CODE class="sh_sourceCode">stats<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">isFile</SPAN><SPAN class="sh_symbol">()</SPAN></CODE></LI>
<LI><CODE class="sh_sourceCode">stats<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">isDirectory</SPAN><SPAN class="sh_symbol">()</SPAN></CODE></LI>
<LI><CODE class="sh_sourceCode">stats<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">isBlockDevice</SPAN><SPAN class="sh_symbol">()</SPAN></CODE></LI>
<LI><CODE class="sh_sourceCode">stats<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">isCharacterDevice</SPAN><SPAN class="sh_symbol">()</SPAN></CODE></LI>
<LI><CODE class="sh_sourceCode">stats<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">isSymbolicLink</SPAN><SPAN class="sh_symbol">()</SPAN></CODE> (only valid with  <CODE class="sh_sourceCode">fs<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">lstat</SPAN><SPAN class="sh_symbol">()</SPAN></CODE>)</LI>
<LI><CODE class="sh_sourceCode">stats<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">isFIFO</SPAN><SPAN class="sh_symbol">()</SPAN></CODE></LI>
<LI><CODE class="sh_sourceCode">stats<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">isSocket</SPAN><SPAN class="sh_symbol">()</SPAN></CODE></LI>
</UL>


<H2 id="fs-readstream-139">fs.ReadStream</H2>

<P><CODE class="sh_sourceCode">ReadStream</CODE> is a readable stream.</P>

<H3 id="fs-createreadstream-140">fs.createReadStream(path, [options])</H3>

<P>Returns a new ReadStream object.</P>

<P><CODE class="sh_sourceCode">options</CODE> is an object with the following defaults:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'flags'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'r'</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'encoding'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'binary'</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'mode'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">0666</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'bufferSize'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">4</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">*</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">1024</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN>
</CODE></PRE>

<H3 id="readstream-readable-141">readStream.readable</H3>

<P>A boolean that is <CODE class="sh_sourceCode"><SPAN class="sh_keyword">true</SPAN></CODE> by default, but turns <CODE class="sh_sourceCode"><SPAN class="sh_keyword">false</SPAN></CODE> after an <CODE class="sh_sourceCode"><SPAN class="sh_string">'error'</SPAN></CODE>
occured, the stream came to an <CODE class="sh_sourceCode"><SPAN class="sh_string">'end'</SPAN></CODE>, or <CODE class="sh_sourceCode"><SPAN class="sh_function">destroy</SPAN><SPAN class="sh_symbol">()</SPAN></CODE> was called.</P>

<H3 id="readstream-pause-142">readStream.pause()</H3>

<P>Stops the stream from reading further data. No <CODE class="sh_sourceCode"><SPAN class="sh_string">'data'</SPAN></CODE> event will be fired
until the stream is resumed.</P>

<H3 id="readstream-resume-143">readStream.resume()</H3>

<P>Resumes the stream. Together with <CODE class="sh_sourceCode"><SPAN class="sh_function">pause</SPAN><SPAN class="sh_symbol">()</SPAN></CODE> this useful to throttle reading.</P>

<H3 id="readstream-destroy-144">readStream.destroy()</H3>

<P>Allows to close the stream before the <CODE class="sh_sourceCode"><SPAN class="sh_string">'end'</SPAN></CODE> is reached. No more events other
than <CODE class="sh_sourceCode"><SPAN class="sh_string">'close'</SPAN></CODE> will be fired after this method has been called.</P>

<H2 id="fs-writestream-145">fs.WriteStream</H2>

<P><CODE class="sh_sourceCode">WriteStream</CODE> is a writable stream.</P>

<H3 id="fs-createwritestream-146">fs.createWriteStream(path, [options])</H3>

<P>Returns a new WriteStream object.
<CODE class="sh_sourceCode">options</CODE> is an object with the following defaults:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'flags'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'w'</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'encoding'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'binary'</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'mode'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">0666</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN>
</CODE></PRE>

<H3 id="writestream-writeable-147">writeStream.writeable</H3>

<P>A boolean that is <CODE class="sh_sourceCode"><SPAN class="sh_keyword">true</SPAN></CODE> by default, but turns <CODE class="sh_sourceCode"><SPAN class="sh_keyword">false</SPAN></CODE> after an <CODE class="sh_sourceCode"><SPAN class="sh_string">'error'</SPAN></CODE>
occurred or <CODE class="sh_sourceCode"><SPAN class="sh_function">end</SPAN><SPAN class="sh_symbol">()</SPAN></CODE> / <CODE class="sh_sourceCode"><SPAN class="sh_function">destroy</SPAN><SPAN class="sh_symbol">()</SPAN></CODE> was called.</P>

<H3 id="writestream-write-148">writeStream.write(data, encoding='utf8')</H3>

<P>Returns <CODE class="sh_sourceCode"><SPAN class="sh_keyword">true</SPAN></CODE> if the data was flushed to the kernel, and <CODE class="sh_sourceCode"><SPAN class="sh_keyword">false</SPAN></CODE> if it was
queued up for being written later. A <CODE class="sh_sourceCode"><SPAN class="sh_string">'drain'</SPAN></CODE> will fire after all queued data
has been written.</P>

<P>The second optional parameter specifies the encoding of for the string.</P>

<H3 id="writestream-end-149">writeStream.end()</H3>

<P>Closes the stream right after all queued <CODE class="sh_sourceCode"><SPAN class="sh_function">write</SPAN><SPAN class="sh_symbol">()</SPAN></CODE> calls have finished.</P>

<H3 id="writestream-destroy-150">writeStream.destroy()</H3>

<P>Allows to close the stream regardless of its current state.</P>

<H2 id="http-151">HTTP</H2>

<P>To use the HTTP server and client one must <CODE class="sh_sourceCode"><SPAN class="sh_function">require</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">'http'</SPAN><SPAN class="sh_symbol">)</SPAN></CODE>.</P>

<P>The HTTP interfaces in Node are designed to support many features
of the protocol which have been traditionally difficult to use.
In particular, large, possibly chunk-encoded, messages. The interface is
careful to never buffer entire requests or responses--the
user is able to stream data.</P>

<P>HTTP message headers are represented by an object like this:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'content-length'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'123'</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'content-type'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'text/plain'</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'stream'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'keep-alive'</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'accept'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'*/*'</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN>
</CODE></PRE>

<P>Keys are lowercased. Values are not modified.</P>

<P>In order to support the full spectrum of possible HTTP applications, Node's
HTTP API is very low-level. It deals with stream handling and message
parsing only. It parses a message into headers and body but it does not
parse the actual headers or the body.</P>

<P>HTTPS is supported if OpenSSL is available on the underlying platform.</P>

<H2 id="http-server-152">http.Server</H2>

<P>This is an EventEmitter with the following events:</P>

<H3 id="event-request-153">Event: 'request'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">(</SPAN>request<SPAN class="sh_symbol">,</SPAN> response<SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{</SPAN> <SPAN class="sh_cbracket">}</SPAN></CODE></P>

<P> <CODE class="sh_sourceCode">request</CODE> is an instance of <CODE class="sh_sourceCode">http<SPAN class="sh_symbol">.</SPAN>ServerRequest</CODE> and <CODE class="sh_sourceCode">response</CODE> is
 an instance of <CODE class="sh_sourceCode">http<SPAN class="sh_symbol">.</SPAN>ServerResponse</CODE></P>

<H3 id="event-connection-154">Event: 'connection'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">(</SPAN>stream<SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{</SPAN> <SPAN class="sh_cbracket">}</SPAN></CODE></P>

<P> When a new TCP stream is established. <CODE class="sh_sourceCode">stream</CODE> is an object of type
 <CODE class="sh_sourceCode">net<SPAN class="sh_symbol">.</SPAN>Stream</CODE>. Usually users will not want to access this event. The
 <CODE class="sh_sourceCode">stream</CODE> can also be accessed at <CODE class="sh_sourceCode">request<SPAN class="sh_symbol">.</SPAN>connection</CODE>.</P>

<H3 id="event-close-155">Event: 'close'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">(</SPAN>errno<SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{</SPAN> <SPAN class="sh_cbracket">}</SPAN></CODE></P>

<P> Emitted when the server closes.</P>

<H3 id="http-createserver-156">http.createServer(requestListener, [options])</H3>

<P>Returns a new web server object.</P>

<P>The <CODE class="sh_sourceCode">options</CODE> argument is optional. The
<CODE class="sh_sourceCode">options</CODE> argument accepts the same values as the
options argument for <CODE class="sh_sourceCode">net<SPAN class="sh_symbol">.</SPAN>Server</CODE>.</P>

<P>The <CODE class="sh_sourceCode">requestListener</CODE> is a function which is automatically
added to the <CODE class="sh_sourceCode"><SPAN class="sh_string">'request'</SPAN></CODE> event.</P>

<H3 id="event-request-157">Event: 'request'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">(</SPAN>request<SPAN class="sh_symbol">,</SPAN> response<SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{}</SPAN></CODE></P>

<P>Emitted each time there is request. Note that there may be multiple requests
per connection (in the case of keep-alive connections).</P>

<H3 id="event-upgrade-158">Event: 'upgrade'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">(</SPAN>request<SPAN class="sh_symbol">,</SPAN> socket<SPAN class="sh_symbol">,</SPAN> head<SPAN class="sh_symbol">)</SPAN></CODE></P>

<P>Emitted each time a client requests a http upgrade. If this event isn't
listened for, then clients requesting an upgrade will have their connections
closed.</P>

<UL>
<LI><CODE class="sh_sourceCode">request</CODE> is the arguments for the http request, as it is in the request event.</LI>
<LI><CODE class="sh_sourceCode">socket</CODE> is the network socket between the server and client.</LI>
<LI><CODE class="sh_sourceCode">head</CODE> is an instance of Buffer, the first packet of the upgraded stream, this may be empty.</LI>
</UL>


<P>After this event is emitted, the request's socket will not have a <CODE class="sh_sourceCode">data</CODE>
event listener, meaning you will need to bind to it in order to handle data
sent to the server on that socket.</P>

<H3 id="event-clienterror-159">Event: 'clientError'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">(</SPAN>exception<SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{}</SPAN></CODE></P>

<P>If a client connection emits an 'error' event - it will forwarded here.</P>

<H3 id="server-listen-160">server.listen(port, hostname=null, callback=null)</H3>

<P>Begin accepting connections on the specified port and hostname.  If the
hostname is omitted, the server will accept connections directed to any
IPv4 address (<CODE class="sh_sourceCode">INADDR_ANY</CODE>).</P>

<P>To listen to a unix socket, supply a filename instead of port and hostname.</P>

<P>This function is asynchronous. The last parameter <CODE class="sh_sourceCode">callback</CODE> will be called
when the server has been bound to the port.</P>

<H3 id="server-listen-161">server.listen(path, callback=null)</H3>

<P>Start a UNIX socket server listening for connections on the given <CODE class="sh_sourceCode">path</CODE>.</P>

<P>This function is asynchronous. The last parameter <CODE class="sh_sourceCode">callback</CODE> will be called
when the server has been bound.</P>

<H3 id="server-setsecure-162">server.setSecure(credentials)</H3>

<P>Enables HTTPS support for the server, with the crypto module credentials specifying the private key and certificate of the server, and optionally the CA certificates for use in client authentication.</P>

<P>If the credentials hold one or more CA certificates, then the server will request for the client to submit a client certificate as part of the HTTPS connection handshake. The validity and content of this can be accessed via verifyPeer() and getPeerCertificate() from the server's request.connection.</P>

<H3 id="server-close-163">server.close()</H3>

<P>Stops the server from accepting new connections.</P>

<H2 id="http-serverrequest-164">http.ServerRequest</H2>

<P>This object is created internally by a HTTP server--not by
the user--and passed as the first argument to a <CODE class="sh_sourceCode"><SPAN class="sh_string">'request'</SPAN></CODE> listener.</P>

<P>This is an EventEmitter with the following events:</P>

<H3 id="event-data-165">Event: 'data'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">(</SPAN>chunk<SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{</SPAN> <SPAN class="sh_cbracket">}</SPAN></CODE></P>

<P>Emitted when a piece of the message body is received.</P>

<P>Example: A chunk of the body is given as the single
argument. The transfer-encoding has been decoded.  The
body chunk is a string.  The body encoding is set with
<CODE class="sh_sourceCode">request<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">setBodyEncoding</SPAN><SPAN class="sh_symbol">()</SPAN></CODE>.</P>

<H3 id="event-end-166">Event: 'end'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">()</SPAN> <SPAN class="sh_cbracket">{</SPAN> <SPAN class="sh_cbracket">}</SPAN></CODE></P>

<P>Emitted exactly once for each message. No arguments.  After
emitted no other events will be emitted on the request.</P>

<H3 id="request-method-167">request.method</H3>

<P>The request method as a string. Read only. Example:
<CODE class="sh_sourceCode"><SPAN class="sh_string">'GET'</SPAN></CODE>, <CODE class="sh_sourceCode"><SPAN class="sh_string">'DELETE'</SPAN></CODE>.</P>

<H3 id="request-url-168">request.url</H3>

<P>Request URL string. This contains only the URL that is
present in the actual HTTP request. If the request is:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_normal"><SPAN class="sh_normal">GET </SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">/</SPAN></SPAN>status<SPAN class="sh_symbol"><SPAN class="sh_symbol">?</SPAN></SPAN>name<SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN>ryan <SPAN class="sh_normal"><SPAN class="sh_normal">HTTP</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">/</SPAN></SPAN><SPAN class="sh_number"><SPAN class="sh_number">1.1</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">\</SPAN></SPAN>r<SPAN class="sh_symbol"><SPAN class="sh_symbol">\</SPAN></SPAN>n
Accept<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_normal"><SPAN class="sh_normal">text</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">/</SPAN></SPAN>plain<SPAN class="sh_symbol"><SPAN class="sh_symbol">\</SPAN></SPAN>r<SPAN class="sh_symbol"><SPAN class="sh_symbol">\</SPAN></SPAN>n
<SPAN class="sh_symbol"><SPAN class="sh_symbol">\</SPAN></SPAN>r<SPAN class="sh_symbol"><SPAN class="sh_symbol">\</SPAN></SPAN>n
</CODE></PRE>

<P>Then <CODE class="sh_sourceCode">request<SPAN class="sh_symbol">.</SPAN>url</CODE> will be:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_string"><SPAN class="sh_string">'/status?name=ryan'</SPAN></SPAN>
</CODE></PRE>

<P>If you would like to parse the URL into its parts, you can use
<CODE class="sh_sourceCode"><SPAN class="sh_function">require</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">'url'</SPAN><SPAN class="sh_symbol">).</SPAN><SPAN class="sh_function">parse</SPAN><SPAN class="sh_symbol">(</SPAN>request<SPAN class="sh_symbol">.</SPAN>url<SPAN class="sh_symbol">)</SPAN></CODE>.  Example:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">node<SPAN class="sh_symbol"><SPAN class="sh_symbol">&gt;</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'url'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">).</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">parse</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'/status?name=ryan'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN> href<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'/status?name=ryan'</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> search<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'?name=ryan'</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> query<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'name=ryan'</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> pathname<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'/status'</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN>
</CODE></PRE>

<P>If you would like to extract the params from the query string,
you can use the <CODE class="sh_sourceCode"><SPAN class="sh_function">require</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">'querystring'</SPAN><SPAN class="sh_symbol">).</SPAN>parse</CODE> function, or pass
<CODE class="sh_sourceCode"><SPAN class="sh_keyword">true</SPAN></CODE> as the second argument to <CODE class="sh_sourceCode"><SPAN class="sh_function">require</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">'url'</SPAN><SPAN class="sh_symbol">).</SPAN>parse</CODE>.  Example:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">node<SPAN class="sh_symbol"><SPAN class="sh_symbol">&gt;</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'url'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">).</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">parse</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'/status?name=ryan'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">true</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN> href<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'/status?name=ryan'</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> search<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'?name=ryan'</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> query<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN> name<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'ryan'</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> pathname<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'/status'</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN>
</CODE></PRE>

<H3 id="request-headers-169">request.headers</H3>

<P>Read only.</P>

<H3 id="request-httpversion-170">request.httpVersion</H3>

<P>The HTTP protocol version as a string. Read only. Examples:
<CODE class="sh_sourceCode"><SPAN class="sh_string">'1.1'</SPAN></CODE>, <CODE class="sh_sourceCode"><SPAN class="sh_string">'1.0'</SPAN></CODE>.
Also <CODE class="sh_sourceCode">request<SPAN class="sh_symbol">.</SPAN>httpVersionMajor</CODE> is the first integer and
<CODE class="sh_sourceCode">request<SPAN class="sh_symbol">.</SPAN>httpVersionMinor</CODE> is the second.</P>

<H3 id="request-setencoding-171">request.setEncoding(encoding='binary')</H3>

<P>Set the encoding for the request body. Either <CODE class="sh_sourceCode"><SPAN class="sh_string">'utf8'</SPAN></CODE> or <CODE class="sh_sourceCode"><SPAN class="sh_string">'binary'</SPAN></CODE>. Defaults
to <CODE class="sh_sourceCode"><SPAN class="sh_string">'binary'</SPAN></CODE>.</P>

<H3 id="request-pause-172">request.pause()</H3>

<P>Pauses request from emitting events.  Useful to throttle back an upload.</P>

<H3 id="request-resume-173">request.resume()</H3>

<P>Resumes a paused request.</P>

<H3 id="request-connection-174">request.connection</H3>

<P>The <CODE class="sh_sourceCode">net<SPAN class="sh_symbol">.</SPAN>Stream</CODE> object assocated with the connection.</P>

<P>With HTTPS support, use request.connection.verifyPeer() and
request.connection.getPeerCertificate() to obtain the client's
authentication details.</P>

<H2 id="http-serverresponse-175">http.ServerResponse</H2>

<P>This object is created internally by a HTTP server--not by the user. It is
passed as the second parameter to the <CODE class="sh_sourceCode"><SPAN class="sh_string">'request'</SPAN></CODE> event. It is a writable stream.</P>

<H3 id="response-writehead-176">response.writeHead(statusCode[, reasonPhrase] , headers)</H3>

<P>Sends a response header to the request. The status code is a 3-digit HTTP
status code, like <CODE class="sh_sourceCode"><SPAN class="sh_number">404</SPAN></CODE>. The last argument, <CODE class="sh_sourceCode">headers</CODE>, are the response headers.
Optionally one can give a human-readable <CODE class="sh_sourceCode">reasonPhrase</CODE> as the second
argument.</P>

<P>Пример:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> body <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'hello world'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>
response<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">writeHead</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_number"><SPAN class="sh_number">200</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  <SPAN class="sh_string"><SPAN class="sh_string">'Content-Length'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> body<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>length<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN>
  <SPAN class="sh_string"><SPAN class="sh_string">'Content-Type'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'text/plain'</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<P>This method must only be called once on a message and it must
be called before <CODE class="sh_sourceCode">response<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">end</SPAN><SPAN class="sh_symbol">()</SPAN></CODE> is called.</P>

<H3 id="response-write-177">response.write(chunk, encoding)</H3>

<P>This method must be called after <CODE class="sh_sourceCode">writeHead</CODE> was
called. It sends a chunk of the response body. This method may
be called multiple times to provide successive parts of the body.</P>

<P>If <CODE class="sh_sourceCode">chunk</CODE> is a string, the second parameter
specifies how to encode it into a byte stream. By default the
<CODE class="sh_sourceCode">encoding</CODE> is <CODE class="sh_sourceCode"><SPAN class="sh_string">'ascii'</SPAN></CODE>.</P>

<P><STRONG>Note</STRONG>: This is the raw HTTP body and has nothing to do with
higher-level multi-part body encodings that may be used.</P>

<P>The first time <CODE class="sh_sourceCode">response<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">write</SPAN><SPAN class="sh_symbol">()</SPAN></CODE> is called, it will send the buffered
header information and the first body to the client. The second time
<CODE class="sh_sourceCode">response<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">write</SPAN><SPAN class="sh_symbol">()</SPAN></CODE> is called, Node assumes you're going to be streaming
data, and sends that separately. That is, the response is buffered up to the
first chunk of body.</P>

<H3 id="response-end-178">response.end()</H3>

<P>This method signals to the server that all of the response headers and body
has been sent; that server should consider this message complete.
The method, <CODE class="sh_sourceCode">response<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">end</SPAN><SPAN class="sh_symbol">()</SPAN></CODE>, MUST be called on each
response.</P>

<H2 id="http-client-179">http.Client</H2>

<P>An HTTP client is constructed with a server address as its
argument, the returned handle is then used to issue one or more
requests.  Depending on the server connected to, the client might
pipeline the requests or reestablish the stream after each
stream. <EM>Currently the implementation does not pipeline requests.</EM></P>

<P>Example of connecting to <CODE class="sh_sourceCode">google<SPAN class="sh_symbol">.</SPAN>com</CODE>:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> http <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'http'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> google <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> http<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">createClient</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_number"><SPAN class="sh_number">80</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'www.google.com'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> request <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> google<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">request</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'GET'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'/'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN>
  <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'host'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'www.google.com'</SPAN></SPAN><SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
request<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">end</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">();</SPAN></SPAN>
request<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">addListener</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'response'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>response<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'STATUS: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> response<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>statusCode<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
  console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'HEADERS: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> JSON<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">stringify</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>response<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>headers<SPAN class="sh_symbol"><SPAN class="sh_symbol">));</SPAN></SPAN>
  response<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">setEncoding</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'utf8'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
  response<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">addListener</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'data'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>chunk<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
    console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'BODY: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> chunk<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
  <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<H3 id="event-upgrade-180">Событие: 'upgrade'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">(</SPAN>request<SPAN class="sh_symbol">,</SPAN> socket<SPAN class="sh_symbol">,</SPAN> head<SPAN class="sh_symbol">)</SPAN></CODE></P>

<P>Emitted each time a server responds to a request with an upgrade. If this event
isn't being listened for, clients receiving an upgrade header will have their
connections closed.</P>

<P>See the description of the <CODE class="sh_sourceCode">upgrade</CODE> event for <CODE class="sh_sourceCode">http<SPAN class="sh_symbol">.</SPAN>Server</CODE> for further details.</P>

<H3 id="http-createclient-181">http.createClient(port, host, secure, credentials)</H3>

<P>Constructs a new HTTP client. <CODE class="sh_sourceCode">port</CODE> and
<CODE class="sh_sourceCode">host</CODE> refer to the server to be connected to. A
stream is not established until a request is issued.</P>

<P><CODE class="sh_sourceCode">secure</CODE> is an optional boolean flag to enable https support and <CODE class="sh_sourceCode">credentials</CODE> is an optional credentials object from the crypto module, which may hold the client's private key, certificate, and a list of trusted CA certificates.</P>

<P>If the connection is secure, but no explicit CA certificates are passed in the credentials, then node.js will default to the publicly trusted list of CA certificates, as given in http://mxr.mozilla.org/mozilla/source/security/nss/lib/ckfw/builtins/certdata.txt</P>

<H3 id="client-request-182">client.request([method], path, [request_headers])</H3>

<P>Issues a request; if necessary establishes stream. Returns a <CODE class="sh_sourceCode">http<SPAN class="sh_symbol">.</SPAN>ClientRequest</CODE> instance.</P>

<P><CODE class="sh_sourceCode">method</CODE> is optional and defaults to 'GET' if omitted.</P>

<P><CODE class="sh_sourceCode">request_headers</CODE> is optional.
Additional request headers might be added internally
by Node. Returns a <CODE class="sh_sourceCode">ClientRequest</CODE> object.</P>

<P>Do remember to include the <CODE class="sh_sourceCode">Content<SPAN class="sh_symbol">-</SPAN>Length</CODE> header if you
plan on sending a body. If you plan on streaming the body, perhaps
set <CODE class="sh_sourceCode">Transfer<SPAN class="sh_symbol">-</SPAN>Encoding<SPAN class="sh_symbol">:</SPAN> chunked</CODE>.</P>

<P><EM>NOTE</EM>: the request is not complete. This method only sends the header of
the request. One needs to call <CODE class="sh_sourceCode">request<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">end</SPAN><SPAN class="sh_symbol">()</SPAN></CODE> to finalize the request and
retrieve the response.  (This sounds convoluted but it provides a chance for
the user to stream a body to the server with <CODE class="sh_sourceCode">request<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">write</SPAN><SPAN class="sh_symbol">()</SPAN></CODE>.)</P>

<H3 id="client-verifypeer-183">client.verifyPeer()</H3>

<P>Returns true or false depending on the validity of the server's certificate in the context of the defined or default list of trusted CA certificates.</P>

<H3 id="client-getpeercertificate-184">client.getPeerCertificate()</H3>

<P>Returns a JSON structure detailing the server's certificate, containing a dictionary with keys for the certificate 'subject', 'issuer', 'valid_from' and 'valid_to'</P>

<H2 id="http-clientrequest-185">http.ClientRequest</H2>

<P>This object is created internally and returned from the <CODE class="sh_sourceCode"><SPAN class="sh_function">request</SPAN><SPAN class="sh_symbol">()</SPAN></CODE> method
of a <CODE class="sh_sourceCode">http<SPAN class="sh_symbol">.</SPAN>Client</CODE>. It represents an <EM>in-progress</EM> request whose header has
already been sent.</P>

<P>To get the response, add a listener for <CODE class="sh_sourceCode"><SPAN class="sh_string">'response'</SPAN></CODE> to the request object.
<CODE class="sh_sourceCode"><SPAN class="sh_string">'response'</SPAN></CODE> will be emitted from the request object when the response
headers have been received.  The <CODE class="sh_sourceCode"><SPAN class="sh_string">'response'</SPAN></CODE> event is executed with one
argument which is an instance of <CODE class="sh_sourceCode">http<SPAN class="sh_symbol">.</SPAN>ClientResponse</CODE>.</P>

<P>During the <CODE class="sh_sourceCode"><SPAN class="sh_string">'response'</SPAN></CODE> event, one can add listeners to the
response object; particularly to listen for the <CODE class="sh_sourceCode"><SPAN class="sh_string">'data'</SPAN></CODE> event. Note that
the <CODE class="sh_sourceCode"><SPAN class="sh_string">'response'</SPAN></CODE> event is called before any part of the response body is received,
so there is no need to worry about racing to catch the first part of the
body. As long as a listener for <CODE class="sh_sourceCode"><SPAN class="sh_string">'data'</SPAN></CODE> is added during the <CODE class="sh_sourceCode"><SPAN class="sh_string">'response'</SPAN></CODE>
event, the entire body will be caught.</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_comment"><SPAN class="sh_comment">// Good</SPAN></SPAN>
request<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">addListener</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'response'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>response<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  response<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">addListener</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'data'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>chunk<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
    console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'BODY: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> chunk<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
  <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

<SPAN class="sh_comment"><SPAN class="sh_comment">// Bad - misses all or part of the body</SPAN></SPAN>
request<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">addListener</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'response'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>response<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  <SPAN class="sh_function"><SPAN class="sh_function">setTimeout</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">()</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
    response<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">addListener</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'data'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>chunk<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
      console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'BODY: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> chunk<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
    <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
  <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">10</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<P>This is a writable stream.</P>

<P>This is an <CODE class="sh_sourceCode">EventEmitter</CODE> with the following events:</P>

<H3 id="event-response-186">Event 'response'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">(</SPAN>response<SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{</SPAN> <SPAN class="sh_cbracket">}</SPAN></CODE></P>

<P>Emitted when a response is received to this request. This event is emitted only once. The
<CODE class="sh_sourceCode">response</CODE> argument will be an instance of <CODE class="sh_sourceCode">http<SPAN class="sh_symbol">.</SPAN>ClientResponse</CODE>.</P>

<H3 id="request-write-187">request.write(chunk, encoding='ascii')</H3>

<P>Sends a chunk of the body.  By calling this method
many times, the user can stream a request body to a
server--in that case it is suggested to use the
<CODE class="sh_sourceCode"><SPAN class="sh_symbol">[</SPAN><SPAN class="sh_string">'Transfer-Encoding'</SPAN><SPAN class="sh_symbol">,</SPAN> <SPAN class="sh_string">'chunked'</SPAN><SPAN class="sh_symbol">]</SPAN></CODE> header line when
creating the request.</P>

<P>The <CODE class="sh_sourceCode">chunk</CODE> argument should be an array of integers
or a string.</P>

<P>The <CODE class="sh_sourceCode">encoding</CODE> argument is optional and only
applies when <CODE class="sh_sourceCode">chunk</CODE> is a string. The encoding
argument should be either <CODE class="sh_sourceCode"><SPAN class="sh_string">'utf8'</SPAN></CODE> or
<CODE class="sh_sourceCode"><SPAN class="sh_string">'ascii'</SPAN></CODE>. By default the body uses ASCII encoding,
as it is faster.</P>

<H3 id="request-end-188">request.end()</H3>

<P>Finishes sending the request. If any parts of the body are
unsent, it will flush them to the stream. If the request is
chunked, this will send the terminating <CODE class="sh_sourceCode"><SPAN class="sh_string">'0</SPAN><SPAN class="sh_specialchar">\r\n\r\n</SPAN><SPAN class="sh_string">'</SPAN></CODE>.</P>

<H2 id="http-clientresponse-189">http.ClientResponse</H2>

<P>This object is created when making a request with <CODE class="sh_sourceCode">http<SPAN class="sh_symbol">.</SPAN>Client</CODE>. It is
passed to the <CODE class="sh_sourceCode"><SPAN class="sh_string">'response'</SPAN></CODE> event of the request object.</P>

<P>The response implements the <STRONG>readable stream</STRONG> interface.</P>

<H3 id="event-data-190">Event: 'data'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">(</SPAN>chunk<SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{}</SPAN></CODE></P>

<P>Emitted when a piece of the message body is received.</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">Example<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> A chunk of the body is given as the single
argument<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN> The transfer<SPAN class="sh_symbol"><SPAN class="sh_symbol">-</SPAN></SPAN>encoding has been decoded<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>  The
body chunk a <SPAN class="sh_predef_func"><SPAN class="sh_predef_func">String</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>  The body encoding is set <SPAN class="sh_keyword"><SPAN class="sh_keyword">with</SPAN></SPAN>
`response<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">setBodyEncoding</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">()</SPAN></SPAN>`<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>
</CODE></PRE>

<H3 id="event-end-191">Event: 'end'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">()</SPAN> <SPAN class="sh_cbracket">{}</SPAN></CODE></P>

<P>Emitted exactly once for each message. No arguments. After
emitted no other events will be emitted on the response.</P>

<H3 id="response-statuscode-192">response.statusCode</H3>

<P>The 3-digit HTTP response status code. E.G. <CODE class="sh_sourceCode"><SPAN class="sh_number">404</SPAN></CODE>.</P>

<H3 id="response-httpversion-193">response.httpVersion</H3>

<P>The HTTP version of the connected-to server. Probably either
<CODE class="sh_sourceCode"><SPAN class="sh_string">'1.1'</SPAN></CODE> or <CODE class="sh_sourceCode"><SPAN class="sh_string">'1.0'</SPAN></CODE>.
Also <CODE class="sh_sourceCode">response<SPAN class="sh_symbol">.</SPAN>httpVersionMajor</CODE> is the first integer and
<CODE class="sh_sourceCode">response<SPAN class="sh_symbol">.</SPAN>httpVersionMinor</CODE> is the second.</P>

<H3 id="response-headers-194">response.headers</H3>

<P>The response headers.</P>

<H3 id="response-setencoding-195">response.setEncoding(encoding)</H3>

<P>Set the encoding for the response body. Either <CODE class="sh_sourceCode"><SPAN class="sh_string">'utf8'</SPAN></CODE> or <CODE class="sh_sourceCode"><SPAN class="sh_string">'binary'</SPAN></CODE>.
Defaults to <CODE class="sh_sourceCode"><SPAN class="sh_string">'binary'</SPAN></CODE>.</P>

<H3 id="response-pause-196">response.pause()</H3>

<P>Pauses response from emitting events.  Useful to throttle back a download.</P>

<H3 id="response-resume-197">response.resume()</H3>

<P>Resumes a paused response.</P>

<H3 id="response-client-198">response.client</H3>

<P>A reference to the <CODE class="sh_sourceCode">http<SPAN class="sh_symbol">.</SPAN>Client</CODE> that this response belongs to.</P>

<H2 id="net-server-199">net.Server</H2>

<P>This class is used to create a TCP or UNIX server.</P>

<P>Here is an example of a echo server which listens for connections
on port 8124:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> net <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'net'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> server <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> net<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">createServer</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>stream<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  stream<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">setEncoding</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'utf8'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
  stream<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">addListener</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'connect'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">()</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
    stream<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">write</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'hello</SPAN></SPAN><SPAN class="sh_specialchar"><SPAN class="sh_specialchar">\r\n</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
  <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
  stream<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">addListener</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'data'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>data<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
    stream<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">write</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>data<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
  <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
  stream<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">addListener</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'end'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">()</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
    stream<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">write</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'goodbye</SPAN></SPAN><SPAN class="sh_specialchar"><SPAN class="sh_specialchar">\r\n</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
    stream<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">end</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">();</SPAN></SPAN>
  <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
server<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">listen</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_number"><SPAN class="sh_number">8124</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'localhost'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<P>To listen on the socket <CODE class="sh_sourceCode"><SPAN class="sh_string">'/tmp/echo.sock'</SPAN></CODE>, the last line would just be
changed to</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">server<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">listen</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'/tmp/echo.sock'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<P>This is an EventEmitter with the following events:</P>

<H3 id="event-connection-200">Event: 'connection'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">(</SPAN>stream<SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{}</SPAN></CODE></P>

<P>Emitted when a new connection is made. <CODE class="sh_sourceCode">stream</CODE> is an instance of
<CODE class="sh_sourceCode">net<SPAN class="sh_symbol">.</SPAN>Stream</CODE>.</P>

<H3 id="event-close-201">Event: 'close'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">()</SPAN> <SPAN class="sh_cbracket">{}</SPAN></CODE></P>

<P>Emitted when the server closes.</P>

<H3 id="net-createserver-202">net.createServer(connectionListener)</H3>

<P>Creates a new TCP server. The <CODE class="sh_sourceCode">connection_listener</CODE> argument is
automatically set as a listener for the <CODE class="sh_sourceCode"><SPAN class="sh_string">'connection'</SPAN></CODE> event.</P>

<H3 id="server-listen-203">server.listen(port, host=null, callback=null)</H3>

<P>Begin accepting connections on the specified <CODE class="sh_sourceCode">port</CODE> and <CODE class="sh_sourceCode">host</CODE>.  If the
<CODE class="sh_sourceCode">host</CODE> is omitted, the server will accept connections directed to any
IPv4 address (<CODE class="sh_sourceCode">INADDR_ANY</CODE>).</P>

<P>This function is asynchronous. The last parameter <CODE class="sh_sourceCode">callback</CODE> will be called
when the server has been bound.</P>

<H3 id="server-listen-204">server.listen(path, callback=null)</H3>

<P>Start a UNIX socket server listening for connections on the given <CODE class="sh_sourceCode">path</CODE>.</P>

<P>This function is asynchronous. The last parameter <CODE class="sh_sourceCode">callback</CODE> will be called
when the server has been bound.</P>

<H3 id="server-listenfd-205">server.listenFD(fd)</H3>

<P>Start a server listening for connections on the given file descriptor.</P>

<P>This file descriptor must have already had the <CODE class="sh_sourceCode"><SPAN class="sh_function">bind</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_number">2</SPAN><SPAN class="sh_symbol">)</SPAN></CODE> and <CODE class="sh_sourceCode"><SPAN class="sh_function">listen</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_number">2</SPAN><SPAN class="sh_symbol">)</SPAN></CODE> system
calls invoked on it.</P>

<H3 id="server-close-206">server.close()</H3>

<P>Stops the server from accepting new connections. This function is
asynchronous, the server is finally closed when the server emits a <CODE class="sh_sourceCode"><SPAN class="sh_string">'close'</SPAN></CODE>
event.</P>

<H2 id="net-stream-207">net.Stream</H2>

<P>This object is an abstraction of of a TCP or UNIX socket.  <CODE class="sh_sourceCode">net<SPAN class="sh_symbol">.</SPAN>Stream</CODE>
instance implement a duplex stream interface.  They can be created by the
user and used as a client (with <CODE class="sh_sourceCode"><SPAN class="sh_function">connect</SPAN><SPAN class="sh_symbol">()</SPAN></CODE>) or they can be created by Node
and passed to the user through the <CODE class="sh_sourceCode"><SPAN class="sh_string">'connection'</SPAN></CODE> event of a server.</P>

<P><CODE class="sh_sourceCode">net<SPAN class="sh_symbol">.</SPAN>Stream</CODE> instances are an EventEmitters with the following events:</P>

<H3 id="event-connect-208">Event: 'connect'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">()</SPAN> <SPAN class="sh_cbracket">{</SPAN> <SPAN class="sh_cbracket">}</SPAN></CODE></P>

<P>Emitted when a stream connection successfully is established.
See <CODE class="sh_sourceCode"><SPAN class="sh_function">connect</SPAN><SPAN class="sh_symbol">()</SPAN></CODE>.</P>

<H3 id="event-secure-209">Event: 'secure'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">()</SPAN> <SPAN class="sh_cbracket">{</SPAN> <SPAN class="sh_cbracket">}</SPAN></CODE></P>

<P>Emitted when a stream connection successfully establishes a HTTPS handshake with its peer.</P>

<H3 id="event-data-210">Event: 'data'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">(</SPAN>data<SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{</SPAN> <SPAN class="sh_cbracket">}</SPAN></CODE></P>

<P>Emitted when data is received.  The argument <CODE class="sh_sourceCode">data</CODE> will be a <CODE class="sh_sourceCode">Buffer</CODE> or
<CODE class="sh_sourceCode"><SPAN class="sh_predef_func">String</SPAN></CODE>.  Encoding of data is set by <CODE class="sh_sourceCode">stream<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">setEncoding</SPAN><SPAN class="sh_symbol">()</SPAN></CODE>.
(See the section on Readable Streams for more infromation.)</P>

<H3 id="event-end-211">Event: 'end'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">()</SPAN> <SPAN class="sh_cbracket">{</SPAN> <SPAN class="sh_cbracket">}</SPAN></CODE></P>

<P>Emitted when the other end of the stream sends a FIN packet. After this is
emitted the <CODE class="sh_sourceCode">readyState</CODE> will be <CODE class="sh_sourceCode"><SPAN class="sh_string">'writeOnly'</SPAN></CODE>. One should probably just
call <CODE class="sh_sourceCode">stream<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">end</SPAN><SPAN class="sh_symbol">()</SPAN></CODE> when this event is emitted.</P>

<H3 id="event-timeout-212">Event: 'timeout'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">()</SPAN> <SPAN class="sh_cbracket">{</SPAN> <SPAN class="sh_cbracket">}</SPAN></CODE></P>

<P>Emitted if the stream times out from inactivity. This is only to notify that
the stream has been idle. The user must manually close the connection.</P>

<P>See also: <CODE class="sh_sourceCode">stream<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">setTimeout</SPAN><SPAN class="sh_symbol">()</SPAN></CODE></P>

<H3 id="event-drain-213">Event: 'drain'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">()</SPAN> <SPAN class="sh_cbracket">{</SPAN> <SPAN class="sh_cbracket">}</SPAN></CODE></P>

<P>Emitted when the write buffer becomes empty. Can be used to throttle uploads.</P>

<H3 id="event-error-214">Event: 'error'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">(</SPAN>exception<SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{</SPAN> <SPAN class="sh_cbracket">}</SPAN></CODE></P>

<P>Emitted when an error occurs.  The <CODE class="sh_sourceCode"><SPAN class="sh_string">'close'</SPAN></CODE> event will be called directly
following this event.</P>

<H3 id="event-close-215">Event: 'close'</H3>

<P><CODE class="sh_sourceCode"><SPAN class="sh_keyword">function</SPAN> <SPAN class="sh_symbol">()</SPAN> <SPAN class="sh_cbracket">{</SPAN> <SPAN class="sh_cbracket">}</SPAN></CODE></P>

<P>Emitted once the stream is fully closed. The argument <CODE class="sh_sourceCode">had_error</CODE> is a boolean which says if
the stream was closed due to a transmission
error.</P>

<H3 id="net-createconnection-216">net.createConnection(port, host='127.0.0.1')</H3>

<P>Construct a new stream object and opens a stream to the specified <CODE class="sh_sourceCode">port</CODE>
and <CODE class="sh_sourceCode">host</CODE>. If the second parameter is omitted, localhost is assumed.</P>

<P>When the stream is established the <CODE class="sh_sourceCode"><SPAN class="sh_string">'connect'</SPAN></CODE> event will be emitted.</P>

<H3 id="stream-connect-217">stream.connect(port, host='127.0.0.1')</H3>

<P>Opens a stream to the specified <CODE class="sh_sourceCode">port</CODE> and <CODE class="sh_sourceCode">host</CODE>. <CODE class="sh_sourceCode"><SPAN class="sh_function">createConnection</SPAN><SPAN class="sh_symbol">()</SPAN></CODE>
also opens a stream; normally this method is not needed. Use this only if
a stream is closed and you want to reuse the object to connect to another
server.</P>

<P>This function is asynchronous. When the <CODE class="sh_sourceCode"><SPAN class="sh_string">'connect'</SPAN></CODE> event is emitted the
stream is established. If there is a problem connecting, the <CODE class="sh_sourceCode"><SPAN class="sh_string">'connect'</SPAN></CODE>
event will not be emitted, the <CODE class="sh_sourceCode"><SPAN class="sh_string">'error'</SPAN></CODE> event will be emitted with
the exception.</P>

<H3 id="stream-remoteaddress-218">stream.remoteAddress</H3>

<P>The string representation of the remote IP address. For example,
<CODE class="sh_sourceCode"><SPAN class="sh_string">'74.125.127.100'</SPAN></CODE> or <CODE class="sh_sourceCode"><SPAN class="sh_string">'2001:4860:a005::68'</SPAN></CODE>.</P>

<P>This member is only present in server-side connections.</P>

<H3 id="stream-readystate-219">stream.readyState</H3>

<P>Either <CODE class="sh_sourceCode"><SPAN class="sh_string">'closed'</SPAN></CODE>, <CODE class="sh_sourceCode"><SPAN class="sh_string">'open'</SPAN></CODE>, <CODE class="sh_sourceCode"><SPAN class="sh_string">'opening'</SPAN></CODE>, <CODE class="sh_sourceCode"><SPAN class="sh_string">'readOnly'</SPAN></CODE>, or <CODE class="sh_sourceCode"><SPAN class="sh_string">'writeOnly'</SPAN></CODE>.</P>

<H3 id="stream-setencoding-220">stream.setEncoding(encoding)</H3>

<P>Sets the encoding (either <CODE class="sh_sourceCode"><SPAN class="sh_string">'ascii'</SPAN></CODE>, <CODE class="sh_sourceCode"><SPAN class="sh_string">'utf8'</SPAN></CODE>, or <CODE class="sh_sourceCode"><SPAN class="sh_string">'binary'</SPAN></CODE>) for data that is
received.</P>

<H3 id="stream-setsecure-221">stream.setSecure(credentials)</H3>

<P>Enables HTTPS support for the stream, with the crypto module credentials specifying the private key and certificate of the stream, and optionally the CA certificates for use in peer authentication.</P>

<P>If the credentials hold one ore more CA certificates, then the stream will request for the peer to submit a client certificate as part of the HTTPS connection handshake. The validity and content of this can be accessed via verifyPeer() and getPeerCertificate().</P>

<H3 id="stream-verifypeer-222">stream.verifyPeer()</H3>

<P>Returns true or false depending on the validity of the peers's certificate in the context of the defined or default list of trusted CA certificates.</P>

<H3 id="stream-getpeercertificate-223">stream.getPeerCertificate()</H3>

<P>Returns a JSON structure detailing the peer's certificate, containing a dictionary with keys for the certificate 'subject', 'issuer', 'valid_from' and 'valid_to'</P>

<H3 id="stream-write-224">stream.write(data, encoding='ascii')</H3>

<P>Sends data on the stream. The second parameter specifies the encoding in
the case of a string--it defaults to ASCII because encoding to UTF8 is rather
slow.</P>

<P>Returns <CODE class="sh_sourceCode"><SPAN class="sh_keyword">true</SPAN></CODE> if the entire data was flushed successfully to the kernel
buffer. Returns <CODE class="sh_sourceCode"><SPAN class="sh_keyword">false</SPAN></CODE> if all or part of the data was queued in user memory.
<CODE class="sh_sourceCode"><SPAN class="sh_string">'drain'</SPAN></CODE> will be emitted when the buffer is again free.</P>

<H3 id="stream-end-225">stream.end()</H3>

<P>Half-closes the stream. I.E., it sends a FIN packet. It is possible the
server will still send some data. After calling this <CODE class="sh_sourceCode">readyState</CODE> will be
<CODE class="sh_sourceCode"><SPAN class="sh_string">'readOnly'</SPAN></CODE>.</P>

<H3 id="stream-destroy-226">stream.destroy()</H3>

<P>Ensures that no more I/O activity happens on this stream. Only necessary in
case of errors (parse error or so).</P>

<H3 id="stream-pause-227">stream.pause()</H3>

<P>Pauses the reading of data. That is, <CODE class="sh_sourceCode"><SPAN class="sh_string">'data'</SPAN></CODE> events will not be emitted.
Useful to throttle back an upload.</P>

<H3 id="stream-resume-228">stream.resume()</H3>

<P>Resumes reading after a call to <CODE class="sh_sourceCode"><SPAN class="sh_function">pause</SPAN><SPAN class="sh_symbol">()</SPAN></CODE>.</P>

<H3 id="stream-settimeout-229">stream.setTimeout(timeout)</H3>

<P>Sets the stream to timeout after <CODE class="sh_sourceCode">timeout</CODE> milliseconds of inactivity on
the stream. By default <CODE class="sh_sourceCode">net<SPAN class="sh_symbol">.</SPAN>Stream</CODE> do not have a timeout.</P>

<P>When an idle timeout is triggered the stream will receive a <CODE class="sh_sourceCode"><SPAN class="sh_string">'timeout'</SPAN></CODE>
event but the connection will not be severed. The user must manually <CODE class="sh_sourceCode"><SPAN class="sh_function">end</SPAN><SPAN class="sh_symbol">()</SPAN></CODE>
or <CODE class="sh_sourceCode"><SPAN class="sh_function">destroy</SPAN><SPAN class="sh_symbol">()</SPAN></CODE> the stream.</P>

<P>If <CODE class="sh_sourceCode">timeout</CODE> is 0, then the existing idle timeout is disabled.</P>

<H3 id="stream-setnodelay-230">stream.setNoDelay(noDelay=true)</H3>

<P>Disables the Nagle algorithm. By default TCP connections use the Nagle
algorithm, they buffer data before sending it off. Setting <CODE class="sh_sourceCode">noDelay</CODE> will
immediately fire off data each time <CODE class="sh_sourceCode">stream<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">write</SPAN><SPAN class="sh_symbol">()</SPAN></CODE> is called.</P>

<H3 id="stream-setkeepalive-231">stream.setKeepAlive(enable=false, initialDelay)</H3>

<P>Enable/disable keep-alive functionality, and optionally set the initial
delay before the first keepalive probe is sent on an idle stream.
Set <CODE class="sh_sourceCode">initialDelay</CODE> (in milliseconds) to set the delay between the last
data packet received and the first keepalive probe. Setting 0 for
initialDelay will leave the value unchanged from the default
(or previous) setting.</P>

<H2 id="crypto-232">Crypto</H2>

<P>Use <CODE class="sh_sourceCode"><SPAN class="sh_function">require</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">'crypto'</SPAN><SPAN class="sh_symbol">)</SPAN></CODE> to access this module.</P>

<P>The crypto module requires OpenSSL to be available on the underlying platform. It offers a way of encapsulating secure credentials to be used as part of a secure HTTPS net or http connection.</P>

<P>It also offers a set of wrappers for OpenSSL's hash, hmac, cipher, decipher, sign and verify methods.</P>

<H3 id="crypto-createcredentials-233">crypto.createCredentials(details)</H3>

<P>Creates a credentials object, with the optional details being a dictionary with keys:</P>

<P><CODE class="sh_sourceCode">key</CODE> : a string holding the PEM encoded private key</P>

<P><CODE class="sh_sourceCode">cert</CODE> : a string holding the PEM encoded certificate</P>

<P><CODE class="sh_sourceCode">ca</CODE> : either a string or list of strings of PEM encoded CA certificates to trust.</P>

<P>If no 'ca' details are given, then node.js will use the default publicly trusted list of CAs as given in
http://mxr.mozilla.org/mozilla/source/security/nss/lib/ckfw/builtins/certdata.txt</P>

<H3 id="crypto-createhash-234">crypto.createHash(algorithm)</H3>

<P>Creates and returns a hash object, a cryptographic hash with the given algorithm which can be used to generate hash digests.</P>

<P><CODE class="sh_sourceCode">algorithm</CODE> is dependent on the available algorithms supported by the version of OpenSSL on the platform. Examples are sha1, md5, sha256, sha512, etc. On recent releases, <CODE class="sh_sourceCode">openssl list<SPAN class="sh_symbol">-</SPAN>message<SPAN class="sh_symbol">-</SPAN>digest<SPAN class="sh_symbol">-</SPAN>algorithms</CODE> will display the available digest algorithms.</P>

<H3 id="hash-update-235">hash.update(data)</H3>

<P>Updates the hash content with the given <CODE class="sh_sourceCode">data</CODE>. This can be called many times with new data as it is streamed.</P>

<H3 id="hash-digest-236">hash.digest(encoding)</H3>

<P>Calculates the digest of all of the passed data to be hashed. The <CODE class="sh_sourceCode">encoding</CODE> can be 'hex', 'binary' or 'base64'.</P>

<H3 id="crypto-createhmac-237">crypto.createHmac(algorithm, key)</H3>

<P>Creates and returns a hmac object, a cryptographic hmac with the given algorithm and key.</P>

<P><CODE class="sh_sourceCode">algorithm</CODE> is dependent on the available algorithms supported by OpenSSL - see createHash above.
<CODE class="sh_sourceCode">key</CODE> is the hmac key to be used.</P>

<H3 id="hmac-update-238">hmac.update(data)</H3>

<P>Update the hmac content with the given <CODE class="sh_sourceCode">data</CODE>. This can be called many times with new data as it is streamed.</P>

<H3 id="hmac-digest-239">hmac.digest(encoding)</H3>

<P>Calculates the digest of all of the passed data to the hmac. The <CODE class="sh_sourceCode">encoding</CODE> can be 'hex', 'binary' or 'base64'.</P>

<H3 id="crypto-createcipher-240">crypto.createCipher(algorithm, key)</H3>

<P>Creates and returns a cipher object, with the given algorithm and key.</P>

<P><CODE class="sh_sourceCode">algorithm</CODE> is dependent on OpenSSL, examples are aes192, etc. On recent releases, <CODE class="sh_sourceCode">openssl list<SPAN class="sh_symbol">-</SPAN>cipher<SPAN class="sh_symbol">-</SPAN>algorithms</CODE> will display the available cipher algorithms.</P>

<H3 id="cipher-update-241">cipher.update(data, input_encoding, output_encoding)</H3>

<P>Updates the cipher with <CODE class="sh_sourceCode">data</CODE>, the encoding of which is given in <CODE class="sh_sourceCode">input_encoding</CODE> and can be 'utf8', 'ascii' or 'binary'. The <CODE class="sh_sourceCode">output_encoding</CODE> specifies the output format of the enciphered data, and can be 'binary', 'base64'  or 'hex'.</P>

<P>Returns the enciphered contents, and can be called many times with new data as it is streamed.</P>

<H3 id="cipher-final-242">cipher.final(output_encoding)</H3>

<P>Returns any remaining enciphered contents, with <CODE class="sh_sourceCode">output_encoding</CODE> as update above.</P>

<H3 id="crypto-createdecipher-243">crypto.createDecipher(algorithm, key)</H3>

<P>Creates and returns a decipher object, with the given algorithm and key. This is the mirror of the cipher object above.</P>

<H3 id="decipher-update-244">decipher.update(data, input_encoding, output_encoding)</H3>

<P>Updates the decipher with <CODE class="sh_sourceCode">data</CODE>, which is encoded in 'binary', 'base64' or 'hex'. The <CODE class="sh_sourceCode">output_decoding</CODE> specifies in what format to return the deciphered plaintext - either 'binary', 'ascii' or 'utf8'.</P>

<H3 id="decipher-final-245">decipher.final(output_encoding)</H3>

<P>Returns any remaining plaintext which is deciphered, with `output_encoding' as update above.</P>

<H3 id="crypto-createsign-246">crypto.createSign(algorithm)</H3>

<P>Creates and returns a signing object, with the given algorithm. On recent OpenSSL releases, <CODE class="sh_sourceCode">openssl list<SPAN class="sh_symbol">-</SPAN><SPAN class="sh_keyword">public</SPAN><SPAN class="sh_symbol">-</SPAN>key<SPAN class="sh_symbol">-</SPAN>algorithms</CODE> will display the available signing algorithms. Examples are 'RSA-SHA256'.</P>

<H3 id="signer-update-247">signer.update(data)</H3>

<P>Updates the signer object with data. This can be called many times with new data as it is streamed.</P>

<H3 id="signer-sign-248">signer.sign(private_key, output_format)</H3>

<P>Calculates the signature on all the updated data passed through the signer. <CODE class="sh_sourceCode">private_key</CODE> is a string containing the PEM encoded private key for signing.</P>

<P>Returns the signature in <CODE class="sh_sourceCode">output_format</CODE> which can be 'binary', 'hex' or 'base64'</P>

<H3 id="crypto-createverify-249">crypto.createVerify(algorithm)</H3>

<P>Creates and returns a verification object, with the given algorithm. This is the mirror of the signing object above.</P>

<H3 id="verifier-update-250">verifier.update(data)</H3>

<P>Updates the verifyer object with data. This can be called many times with new data as it is streamed.</P>

<H3 id="verifier-verify-251">verifier.verify(public_key, signature, signature_format)</H3>

<P>Verifies the signed data by using the <CODE class="sh_sourceCode">public_key</CODE> which is a string containing the PEM encoded public key, and <CODE class="sh_sourceCode">signature</CODE>, which is the previously calculates signature for the data, in the <CODE class="sh_sourceCode">signature_format</CODE> which can be 'binary', 'hex' or 'base64'.</P>

<P>Returns true or false depending on the validity of the signature for the data and public key.</P>

<H2 id="dns-252">DNS</H2>

<P>Use <CODE class="sh_sourceCode"><SPAN class="sh_function">require</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">'dns'</SPAN><SPAN class="sh_symbol">)</SPAN></CODE> to access this module.</P>

<P>Here is an example which resolves <CODE class="sh_sourceCode"><SPAN class="sh_string">'www.google.com'</SPAN></CODE> then reverse
resolves the IP addresses which are returned.</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> dns <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'dns'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

dns<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">resolve4</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'www.google.com'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>err<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> addresses<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  <SPAN class="sh_keyword"><SPAN class="sh_keyword">if</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>err<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">throw</SPAN></SPAN> err<SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>

  console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'addresses: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> JSON<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">stringify</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>addresses<SPAN class="sh_symbol"><SPAN class="sh_symbol">));</SPAN></SPAN>

  <SPAN class="sh_keyword"><SPAN class="sh_keyword">for</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> i <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">0</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN> i <SPAN class="sh_symbol"><SPAN class="sh_symbol">&lt;</SPAN></SPAN> addresses<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>length<SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN> i<SPAN class="sh_symbol"><SPAN class="sh_symbol">++)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
    <SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> a <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> addresses<SPAN class="sh_symbol"><SPAN class="sh_symbol">[</SPAN></SPAN>i<SPAN class="sh_symbol"><SPAN class="sh_symbol">];</SPAN></SPAN>
    dns<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">reverse</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>a<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>err<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> domains<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
      <SPAN class="sh_keyword"><SPAN class="sh_keyword">if</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>err<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
        console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'reverse for '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> a <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">' failed: '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN>
          err<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>message<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
      <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">else</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
        console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'reverse for '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> a <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">': '</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN>
          JSON<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">stringify</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>domains<SPAN class="sh_symbol"><SPAN class="sh_symbol">));</SPAN></SPAN>
      <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN>
    <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
  <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<H3 id="dns-resolve-253">dns.resolve(domain, rrtype = 'A', callback)</H3>

<P>Resolves a domain (e.g. <CODE class="sh_sourceCode"><SPAN class="sh_string">'google.com'</SPAN></CODE>) into an array of the record types
specified by rrtype. Valid rrtypes are <CODE class="sh_sourceCode">A</CODE> (IPV4 addresses), <CODE class="sh_sourceCode">AAAA</CODE> (IPV6
addresses), <CODE class="sh_sourceCode">MX</CODE> (mail exchange records), <CODE class="sh_sourceCode">TXT</CODE> (text records), <CODE class="sh_sourceCode">SRV</CODE> (SRV
records), and <CODE class="sh_sourceCode">PTR</CODE> (used for reverse IP lookups).</P>

<P>The callback has arguments <CODE class="sh_sourceCode"><SPAN class="sh_symbol">(</SPAN>err<SPAN class="sh_symbol">,</SPAN> addresses<SPAN class="sh_symbol">)</SPAN></CODE>.  The type of each item
in <CODE class="sh_sourceCode">addresses</CODE> is determined by the record type, and described in the
documentation for the corresponding lookup methods below.</P>

<P>On error, <CODE class="sh_sourceCode">err</CODE> would be an instanceof <CODE class="sh_sourceCode"><SPAN class="sh_predef_func">Error</SPAN></CODE> object, where <CODE class="sh_sourceCode">err<SPAN class="sh_symbol">.</SPAN>errno</CODE> is
one of the error codes listed below and <CODE class="sh_sourceCode">err<SPAN class="sh_symbol">.</SPAN>message</CODE> is a string describing
the error in English.</P>

<H3 id="dns-resolve4-254">dns.resolve4(domain, callback)</H3>

<P>The same as <CODE class="sh_sourceCode">dns<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">resolve</SPAN><SPAN class="sh_symbol">()</SPAN></CODE>, but only for IPv4 queries (<CODE class="sh_sourceCode">A</CODE> records).
<CODE class="sh_sourceCode">addresses</CODE> is an array of IPv4 addresses (e.g.<BR>
<CODE class="sh_sourceCode"><SPAN class="sh_symbol">[</SPAN><SPAN class="sh_string">'74.125.79.104'</SPAN><SPAN class="sh_symbol">,</SPAN> <SPAN class="sh_string">'74.125.79.105'</SPAN><SPAN class="sh_symbol">,</SPAN> <SPAN class="sh_string">'74.125.79.106'</SPAN><SPAN class="sh_symbol">]</SPAN></CODE>).</P>

<H3 id="dns-resolve6-255">dns.resolve6(domain, callback)</H3>

<P>The same as <CODE class="sh_sourceCode">dns<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">resolve4</SPAN><SPAN class="sh_symbol">()</SPAN></CODE> except for IPv6 queries (an <CODE class="sh_sourceCode">AAAA</CODE> query).</P>

<H3 id="dns-resolvemx-256">dns.resolveMx(domain, callback)</H3>

<P>The same as <CODE class="sh_sourceCode">dns<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">resolve</SPAN><SPAN class="sh_symbol">()</SPAN></CODE>, but only for mail exchange queries (<CODE class="sh_sourceCode">MX</CODE> records).</P>

<P><CODE class="sh_sourceCode">addresses</CODE> is an array of MX records, each with a priority and an exchange
attribute (e.g. <CODE class="sh_sourceCode"><SPAN class="sh_symbol">[</SPAN><SPAN class="sh_cbracket">{</SPAN><SPAN class="sh_string">'priority'</SPAN><SPAN class="sh_symbol">:</SPAN> <SPAN class="sh_number">10</SPAN><SPAN class="sh_symbol">,</SPAN> <SPAN class="sh_string">'exchange'</SPAN><SPAN class="sh_symbol">:</SPAN> <SPAN class="sh_string">'mx.example.com'</SPAN><SPAN class="sh_cbracket">}</SPAN><SPAN class="sh_symbol">,...]</SPAN></CODE>).</P>

<H3 id="dns-resolvetxt-257">dns.resolveTxt(domain, callback)</H3>

<P>The same as <CODE class="sh_sourceCode">dns<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">resolve</SPAN><SPAN class="sh_symbol">()</SPAN></CODE>, but only for text queries (<CODE class="sh_sourceCode">TXT</CODE> records).
<CODE class="sh_sourceCode">addresses</CODE> is an array of the text records available for <CODE class="sh_sourceCode">domain</CODE> (e.g.,
<CODE class="sh_sourceCode"><SPAN class="sh_symbol">[</SPAN><SPAN class="sh_string">'v=spf1 ip4:0.0.0.0 ~all'</SPAN><SPAN class="sh_symbol">]</SPAN></CODE>).</P>

<H3 id="dns-resolvesrv-258">dns.resolveSrv(domain, callback)</H3>

<P>The same as <CODE class="sh_sourceCode">dns<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">resolve</SPAN><SPAN class="sh_symbol">()</SPAN></CODE>, but only for service records (<CODE class="sh_sourceCode">SRV</CODE> records).
<CODE class="sh_sourceCode">addresses</CODE> is an array of the SRV records available for <CODE class="sh_sourceCode">domain</CODE>. Properties
of SRV records are priority, weight, port, and name (e.g.,
<CODE class="sh_sourceCode"><SPAN class="sh_symbol">[</SPAN><SPAN class="sh_cbracket">{</SPAN><SPAN class="sh_string">'priority'</SPAN><SPAN class="sh_symbol">:</SPAN> <SPAN class="sh_number">10</SPAN><SPAN class="sh_symbol">,</SPAN> <SPAN class="sh_cbracket">{</SPAN><SPAN class="sh_string">'weight'</SPAN><SPAN class="sh_symbol">:</SPAN> <SPAN class="sh_number">5</SPAN><SPAN class="sh_symbol">,</SPAN> <SPAN class="sh_string">'port'</SPAN><SPAN class="sh_symbol">:</SPAN> <SPAN class="sh_number">21223</SPAN><SPAN class="sh_symbol">,</SPAN> <SPAN class="sh_string">'name'</SPAN><SPAN class="sh_symbol">:</SPAN> <SPAN class="sh_string">'service.example.com'</SPAN><SPAN class="sh_cbracket">}</SPAN><SPAN class="sh_symbol">,</SPAN> <SPAN class="sh_symbol">...]</SPAN></CODE>).</P>

<H3 id="dns-reverse-259">dns.reverse(ip, callback)</H3>

<P>Reverse resolves an ip address to an array of domain names.</P>

<P>The callback has arguments <CODE class="sh_sourceCode"><SPAN class="sh_symbol">(</SPAN>err<SPAN class="sh_symbol">,</SPAN> domains<SPAN class="sh_symbol">)</SPAN></CODE>.</P>

<P>If there an an error, <CODE class="sh_sourceCode">err</CODE> will be non-null and an instanceof the Error
object.</P>

<P>Each DNS query can return an error code.</P>

<UL>
<LI><CODE class="sh_sourceCode">dns<SPAN class="sh_symbol">.</SPAN>TEMPFAIL</CODE>: timeout, SERVFAIL or similar.</LI>
<LI><CODE class="sh_sourceCode">dns<SPAN class="sh_symbol">.</SPAN>PROTOCOL</CODE>: got garbled reply.</LI>
<LI><CODE class="sh_sourceCode">dns<SPAN class="sh_symbol">.</SPAN>NXDOMAIN</CODE>: domain does not exists.</LI>
<LI><CODE class="sh_sourceCode">dns<SPAN class="sh_symbol">.</SPAN>NODATA</CODE>: domain exists but no data of reqd type.</LI>
<LI><CODE class="sh_sourceCode">dns<SPAN class="sh_symbol">.</SPAN>NOMEM</CODE>: out of memory while processing.</LI>
<LI><CODE class="sh_sourceCode">dns<SPAN class="sh_symbol">.</SPAN>BADQUERY</CODE>: the query is malformed.</LI>
</UL>


<H2 id="assert-260">Assert</H2>

<P>This module is used for writing unit tests for your applications, you can
access it with <CODE class="sh_sourceCode"><SPAN class="sh_function">require</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">'assert'</SPAN><SPAN class="sh_symbol">)</SPAN></CODE>.</P>

<H3 id="assert-fail-261">assert.fail(actual, expected, message, operator)</H3>

<P>Tests if <CODE class="sh_sourceCode">actual</CODE> is equal to <CODE class="sh_sourceCode">expected</CODE> using the operator provided.</P>

<H3 id="assert-ok-262">assert.ok(value, message)</H3>

<P>Tests if value is a <CODE class="sh_sourceCode"><SPAN class="sh_keyword">true</SPAN></CODE> value, it is equivalent to <CODE class="sh_sourceCode">assert<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">equal</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_keyword">true</SPAN><SPAN class="sh_symbol">,</SPAN> value<SPAN class="sh_symbol">,</SPAN> message<SPAN class="sh_symbol">);</SPAN></CODE></P>

<H3 id="assert-equal-263">assert.equal(actual, expected, message)</H3>

<P>Tests shallow, coercive equality with the equal comparison operator ( <CODE class="sh_sourceCode"><SPAN class="sh_symbol">==</SPAN></CODE> ).</P>

<H3 id="assert-notequal-264">assert.notEqual(actual, expected, message)</H3>

<P>Tests shallow, coercive non-equality with the not equal comparison operator ( <CODE class="sh_sourceCode"><SPAN class="sh_symbol">!=</SPAN></CODE> ).</P>

<H3 id="assert-deepequal-265">assert.deepEqual(actual, expected, message)</H3>

<P>Tests for deep equality.</P>

<H3 id="assert-notdeepequal-266">assert.notDeepEqual(actual, expected, message)</H3>

<P>Tests for any deep inequality.</P>

<H3 id="assert-strictequal-267">assert.strictEqual(actual, expected, message)</H3>

<P>Tests strict equality, as determined by the strict equality operator ( <CODE class="sh_sourceCode"><SPAN class="sh_symbol">===</SPAN></CODE> )</P>

<H3 id="assert-notstrictequal-268">assert.notStrictEqual(actual, expected, message)</H3>

<P>Tests strict non-equality, as determined by the strict not equal operator ( <CODE class="sh_sourceCode"><SPAN class="sh_symbol">!==</SPAN></CODE> )</P>

<H3 id="assert-throws-269">assert.throws(block, error, message)</H3>

<P>Expects <CODE class="sh_sourceCode">block</CODE> to throw an error.</P>

<H3 id="assert-doesnotthrow-270">assert.doesNotThrow(block, error, message)</H3>

<P>Expects <CODE class="sh_sourceCode">block</CODE> not to throw an error.</P>

<H3 id="assert-iferror-271">assert.ifError(value)</H3>

<P>Tests if value is not a false value, throws if it is a true value. Useful when testing the first argument, <CODE class="sh_sourceCode">error</CODE> in callbacks.</P>

<H2 id="path-272">Path</H2>

<P>This module contains utilities for dealing with file paths.  Use
<CODE class="sh_sourceCode"><SPAN class="sh_function">require</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">'path'</SPAN><SPAN class="sh_symbol">)</SPAN></CODE> to use it.  It provides the following methods:</P>

<H3 id="path-join-273">path.join(/<EM> path1, path2, ... </EM>/)</H3>

<P>Join all arguments together and resolve the resulting path.  Example:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">node<SPAN class="sh_symbol"><SPAN class="sh_symbol">&gt;</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'path'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">).</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">join</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">...</SPAN></SPAN>   <SPAN class="sh_string"><SPAN class="sh_string">'/foo'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'bar'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'baz/asdf'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'quux'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'..'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN>
<SPAN class="sh_string"><SPAN class="sh_string">'/foo/bar/baz/asdf'</SPAN></SPAN>
</CODE></PRE>

<H3 id="path-normalizearray-274">path.normalizeArray(arr)</H3>

<P>Normalize an array of path parts, taking care of <CODE class="sh_sourceCode"><SPAN class="sh_string">'..'</SPAN></CODE> and <CODE class="sh_sourceCode"><SPAN class="sh_string">'.'</SPAN></CODE> parts.  Example:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">path<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">normalizeArray</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">([</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">''</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN>
  <SPAN class="sh_string"><SPAN class="sh_string">'foo'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'bar'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'baz'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'asdf'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'quux'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'..'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">])</SPAN></SPAN>
<SPAN class="sh_comment"><SPAN class="sh_comment">// returns</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">[</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">''</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'foo'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'bar'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'baz'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'asdf'</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">]</SPAN></SPAN>
</CODE></PRE>

<H3 id="path-normalize-275">path.normalize(p)</H3>

<P>Normalize a string path, taking care of <CODE class="sh_sourceCode"><SPAN class="sh_string">'..'</SPAN></CODE> and <CODE class="sh_sourceCode"><SPAN class="sh_string">'.'</SPAN></CODE> parts.  Example:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">path<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">normalize</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'/foo/bar/baz/asdf/quux/..'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN>
<SPAN class="sh_comment"><SPAN class="sh_comment">// returns</SPAN></SPAN>
<SPAN class="sh_string"><SPAN class="sh_string">'/foo/bar/baz/asdf'</SPAN></SPAN>
</CODE></PRE>

<H3 id="path-dirname-276">path.dirname(p)</H3>

<P>Return the directory name of a path.  Similar to the Unix <CODE class="sh_sourceCode">dirname</CODE> command.  Example:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">path<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">dirname</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'/foo/bar/baz/asdf/quux'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN>
<SPAN class="sh_comment"><SPAN class="sh_comment">// returns</SPAN></SPAN>
<SPAN class="sh_string"><SPAN class="sh_string">'/foo/bar/baz/asdf'</SPAN></SPAN>
</CODE></PRE>

<H3 id="path-basename-277">path.basename(p, ext)</H3>

<P>Return the last portion of a path.  Similar to the Unix <CODE class="sh_sourceCode">basename</CODE> command.  Example:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">path<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">basename</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'/foo/bar/baz/asdf/quux.html'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN>
<SPAN class="sh_comment"><SPAN class="sh_comment">// returns</SPAN></SPAN>
<SPAN class="sh_string"><SPAN class="sh_string">'quux.html'</SPAN></SPAN>

path<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">basename</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'/foo/bar/baz/asdf/quux.html'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'.html'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN>
<SPAN class="sh_comment"><SPAN class="sh_comment">// returns</SPAN></SPAN>
<SPAN class="sh_string"><SPAN class="sh_string">'quux'</SPAN></SPAN>
</CODE></PRE>

<H3 id="path-extname-278">path.extname(p)</H3>

<P>Return the extension of the path.  Everything after the last '.' in the last portion
of the path.  If there is no '.' in the last portion of the path or the only '.' is
the first character, then it returns an empty string.  Examples:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">path<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">extname</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'index.html'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN>
<SPAN class="sh_comment"><SPAN class="sh_comment">// returns </SPAN></SPAN>
<SPAN class="sh_string"><SPAN class="sh_string">'.html'</SPAN></SPAN>

path<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">extname</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'index'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN>
<SPAN class="sh_comment"><SPAN class="sh_comment">// returns</SPAN></SPAN>
<SPAN class="sh_string"><SPAN class="sh_string">''</SPAN></SPAN>
</CODE></PRE>

<H3 id="path-exists-279">path.exists(p, callback)</H3>

<P>Test whether or not the given path exists.  Then, call the <CODE class="sh_sourceCode">callback</CODE> argument with either true or false.  Example:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">path<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">exists</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'/etc/passwd'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>exists<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  sys<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">debug</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>exists <SPAN class="sh_symbol"><SPAN class="sh_symbol">?</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">"it's there"</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">"no passwd!"</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<H2 id="url-280">URL</H2>

<P>This module has utilities for URL resolution and parsing.
Call <CODE class="sh_sourceCode"><SPAN class="sh_function">require</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">'url'</SPAN><SPAN class="sh_symbol">)</SPAN></CODE> to use it.</P>

<P>Parsed URL objects have some or all of the following fields, depending on
whether or not they exist in the URL string. Any parts that are not in the URL
string will not be in the parsed object. Examples are shown for the URL</P>

<P><CODE class="sh_sourceCode"><SPAN class="sh_string">'http://user:pass@host.com:8080/p/a/t/h?query=string#hash'</SPAN></CODE></P>

<UL>
<LI><P><CODE class="sh_sourceCode">href</CODE></P>

<P>The full URL that was originally parsed. Example:
<CODE class="sh_sourceCode"><SPAN class="sh_string">'http://user:pass@host.com:8080/p/a/t/h?query=string#hash'</SPAN></CODE></P></LI>
<LI><P><CODE class="sh_sourceCode">protocol</CODE></P>

<P>The request protocol.  Example: <CODE class="sh_sourceCode"><SPAN class="sh_string">'http:'</SPAN></CODE></P></LI>
<LI><P><CODE class="sh_sourceCode">host</CODE></P>

<P>The full host portion of the URL, including port and authentication information. Example:
<CODE class="sh_sourceCode"><SPAN class="sh_string">'user:pass@host.com:8080'</SPAN></CODE></P></LI>
<LI><P><CODE class="sh_sourceCode">auth</CODE></P>

<P>The authentication information portion of a URL.  Example: <CODE class="sh_sourceCode"><SPAN class="sh_string">'user:pass'</SPAN></CODE></P></LI>
<LI><P><CODE class="sh_sourceCode">hostname</CODE></P>

<P>Just the hostname portion of the host.  Example: <CODE class="sh_sourceCode"><SPAN class="sh_string">'host.com'</SPAN></CODE></P></LI>
<LI><P><CODE class="sh_sourceCode">port</CODE></P>

<P>The port number portion of the host.  Example: <CODE class="sh_sourceCode"><SPAN class="sh_string">'8080'</SPAN></CODE></P></LI>
<LI><P><CODE class="sh_sourceCode">pathname</CODE></P>

<P>The path section of the URL, that comes after the host and before the query, including the initial slash if present.  Example: <CODE class="sh_sourceCode"><SPAN class="sh_string">'/p/a/t/h'</SPAN></CODE></P></LI>
<LI><P><CODE class="sh_sourceCode">search</CODE></P>

<P>The 'query string' portion of the URL, including the leading question mark. Example: <CODE class="sh_sourceCode"><SPAN class="sh_string">'?query=string'</SPAN></CODE></P></LI>
<LI><P><CODE class="sh_sourceCode">query</CODE></P>

<P>Either the 'params' portion of the query string, or a querystring-parsed object. Example:
<CODE class="sh_sourceCode"><SPAN class="sh_string">'query=string'</SPAN></CODE> or <CODE class="sh_sourceCode"><SPAN class="sh_cbracket">{</SPAN><SPAN class="sh_string">'query'</SPAN><SPAN class="sh_symbol">:</SPAN><SPAN class="sh_string">'string'</SPAN><SPAN class="sh_cbracket">}</SPAN></CODE></P></LI>
<LI><P><CODE class="sh_sourceCode">hash</CODE></P>

<P>The 'fragment' portion of the URL including the pound-sign. Example: <CODE class="sh_sourceCode"><SPAN class="sh_string">'#hash'</SPAN></CODE></P></LI>
</UL>


<P>The following methods are provided by the URL module:</P>

<H3 id="url-parse-281">url.parse(urlStr, parseQueryString=false)</H3>

<P>Take a URL string, and return an object.  Pass <CODE class="sh_sourceCode"><SPAN class="sh_keyword">true</SPAN></CODE> as the second argument to also parse
the query string using the <CODE class="sh_sourceCode">querystring</CODE> module.</P>

<H3 id="url-format-282">url.format(urlObj)</H3>

<P>Take a parsed URL object, and return a formatted URL string.</P>

<H3 id="url-resolve-283">url.resolve(from, to)</H3>

<P>Take a base URL, and a href URL, and resolve them as a browser would for an anchor tag.</P>

<H2 id="query-string-284">Query String</H2>

<P>This module provides utilities for dealing with query strings.  It provides the following methods:</P>

<H3 id="querystring-stringify-285">querystring.stringify(obj, sep='&amp;', eq='=', munge=true)</H3>

<P>Serialize an object to a query string.  Optionally override the default separator and assignment characters.
Example:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">querystring<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">stringify</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>foo<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'bar'</SPAN></SPAN><SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN>
<SPAN class="sh_comment"><SPAN class="sh_comment">// returns</SPAN></SPAN>
<SPAN class="sh_string"><SPAN class="sh_string">'foo=bar'</SPAN></SPAN>

querystring<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">stringify</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>foo<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'bar'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> baz<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'bob'</SPAN></SPAN><SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">';'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">':'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN>
<SPAN class="sh_comment"><SPAN class="sh_comment">// returns</SPAN></SPAN>
<SPAN class="sh_string"><SPAN class="sh_string">'foo:bar;baz:bob'</SPAN></SPAN>
</CODE></PRE>

<P>By default, this function will perform PHP/Rails-style parameter mungeing for arrays and objects used as
values within <CODE class="sh_sourceCode">obj</CODE>.
Example:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">querystring<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">stringify</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>foo<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'bar'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> foo<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'baz'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> foo<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'boz'</SPAN></SPAN><SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN>
<SPAN class="sh_comment"><SPAN class="sh_comment">// returns</SPAN></SPAN>
<SPAN class="sh_string"><SPAN class="sh_string">'foo=boz'</SPAN></SPAN>

querystring<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">stringify</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>foo<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>bar<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'baz'</SPAN></SPAN><SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN>
<SPAN class="sh_comment"><SPAN class="sh_comment">// returns</SPAN></SPAN>
<SPAN class="sh_string"><SPAN class="sh_string">'foo[bar]=baz'</SPAN></SPAN>
</CODE></PRE>

<P>If you wish to disable the array mungeing (e.g. when generating parameters for a Java servlet), you
can set the <CODE class="sh_sourceCode">munge</CODE> argument to <CODE class="sh_sourceCode"><SPAN class="sh_keyword">false</SPAN></CODE>.
Example:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">querystring<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">stringify</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>foo<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'bar'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> foo<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'baz'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> foo<SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'boz'</SPAN></SPAN><SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'&amp;'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'='</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">false</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN>
<SPAN class="sh_comment"><SPAN class="sh_comment">// returns</SPAN></SPAN>
<SPAN class="sh_string"><SPAN class="sh_string">'foo=bar&amp;foo=baz&amp;foo=boz'</SPAN></SPAN>
</CODE></PRE>

<P>Note that when <CODE class="sh_sourceCode">munge</CODE> is <CODE class="sh_sourceCode"><SPAN class="sh_keyword">false</SPAN></CODE>, parameter names with object values will still be munged.</P>

<H3 id="querystring-parse-286">querystring.parse(str, sep='&amp;', eq='=')</H3>

<P>Deserialize a query string to an object.  Optionally override the default separator and assignment characters.</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">querystring<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">parse</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'a=b&amp;b=c'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN>
<SPAN class="sh_comment"><SPAN class="sh_comment">// returns</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'a'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'b'</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'b'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">:</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'c'</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN>
</CODE></PRE>

<P>This function can parse both munged and unmunged query strings (see <CODE class="sh_sourceCode">stringify</CODE> for details).</P>

<H3 id="querystring-escape-287">querystring.escape</H3>

<P>The escape function used by <CODE class="sh_sourceCode">querystring<SPAN class="sh_symbol">.</SPAN>stringify</CODE>, provided so that it could be overridden if necessary.</P>

<H3 id="querystring-unescape-288">querystring.unescape</H3>

<P>The unescape function used by <CODE class="sh_sourceCode">querystring<SPAN class="sh_symbol">.</SPAN>parse</CODE>, provided so that it could be overridden if necessary.</P>

<H2 id="repl-289">REPL</H2>

<P>A Read-Eval-Print-Loop (REPL) is available both as a standalone program and easily
includable in other programs.  REPL provides a way to interactively run
JavaScript and see the results.  It can be used for debugging, testing, or
just trying things out.</P>

<P>By executing <CODE class="sh_sourceCode">node</CODE> without any arguments from the command-line you will be
dropped into the REPL. It has simplistic emacs line-editting.</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">mjr<SPAN class="sh_symbol"><SPAN class="sh_symbol">:~</SPAN></SPAN>$ node
Type <SPAN class="sh_string"><SPAN class="sh_string">'.help'</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">for</SPAN></SPAN> options<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>
node<SPAN class="sh_symbol"><SPAN class="sh_symbol">&gt;</SPAN></SPAN> a <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">[</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">1</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">2</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">3</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">];</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">[</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">1</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">2</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">3</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">]</SPAN></SPAN>
node<SPAN class="sh_symbol"><SPAN class="sh_symbol">&gt;</SPAN></SPAN> a<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">forEach</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>v<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">...</SPAN></SPAN>   console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>v<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">...</SPAN></SPAN>   <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_number"><SPAN class="sh_number">1</SPAN></SPAN>
<SPAN class="sh_number"><SPAN class="sh_number">2</SPAN></SPAN>
<SPAN class="sh_number"><SPAN class="sh_number">3</SPAN></SPAN>
</CODE></PRE>

<P>For advanced line-editors, start node with the environmental variable <CODE class="sh_sourceCode">NODE_NO_READLINE<SPAN class="sh_symbol">=</SPAN><SPAN class="sh_number">1</SPAN></CODE>.
This will start the REPL in canonical terminal settings which will allow you to use with <CODE class="sh_sourceCode">rlwrap</CODE>.</P>

<P>For example, you could add this to your bashrc file:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">alias node<SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">"env NODE_NO_READLINE=1 rlwrap node"</SPAN></SPAN>
</CODE></PRE>

<H3 id="repl-start-290">repl.start(prompt, stream)</H3>

<P>Starts a REPL with <CODE class="sh_sourceCode">prompt</CODE> as the prompt and <CODE class="sh_sourceCode">stream</CODE> for all I/O.  <CODE class="sh_sourceCode">prompt</CODE>
is optional and defaults to <CODE class="sh_sourceCode">node<SPAN class="sh_symbol">&gt;</SPAN></CODE>.  <CODE class="sh_sourceCode">stream</CODE> is optional and defaults to
<CODE class="sh_sourceCode">process<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">openStdin</SPAN><SPAN class="sh_symbol">()</SPAN></CODE>.</P>

<P>Multiple REPLs may be started against the same running instance of node.  Each
will share the same global object but will have unique I/O.</P>

<P>Here is an example that starts a REPL on stdin, a Unix socket, and a TCP socket:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> net <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">"net"</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">),</SPAN></SPAN>
    repl <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">"repl"</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

connections <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">0</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>

repl<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">start</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">"node via stdin&gt; "</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

net<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">createServer</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>socket<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  connections <SPAN class="sh_symbol"><SPAN class="sh_symbol">+=</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">1</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>
  repl<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">start</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">"node via Unix socket&gt; "</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> socket<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">).</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">listen</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">"/tmp/node-repl-sock"</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>

net<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">createServer</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>socket<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  connections <SPAN class="sh_symbol"><SPAN class="sh_symbol">+=</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">1</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>
  repl<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">start</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">"node via TCP socket&gt; "</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> socket<SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">).</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">listen</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_number"><SPAN class="sh_number">5001</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
</CODE></PRE>

<P>Running this program from the command line will start a REPL on stdin.  Other
REPL clients may connect through the Unix socket or TCP socket. <CODE class="sh_sourceCode">telnet</CODE> is useful
for connecting to TCP sockets, and <CODE class="sh_sourceCode">socat</CODE> can be used to connect to both Unix and
TCP sockets.</P>

<P>By starting a REPL from a Unix socket-based server instead of stdin, you can
connect to a long-running node process without restarting it.</P>

<H3 id="repl-features-291">REPL Features</H3>

<P>Inside the REPL, Control+D will exit.  Multi-line expressions can be input.</P>

<P>The special variable <CODE class="sh_sourceCode">_</CODE> (underscore) contains the result of the last expression.</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">node<SPAN class="sh_symbol"><SPAN class="sh_symbol">&gt;</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">[</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">"a"</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">"b"</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">"c"</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">]</SPAN></SPAN>
<SPAN class="sh_symbol"><SPAN class="sh_symbol">[</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'a'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'b'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'c'</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">]</SPAN></SPAN>
node<SPAN class="sh_symbol"><SPAN class="sh_symbol">&gt;</SPAN></SPAN> _<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>length
<SPAN class="sh_number"><SPAN class="sh_number">3</SPAN></SPAN>
node<SPAN class="sh_symbol"><SPAN class="sh_symbol">&gt;</SPAN></SPAN> _ <SPAN class="sh_symbol"><SPAN class="sh_symbol">+=</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">1</SPAN></SPAN>
<SPAN class="sh_number"><SPAN class="sh_number">4</SPAN></SPAN>
</CODE></PRE>

<P>The REPL provides access to any variables in the global scope. You can expose a variable
to the REPL explicitly by assigning it to the <CODE class="sh_sourceCode">scope</CODE> object associated with each
<CODE class="sh_sourceCode">REPLServer</CODE>.  For example:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_comment"><SPAN class="sh_comment">// repl_test.js</SPAN></SPAN>
<SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> repl <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">"repl"</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">),</SPAN></SPAN>
    msg <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">"message"</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>

repl<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">start</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">().</SPAN></SPAN>scope<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>m <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> msg<SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>
</CODE></PRE>

<P>Things in the <CODE class="sh_sourceCode">scope</CODE> object appear as local within the REPL:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">mjr<SPAN class="sh_symbol"><SPAN class="sh_symbol">:~</SPAN></SPAN>$ node repl_test<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>js
node<SPAN class="sh_symbol"><SPAN class="sh_symbol">&gt;</SPAN></SPAN> m
<SPAN class="sh_string"><SPAN class="sh_string">'message'</SPAN></SPAN>
</CODE></PRE>

<P>There are a few special REPL commands:</P>

<UL>
<LI><P><CODE class="sh_sourceCode"><SPAN class="sh_symbol">.</SPAN><SPAN class="sh_keyword">break</SPAN></CODE> - While inputting a multi-line expression, sometimes you get lost or just don't care
about completing it.  <CODE class="sh_sourceCode"><SPAN class="sh_symbol">.</SPAN><SPAN class="sh_keyword">break</SPAN></CODE> will start over.</P></LI>
<LI><P><CODE class="sh_sourceCode"><SPAN class="sh_symbol">.</SPAN>clear</CODE> - Resets the <CODE class="sh_sourceCode">scope</CODE> object to an empty object and clears any multi-line expression.</P></LI>
<LI><P><CODE class="sh_sourceCode"><SPAN class="sh_symbol">.</SPAN>exit</CODE> - Close the I/O stream, which will cause the REPL to exit.</P></LI>
<LI><P><CODE class="sh_sourceCode"><SPAN class="sh_symbol">.</SPAN>help</CODE> - Show this list of special commands.</P></LI>
</UL>


<H2 id="modules-292">Modules</H2>

<P>Node uses the CommonJS module system.</P>

<P>Node has a simple module loading system.  In Node, files and modules are in
one-to-one correspondence.  As an example, <CODE class="sh_sourceCode">foo<SPAN class="sh_symbol">.</SPAN>js</CODE> loads the module
<CODE class="sh_sourceCode">circle<SPAN class="sh_symbol">.</SPAN>js</CODE> in the same directory.</P>

<P>The contents of <CODE class="sh_sourceCode">foo<SPAN class="sh_symbol">.</SPAN>js</CODE>:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> circle <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_function"><SPAN class="sh_function">require</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'./circle'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">);</SPAN></SPAN>
console<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">log</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'The area of a circle of radius 4 is '</SPAN></SPAN>
           <SPAN class="sh_symbol"><SPAN class="sh_symbol">+</SPAN></SPAN> circle<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">area</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_number"><SPAN class="sh_number">4</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">));</SPAN></SPAN>
</CODE></PRE>

<P>The contents of <CODE class="sh_sourceCode">circle<SPAN class="sh_symbol">.</SPAN>js</CODE>:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode"><SPAN class="sh_keyword"><SPAN class="sh_keyword">var</SPAN></SPAN> PI <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">3.14</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>

exports<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>area <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>r<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  <SPAN class="sh_keyword"><SPAN class="sh_keyword">return</SPAN></SPAN> PI <SPAN class="sh_symbol"><SPAN class="sh_symbol">*</SPAN></SPAN> r <SPAN class="sh_symbol"><SPAN class="sh_symbol">*</SPAN></SPAN> r<SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>

exports<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>circumference <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_keyword"><SPAN class="sh_keyword">function</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>r<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN> <SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  <SPAN class="sh_keyword"><SPAN class="sh_keyword">return</SPAN></SPAN> <SPAN class="sh_number"><SPAN class="sh_number">2</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">*</SPAN></SPAN> PI <SPAN class="sh_symbol"><SPAN class="sh_symbol">*</SPAN></SPAN> r<SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>
</CODE></PRE>

<P>The module <CODE class="sh_sourceCode">circle<SPAN class="sh_symbol">.</SPAN>js</CODE> has exported the functions <CODE class="sh_sourceCode"><SPAN class="sh_function">area</SPAN><SPAN class="sh_symbol">()</SPAN></CODE> and
<CODE class="sh_sourceCode"><SPAN class="sh_function">circumference</SPAN><SPAN class="sh_symbol">()</SPAN></CODE>.  To export an object, add to the special <CODE class="sh_sourceCode">exports</CODE>
object.  (Alternatively, one can use <CODE class="sh_sourceCode"><SPAN class="sh_keyword">this</SPAN></CODE> instead of <CODE class="sh_sourceCode">exports</CODE>.) Variables
local to the module will be private. In this example the variable <CODE class="sh_sourceCode">PI</CODE> is
private to <CODE class="sh_sourceCode">circle<SPAN class="sh_symbol">.</SPAN>js</CODE>. The function <CODE class="sh_sourceCode"><SPAN class="sh_function">puts</SPAN><SPAN class="sh_symbol">()</SPAN></CODE> comes from the module <CODE class="sh_sourceCode"><SPAN class="sh_string">'sys'</SPAN></CODE>,
which is a built-in module. Modules which are not prefixed by <CODE class="sh_sourceCode"><SPAN class="sh_string">'./'</SPAN></CODE> are
built-in module--more about this later.</P>

<P>A module prefixed with <CODE class="sh_sourceCode"><SPAN class="sh_string">'./'</SPAN></CODE> is relative to the file calling <CODE class="sh_sourceCode"><SPAN class="sh_function">require</SPAN><SPAN class="sh_symbol">()</SPAN></CODE>.
That is, <CODE class="sh_sourceCode">circle<SPAN class="sh_symbol">.</SPAN>js</CODE> must be in the same directory as <CODE class="sh_sourceCode">foo<SPAN class="sh_symbol">.</SPAN>js</CODE> for
<CODE class="sh_sourceCode"><SPAN class="sh_function">require</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">'./circle'</SPAN><SPAN class="sh_symbol">)</SPAN></CODE> to find it.</P>

<P>Without the leading <CODE class="sh_sourceCode"><SPAN class="sh_string">'./'</SPAN></CODE>, like <CODE class="sh_sourceCode"><SPAN class="sh_function">require</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">'assert'</SPAN><SPAN class="sh_symbol">)</SPAN></CODE> the module is searched
for in the <CODE class="sh_sourceCode">require<SPAN class="sh_symbol">.</SPAN>paths</CODE> array. <CODE class="sh_sourceCode">require<SPAN class="sh_symbol">.</SPAN>paths</CODE> on my system looks like
this:</P>

<P><CODE class="sh_sourceCode"><SPAN class="sh_symbol">[</SPAN> <SPAN class="sh_string">'/home/ryan/.node_libraries'</SPAN> <SPAN class="sh_symbol">]</SPAN></CODE></P>

<P>That is, when <CODE class="sh_sourceCode"><SPAN class="sh_function">require</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">'assert'</SPAN><SPAN class="sh_symbol">)</SPAN></CODE> is called Node looks for:</P>

<UL>
<LI>1: <CODE class="sh_sourceCode"><SPAN class="sh_regexp">/home/</SPAN><SPAN class="sh_normal">ryan</SPAN><SPAN class="sh_symbol">/.</SPAN><SPAN class="sh_normal">node_libraries</SPAN><SPAN class="sh_symbol">/</SPAN>assert<SPAN class="sh_symbol">.</SPAN>js</CODE></LI>
<LI>2: <CODE class="sh_sourceCode"><SPAN class="sh_regexp">/home/</SPAN><SPAN class="sh_normal">ryan</SPAN><SPAN class="sh_symbol">/.</SPAN><SPAN class="sh_normal">node_libraries</SPAN><SPAN class="sh_symbol">/</SPAN>assert<SPAN class="sh_symbol">.</SPAN>node</CODE></LI>
<LI>3: <CODE class="sh_sourceCode"><SPAN class="sh_regexp">/home/</SPAN><SPAN class="sh_normal">ryan</SPAN><SPAN class="sh_symbol">/.</SPAN><SPAN class="sh_normal">node_libraries</SPAN><SPAN class="sh_symbol">/</SPAN><SPAN class="sh_normal">assert</SPAN><SPAN class="sh_symbol">/</SPAN>index<SPAN class="sh_symbol">.</SPAN>js</CODE></LI>
<LI>4: <CODE class="sh_sourceCode"><SPAN class="sh_regexp">/home/</SPAN><SPAN class="sh_normal">ryan</SPAN><SPAN class="sh_symbol">/.</SPAN><SPAN class="sh_normal">node_libraries</SPAN><SPAN class="sh_symbol">/</SPAN><SPAN class="sh_normal">assert</SPAN><SPAN class="sh_symbol">/</SPAN>index<SPAN class="sh_symbol">.</SPAN>node</CODE></LI>
</UL>


<P>interrupting once a file is found. Files ending in <CODE class="sh_sourceCode"><SPAN class="sh_string">'.node'</SPAN></CODE> are binary Addon
Modules; see 'Addons' below. <CODE class="sh_sourceCode"><SPAN class="sh_string">'index.js'</SPAN></CODE> allows one to package a module as
a directory.</P>

<P><CODE class="sh_sourceCode">require<SPAN class="sh_symbol">.</SPAN>paths</CODE> can be modified at runtime by simply unshifting new
paths onto it, or at startup with the <CODE class="sh_sourceCode">NODE_PATH</CODE> environmental
variable (which should be a list of paths, colon separated).</P>

<H2 id="addons-293">Addons</H2>

<P>Addons are dynamically linked shared objects. They can provide glue to C and
C++ libraries. The API (at the moment) is rather complex, involving
knowledge of several libraries:</P>

<UL>
<LI><P>V8 JavaScript, a C++ library. Used for interfacing with JavaScript:
creating objects, calling functions, etc.  Documented mostly in the
<CODE class="sh_sourceCode">v8<SPAN class="sh_symbol">.</SPAN>h</CODE> header file (<CODE class="sh_sourceCode"><SPAN class="sh_normal">deps</SPAN><SPAN class="sh_symbol">/</SPAN><SPAN class="sh_normal">v8</SPAN><SPAN class="sh_symbol">/</SPAN><SPAN class="sh_normal">include</SPAN><SPAN class="sh_symbol">/</SPAN>v8<SPAN class="sh_symbol">.</SPAN>h</CODE> in the Node source tree).</P></LI>
<LI><P>libev, C event loop library. Anytime one needs to wait for a file
descriptor to become readable, wait for a timer, or wait for a signal to
received one will need to interface with libev.  That is, if you perform
any I/O, libev will need to be used.  Node uses the <CODE class="sh_sourceCode">EV_DEFAULT</CODE> event
loop.  Documentation can be found http:/cvs.schmorp.de/libev/ev.html[here].</P></LI>
<LI><P>libeio, C thread pool library. Used to execute blocking POSIX system
calls asynchronously. Mostly wrappers already exist for such calls, in
<CODE class="sh_sourceCode"><SPAN class="sh_normal">src</SPAN><SPAN class="sh_symbol">/</SPAN>file<SPAN class="sh_symbol">.</SPAN>cc</CODE> so you will probably not need to use it. If you do need it,
look at the header file <CODE class="sh_sourceCode"><SPAN class="sh_normal">deps</SPAN><SPAN class="sh_symbol">/</SPAN><SPAN class="sh_normal">libeio</SPAN><SPAN class="sh_symbol">/</SPAN>eio<SPAN class="sh_symbol">.</SPAN>h</CODE>.</P></LI>
<LI><P>Internal Node libraries. Most importantly is the <CODE class="sh_sourceCode">node<SPAN class="sh_symbol">::</SPAN>ObjectWrap</CODE>
class which you will likely want to derive from.</P></LI>
<LI><P>Others. Look in <CODE class="sh_sourceCode"><SPAN class="sh_normal">deps</SPAN><SPAN class="sh_symbol">/</SPAN></CODE> for what else is available.</P></LI>
</UL>


<P>Node statically compiles all its dependencies into the executable. When
compiling your module, you don't need to worry about linking to any of these
libraries.</P>

<P>To get started let's make a small Addon which does the following except in
C++:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">exports<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>hello <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'world'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>
</CODE></PRE>

<P>To get started we create a file <CODE class="sh_sourceCode">hello<SPAN class="sh_symbol">.</SPAN>cc</CODE>:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">#include <SPAN class="sh_symbol"><SPAN class="sh_symbol">&lt;</SPAN></SPAN>v8<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>h<SPAN class="sh_symbol"><SPAN class="sh_symbol">&gt;</SPAN></SPAN>

using namespace v8<SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>

extern <SPAN class="sh_string"><SPAN class="sh_string">'C'</SPAN></SPAN> void
<SPAN class="sh_function"><SPAN class="sh_function">init</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>Handle<SPAN class="sh_symbol"><SPAN class="sh_symbol">&lt;</SPAN></SPAN><SPAN class="sh_predef_func"><SPAN class="sh_predef_func">Object</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">&gt;</SPAN></SPAN> target<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">{</SPAN></SPAN>
  HandleScope scope<SPAN class="sh_symbol"><SPAN class="sh_symbol">;</SPAN></SPAN>
  target<SPAN class="sh_symbol"><SPAN class="sh_symbol">-&gt;</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">Set</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_predef_func"><SPAN class="sh_predef_func">String</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">::</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">New</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">"hello"</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">),</SPAN></SPAN> <SPAN class="sh_predef_func"><SPAN class="sh_predef_func">String</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">::</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">New</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">"World"</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">));</SPAN></SPAN>
<SPAN class="sh_cbracket"><SPAN class="sh_cbracket">}</SPAN></SPAN>
</CODE></PRE>

<P>This source code needs to be built into <CODE class="sh_sourceCode">hello<SPAN class="sh_symbol">.</SPAN>node</CODE>, the binary Addon. To
do this we create a file called <CODE class="sh_sourceCode">wscript</CODE> which is python code and looks
like this:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">srcdir <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'.'</SPAN></SPAN>
blddir <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'build'</SPAN></SPAN>
VERSION <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'0.0.1'</SPAN></SPAN>

def <SPAN class="sh_function"><SPAN class="sh_function">set_options</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>opt<SPAN class="sh_symbol"><SPAN class="sh_symbol">):</SPAN></SPAN>
  opt<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">tool_options</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'compiler_cxx'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN>

def <SPAN class="sh_function"><SPAN class="sh_function">configure</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>conf<SPAN class="sh_symbol"><SPAN class="sh_symbol">):</SPAN></SPAN>
  conf<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">check_tool</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'compiler_cxx'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN>
  conf<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">check_tool</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'node_addon'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN>

def <SPAN class="sh_function"><SPAN class="sh_function">build</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>bld<SPAN class="sh_symbol"><SPAN class="sh_symbol">):</SPAN></SPAN>
  obj <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> bld<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN><SPAN class="sh_function"><SPAN class="sh_function">new_task_gen</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN><SPAN class="sh_string"><SPAN class="sh_string">'cxx'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'shlib'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">,</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'node_addon'</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN>
  obj<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>target <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'hello'</SPAN></SPAN>
  obj<SPAN class="sh_symbol"><SPAN class="sh_symbol">.</SPAN></SPAN>source <SPAN class="sh_symbol"><SPAN class="sh_symbol">=</SPAN></SPAN> <SPAN class="sh_string"><SPAN class="sh_string">'hello.cc'</SPAN></SPAN>
</CODE></PRE>

<P>Running <CODE class="sh_sourceCode">node<SPAN class="sh_symbol">-</SPAN>waf configure build</CODE> will create a file
<CODE class="sh_sourceCode"><SPAN class="sh_normal">build</SPAN><SPAN class="sh_symbol">/</SPAN><SPAN class="sh_keyword">default</SPAN><SPAN class="sh_symbol">/</SPAN>hello<SPAN class="sh_symbol">.</SPAN>node</CODE> which is our Addon.</P>

<P><CODE class="sh_sourceCode">node<SPAN class="sh_symbol">-</SPAN>waf</CODE> is just http://code.google.com/p/waf/[WAF], the python-based build system. <CODE class="sh_sourceCode">node<SPAN class="sh_symbol">-</SPAN>waf</CODE> is
provided for the ease of users.</P>

<P>All Node addons must export a function called <CODE class="sh_sourceCode">init</CODE> with this signature:</P>

<PRE class="sh_sourceCode"><CODE class="sh_sourceCode">extern <SPAN class="sh_string"><SPAN class="sh_string">'C'</SPAN></SPAN> void <SPAN class="sh_function"><SPAN class="sh_function">init</SPAN></SPAN> <SPAN class="sh_symbol"><SPAN class="sh_symbol">(</SPAN></SPAN>Handle<SPAN class="sh_symbol"><SPAN class="sh_symbol">&lt;</SPAN></SPAN><SPAN class="sh_predef_func"><SPAN class="sh_predef_func">Object</SPAN></SPAN><SPAN class="sh_symbol"><SPAN class="sh_symbol">&gt;</SPAN></SPAN> target<SPAN class="sh_symbol"><SPAN class="sh_symbol">)</SPAN></SPAN>
</CODE></PRE>

<P>For the moment, that is all the documentation on addons. Please see
<A href="http://github.com/ry/node_postgres">http://github.com/ry/node_postgres</A> for a real example.</P>
</DIV>
</DIV>
<SCRIPT type="text/javascript" src="./node(1) -- API_files/jquery.js"></SCRIPT>
<SCRIPT type="text/javascript" src="./node(1) -- API_files/sh_main.js"></SCRIPT>
<SCRIPT type="text/javascript" src="./node(1) -- API_files/sh_javascript.min.js"></SCRIPT>
<SCRIPT type="text/javascript" src="./node(1) -- API_files/doc.js"></SCRIPT>

</BODY><STYLE type="text/css">#AdContainer,#RadAd_Skyscraper,#ad-frame,#bbccom_leaderboard,#bbccom_mpu,#center_banner,#footer_adcode,#hbBHeaderSpon,#header_adcode,#hiddenHeaderSpon,#navbar_adcode,#pagelet_adbox,#rightAds,#rightcolumn_adcode,#top-advertising,#topMPU,#tracker_advertorial,.ad-now,.adbox,.adspot,.dfpad,.prWrap,.sponsored,[id^="ad_block"],[id^="adbrite"],[id^="dclkAds"],[id^="konaLayer"],[id^="ew"][id$="_bannerDiv"],a.kLink span[id^="preLoadWrap"][class="preLoadWrap"],A[href^="http://adserver.adpredictive.com"],A[href^="http://ad."][href*=".doubleclick.net/"],div[class^="dms_ad_IDS"],DIV[id="adxLeaderboard"],DIV[id="rm_container"],div[id^="sponsorads"],div[id^="y5_direct"],DIV[id="FFN_Banner_Holder"],DIV[id="FFN_imBox_Container"],DIV[id="p360-format-box"],div[id="tooltipbox"][class^="itxt"],div[id^="adKontekst_"],div[id^="google_ads_div"],div[id^="kona_"][id$="_wrapper"],div[class="wnDVUtilityBlock"],embed[flashvars*="AdID"],embed[id="Advertisement"][name="Advertisement"],iframe[class="chitikaAdBlock"],iframe[id^="dapIfM"],iframe[name^="AdBrite"],iframe[name^="google_ads_"],iframe[src*="clicksor.com"],img[src*="clicksor.com"],IMG[src^="http://cdn.adnxs.com"],ispan#ab_pointer,object[id="flashad"],object[id="ve_threesixty_swf"][name="ve_threesixty_swf"],[src*="sixsigmatraffic.com"],div#dir_ads_site,div#tads table[align="center"][width="100%"],div#rhs div#rhs_block table#mbEnd,#A9AdsMiddleBoxTop,#A9AdsOutOfStockWidgetTop,#A9AdsServicesWidgetTop,#AD_CONTROL_22,#ADsmallWrapper,#Ad1,#Ad2,#Ad3Left,#Ad3Right,#AdBanner_F1,#AdBar1,#AdContainerTop,#AdHeader,#AdMiddle,#AdRectangle,#AdSenseDiv,#AdShowcase_F1,#AdSky23,#AdSkyscraper,#AdSponsor_SF,#AdTargetControl1_iframe,#AdText,#Ad_Block,#Ad_Center1,#Ad_Top,#Adbanner,#Adrectangle,#AdsContent,#AdsWrap,#AdvertMPU23b,#AdvertiseFrame,#Advertisement,#Advertorial,#BannerAdvert,#BigBoxAd,#CompanyDetailsNarrowGoogleAdsPresentationControl,#CompanyDetailsWideGoogleAdsPresentationControl,#ContentAd,#ContentAd1,#ContentAd2,#ContentAdPlaceHolder1,#ContentAdPlaceHolder2,#ContentAdXXL,#ContentPolepositionAds_Result,#FooterAd,#FooterAdContainer,#GoogleAdsense,#HEADERAD,#HOME_TOP_RIGHT_BOXAD,#HeaderAdsBlock,#HeaderAdsBlockFront,#HeaderBannerAdSpacer,#HeaderTextAd,#HeroAd,#HomeAd1,#HouseAd,#ID_Ad_Sky,#Journal_Ad_125,#Journal_Ad_300,#LeftAd,#LeftAdF1,#LeftAdF2,#LowerContentAd,#PREFOOTER_LEFT_BOXAD,#PREFOOTER_RIGHT_BOXAD,#PageLeaderAd,#RightAd,#RightSponsoredAd,#SectionAd300-250,#SidebarAdContainer,#SkyAd,#SponsoredAd,#TOP_ADROW,#TOP_RIGHT_BOXAD,#TopAdPos,#VM-MPU-adspace,#VM-footer-adspace,#VM-header-adspace,#VM-header-adwrap,#XEadLeaderboard,#XEadSkyscraper,#_ads,#ad-120x600-sidebar,#ad-160x600,#ad-160x600-sidebar,#ad-250x300,#ad-300,#ad-300x250,#ad-300x250-sidebar,#ad-300x250Div,#ad-728,#ad-article,#ad-banner,#ad-bottom,#ad-bottom-wrapper,#ad-colB-1,#ad-column,#ad-container,#ad-footer,#ad-footprint-160x600,#ad-front-footer,#ad-front-sponsoredlinks,#ad-halfpage,#ad-label,#ad-leaderboard,#ad-leaderboard-bottom,#ad-leaderboard-spot,#ad-leaderboard-top,#ad-left,#ad-list-row,#ad-lrec,#ad-medium-rectangle,#ad-middlethree,#ad-middletwo,#ad-module,#ad-mpu,#ad-mpu1-spot,#ad-mpu2-spot,#ad-placard,#ad-rectangle,#ad-righttop,#ad-side-text,#ad-skyscraper,#ad-slug-wrapper,#ad-space,#ad-splash,#ad-spot,#ad-target,#ad-target-Leaderbord,#ad-teaser,#ad-top,#ad-top-text-low,#ad-tower,#ad-trailerboard-spot,#ad-typ1,#ad-west,#ad-wrap,#ad-wrap-right,#ad-wrapper,#ad-wrapper1,#ad-yahoo-simple,#ad1,#ad125BL,#ad125BR,#ad125TL,#ad125TR,#ad125x125,#ad160x600,#ad160x600right,#ad1Sp,#ad2,#ad2Sp,#ad3,#ad300,#ad300-250,#ad300X250,#ad300_x_250,#ad300x150,#ad300x250,#ad300x250Module,#ad300x60,#ad336,#ad336x280,#ad375x85,#ad468,#ad468x60,#ad526x250,#ad600,#ad7,#ad728,#ad728Wrapper,#ad728x90,#adB,#adBadges,#adBanner,#adBanner120x600,#adBannerTable,#adBannerTop,#adBar,#adBlock125,#adBlocks,#adBox,#adContainer,#adDiv,#adFps,#adFtofrs,#adGallery,#adGroup1,#adHeader,#adL,#adLB,#adLeaderboard,#adMPU,#adMiddle0Frontpage,#adMiniPremiere,#adP,#adPlaceHolderRight,#adRight,#adSenseModule,#adServer_marginal,#adSidebar,#adSidebarSq,#adSky,#adSkyscraper,#adSlider,#adSpace3,#adSpace300_ifrMain,#adSpace4,#adSpace5,#adSpace6,#adSpace7,#adSpace_footer,#adSpace_top,#adSpecial,#adSpot-Leader,#adSpot-banner,#adSpot-mrec1,#adSpot-sponsoredlinks,#adSpot-textbox1,#adSpot-widestrip,#adSpotAdvertorial,#adSpotIsland,#adSpotSponsoredLinks,#adSquare,#adStaticA,#adStrip,#adSuperPremiere,#adTableCell,#adTag1,#adTag2,#adTop,#adTopboxright,#adUnit,#adWrapper,#adZoneTop,#ad_160x160,#ad_160x600,#ad_190x90,#ad_300,#ad_300_250,#ad_300x250,#ad_468_60,#ad_5,#ad_728_foot,#ad_728x90,#ad_A,#ad_B,#ad_Banner,#ad_C,#ad_C2,#ad_D,#ad_E,#ad_F,#ad_G,#ad_H,#ad_I,#ad_J,#ad_K,#ad_L,#ad_M,#ad_N,#ad_O,#ad_P,#ad_YieldManager-300x250,#ad_anchor,#ad_banner,#ad_banner_top,#ad_bar,#ad_block_1,#ad_block_2,#ad_bottom,#ad_box_colspan,#ad_branding,#ad_bs_area,#ad_center_monster,#ad_container,#ad_content_wrap,#ad_feature,#ad_footer,#ad_haha_1,#ad_haha_4,#ad_halfpage,#ad_head,#ad_header,#ad_horseshoe_left,#ad_horseshoe_right,#ad_horseshoe_spacer,#ad_horseshoe_top,#ad_hotpots,#ad_island,#ad_label,#ad_layer2,#ad_leader,#ad_leaderBoard,#ad_leaderboard,#ad_lwr_square,#ad_medium_rectangle,#ad_medium_rectangular,#ad_middle,#ad_mpu,#ad_overlay,#ad_play_300,#ad_rect,#ad_rect_body,#ad_rect_bottom,#ad_rectangle,#ad_related_links_div,#ad_related_links_div_program,#ad_replace_div_1,#ad_report_leaderboard,#ad_report_rectangle,#ad_right,#ad_right_main,#ad_ros_tower,#ad_rr_1,#ad_sidebar1,#ad_sidebar2,#ad_sidebar3,#ad_skyscraper,#ad_slot_livesky,#ad_space,#ad_square,#ad_ss,#ad_term_bottom_place,#ad_top,#ad_top_holder,#ad_tp_banner_1,#ad_tp_banner_2,#ad_vertical,#ad_window,#ad_wrapper,#adbanner,#adbnr,#adboard,#adbottom,#adbox,#adbox2,#adclear,#adcode1,#adcode2,#adcode3,#adcode4,#adcolumnwrapper,#adcontainer,#adcontainsm,#adcontrolPushSite,#addiv-bottom,#addiv-top,#adframe:not(frameset),#adhead,#adhead_g,#adheader,#adhome,#adiframe1_iframe,#adiframe2_iframe,#adiframe3_iframe,#adimg,#adition_content_ad,#adlabel,#adlabelFooter,#adleaderboard,#adlinks,#adlinkws,#admid,#admiddle3center,#admiddle3left,#adposition,#adposition-C,#adposition-FPMM,#adposition2,#adposition3,#adposition4,#adrectanglea,#adrectangleb,#adright,#adright2,#ads,#ads-468,#ads-area,#ads-block,#ads-bot,#ads-bottom,#ads-dell,#ads-horizontal,#ads-indextext,#ads-leaderboard1,#ads-lrec,#ads-prices,#ads-rhs,#ads-top,#ads160left,#ads2,#ads300,#ads336x280,#ads7,#ads728bottom,#ads728top,#ads790,#adsDisplay,#adsID,#ads_160,#ads_300,#ads_728,#ads_belowforumlist,#ads_belownav,#ads_bottom_outer,#ads_catDiv,#ads_footer,#ads_right,#ads_sidebar_roadblock,#ads_top,#adsbottom,#adscolumn,#adsense,#adsense-text,#adsenseWrap,#adsense_inline,#adsense_leaderboard,#adsense_placeholder_2,#adsensetopplay,#adskyscraper,#adslot,#adsonar,#adspace,#adspace-300x250,#adspace300x250,#adspaceBox,#adspaceBox300,#adspace_header,#adspot-a,#adsright,#adstop,#adt,#adtech_takeover,#adtop,#adv-masthead,#adv_google_300,#adv_google_728,#adv_top_banner_wrapper,#adv_wide_banner,#adver1,#adver2,#adver3,#adver4,#advert,#advert-1,#advert-boomer,#advert-display,#advert-header,#advert-leaderboard,#advert-top,#advert1,#advertBanner,#advert_250x250,#advert_box,#advert_leaderboard,#advert_lrec_format,#advert_mpu,#advertbox,#advertbox2,#advertbox3,#advertbox4,#adverthome,#advertise,#advertise-now,#advertise1,#advertisement,#advertisement160x600,#advertisement728x90,#advertisementLigatus,#advertisementPrio2,#advertiser-container,#advertiserLinks,#advertising,#advertising-skyscraper,#advertisingModule160x600,#advertisingModule728x90,#advertorial,#adwhitepaperwidget,#adwin_rec,#adwith,#adwords-4-container,#adwrapper,#adxtop,#adzerk,#adzoneBANNER,#agi-ad300x250,#agi-ad300x250overlay,#agi-sponsored,#anchorAd,#annoying_ad,#ap_adframe,#araHealthSponsorAd,#article-ad-container,#article-box-ad,#articleAdReplacement,#articleSideAd,#article_ad,#article_box_ad,#asinglead,#atlasAdDivGame,#banner-ad,#banner-ad-container,#banner-ads,#banner468x60,#banner728x90,#bannerAd,#bannerAdTop,#bannerAd_ctr,#banner_ad,#banner_ads,#banner_topad,#bannerad,#bannerad2,#bbccom_mpu,#bbo_ad1,#bg_YieldManager-300x250,#bigAd,#bigBoxAd,#bigadbox,#bigadspot,#billboard_ad,#block-ad_cube-1,#block-thewrap_ads_250x300-0,#block_advert,#blox-big-ad,#blox-halfpage-ad,#blox-tile-ad,#botad,#bott_ad2,#bott_ad2_300,#bottom-ad-container,#bottom-ads,#bottomAd,#bottomAdCCBucket,#bottomAdContainer,#bottomAdSense,#bottomAdSenseDiv,#bottomAds,#bottomRightAd,#bottomRightAdSpace,#bottom_ad,#bottom_ad_area,#bottom_ads,#bottom_banner_ad,#bottom_overture,#bottom_sponsor_ads,#bottom_sponsored_links,#bottom_text_ad,#bottomad,#bottomadsense,#box-googleadsense-1,#box-googleadsense-r,#box1ad,#boxAd300,#boxAdContainer,#box_ad,#box_mod_googleadsense,#boxad1,#boxad2,#boxad3,#boxad4,#boxad5,#bps-header-ad-container,#btr_horiz_ad,#burn_header_ad,#button-ads-horizontal,#button-ads-vertical,#button_ad_container,#button_ad_wrap,#cellAd,#channel_ad,#channel_ads,#ciHomeRHSAdslot,#circ_ad,#cnnRR336ad,#cnnTopAd,#colRightAd,#column4-google-ads,#commercial_ads,#common_right_lower_player_adspace,#common_right_player_adspace,#common_top_adspace,#containerLocalAds,#containerMrecAd,#content-ad-header,#contentAd,#content_ad,#content_ad_square,#content_ad_top,#content_ads_content,#content_box_300body_sponsoredoffers,#content_box_adright300_google,#contentad,#contentad_imtext,#contentad_right,#contentads,#contentinlineAd,#contextual-ads-block,#contextualad,#coverads,#ctl00_BottomAd,#ctl00_LHTowerAd,#ctl00_LeftHandAd,#ctl00_MasterHolder_IBanner_adHolder,#ctl00_TopAd,#ctl00_TowerAd,#ctl00_VBanner_adHolder,#ctl00_adFooter,#ctl00_atop_bt,#ctl00_cphMain_hlAd1,#ctl00_cphMain_hlAd2,#ctl00_cphMain_hlAd3,#ctl00_ctl00_MainPlaceHolder_itvAdSkyscraper,#ctl00_ctl00_ctl00_Main_Main_PlaceHolderGoogleTopBanner_MPTopBannerAd,#ctl00_ctl00_ctl00_Main_Main_SideBar_MPSideAd,#ctl00_ctl00_ctl00_tableAdsTop,#ctl00_m_skinTracker_m_adLBL,#ctl00_phCrackerMain_ucAffiliateAdvertDisplayMiddle_pnlAffiliateAdvert,#ctl00_phCrackerMain_ucAffiliateAdvertDisplayRight_pnlAffiliateAdvert,#ctrlsponsored,#cubeAd,#cube_ads,#cube_ads_inner,#cubead,#cubead-2,#dc-display-right-ad-1,#dcol-sponsored,#defer-adright,#detail_page_vid_topads,#divAd,#divAdBox,#divWrapper_Ad,#div_video_ads,#dlads,#dni-header-ad,#download_ads,#ds-mpu,#editorsmpu,#evotopTen_advert,#exads,#featuread,#featuredAdContainer2,#featuredAds,#feed_links_ad_container,#first_ad_unit,#firstad,#fl_hdrAd,#footer-ad,#footer-sponsored,#footerAd,#footerAdDiv,#footerAds,#footerAdverts,#footer_ad,#footer_ad_block,#footer_ads,#footer_adspace,#footer_text_ad,#footerad,#fr_ad_center,#frnContentAd,#from_our_sponsors,#front_advert,#front_mpu,#ft-ad,#ft-ad-1,#ft-ad-container,#ft_mpu,#fusionad,#fw-advertisement,#g_ad,#g_adsense,#ga_300x250,#gad,#gallery-ad-m0,#gallery_ads,#game-info-ad,#global_header_ad_area,#gmi-ResourcePageAd,#gmi-ResourcePageLowerAd,#google-ad,#google-ad-art,#google-ad-tower,#google-ads,#google-ads-bottom,#google-ads-left-side,#google-adsense-mpusize,#googleAd,#googleAds,#googleAdsense,#googleAdsenseBanner,#googleAdsenseBannerBlog,#googleAdwordsModule,#googleAfcContainer,#googleShoppingAdsRight,#googleShoppingAdsTop,#google_ad,#google_ad_test,#google_ads,#google_ads_frame1,#google_ads_test,#googlead,#googleads,#googlesponsor,#grid_ad,#gsyadrectangleload,#gsyadrightload,#gsyadtop,#gsyadtopload,#gtopadvts,#halfPageAd,#halfe-page-ad-box,#hdtv_ad_ss,#head-ad,#head_advert,#header-ad,#header-ads,#header-advert,#headerAd,#headerAdBackground,#headerAdContainer,#headerAdWrap,#headerAdsWrapper,#headerTopAd,#header_ad,#header_adcode,#header_ads,#header_advertisement_top,#header_leaderboard_ad_container,#headerad,#headeradbox,#headline_ad,#hiddenadAC,#homeTopRightAd,#home_ad,#home_contentad,#home_spensoredlinks,#homepage-ad,#homepage_right_ad,#homepage_right_ad_container,#hometop_234x60ad,#hor_ad,#horizontal-banner-ad,#horizontal_ad,#horizontal_ad_top,#horizontalads,#houseAd,#hp-store-ad,#hpV2_300x250Ad,#hpV2_googAds,#icePage_SearchLinks_AdRightDiv,#icePage_SearchLinks_DownloadToolbarAdRightDiv,#indexad,#inlinead,#inlinegoogleads,#inner-advert-row,#insider_ad_wrapper,#instoryad,#int-ad,#interstitial_ad_wrapper,#islandAd,#j_ad,#jmp-ad-buttons,#joead,#joead2,#ka_adRightSkyscraperWide,#landing-adserver,#largead,#lateAd,#lb-sponsor-left,#lb-sponsor-right,#leader-board-ad,#leader-sponsor,#leaderAdContainer,#leaderad,#leaderad_section,#leaderboard-ad,#leaderboard-bottom-ad,#leaderboard_ad,#left-ad-skin,#leftAdContainer,#leftAd_rdr,#leftAdvert,#leftSectionAd300-100,#left_ad,#left_adspace,#leftad,#leftads,#lg-banner-ad,#linkAds,#live-ad,#longAdSpace,#lowerthirdad,#mBannerAd,#main-ad,#main-ad160x600,#main-ad160x600-img,#main-ad728x90,#mainAd,#mainAdUnit,#mainAdvert,#main_ad,#main_rec_ad,#mastAdvert,#mastad,#masthead_ad,#masthead_topad,#medRecAd,#media_ad,#menuAds,#mi_story_assets_ad,#mid-ad300x250,#mid-table-ad,#mid_ad_title,#mid_mpu,#middlead,#middleads,#midrect_ad,#midstrip_ad,#mini-ad,#module-google_ads,#module_ad,#module_box_ad,#moogleAd,#most_popular_ad,#mpu,#mpu-advert,#mpuAd,#mpuDiv,#mpuWrapper,#mpuWrapperAd,#mpu_banner,#mpu_holder,#mpu_text_ad,#mpuad,#mrecAdContainer,#ms_ad,#msad,#multiLinkAdContainer,#n_sponsor_ads,#namecom_ad_hosting_main,#narrow_ad_unit,#natadad300x250,#national_microlink_ads,#navi_banner_ad_780,#nba300Ad,#nbaMidAds,#nbaVid300Ad,#new_topad,#ng_rtcol_ad,#noresultsads,#northad,#oanda_ads,#onespot-ads,#p-googleadsense,#page-header-ad,#pageAds,#pageAdsDiv,#page_content_top_ad,#pcworldAdBottom,#pcworldAdTop,#pinball_ad,#player_ad,#player_ads,#portlet-advertisement-left,#portlet-advertisement-right,#post5_adbox,#post_ad,#priceGrabberAd,#print_ads,#printads,#product-adsense,#promo-ad,#promoAds,#ps-vertical-ads,#pub468x60,#publicidad,#pushdown_ad,#r1SoftAd,#rail_ad1,#rail_ad2,#realEstateAds,#rect_ad,#rectangle-ad,#rectangle_ad,#refine-300-ad,#region-top-ad,#rh-ad-container,#rh_tower_ad,#rhsadvert,#right-ad,#right-ad-skin,#right-box-ad,#rightAd,#rightAd300x250,#rightAdColumn,#rightAd_rdr,#rightColAd,#rightColumnMpuAd,#rightColumnSkyAd,#right_ad_wrapper,#right_ads,#right_advertisement,#right_advertising,#rightad,#rightadvertbar-doubleclickads,#rightbar-ad,#rightside_ad,#rm_ad_text,#ros_ad,#rotatingads,#row2AdContainer,#rtMod_ad,#sAdsBox,#sb-ad-sq,#search-google-ads,#search_ads,#secondBoxAdContainer,#section-container-ddc_ads,#section_advertorial_feature,#servfail-ads,#sew-ad1,#shoppingads,#show-ad,#side-ad,#side-ad-container,#sideAd,#sideBarAd,#side_ad_wrapper,#side_ads_by_google,#sidead,#sidebar-125x125-ads,#sidebar-125x125-ads-below-index,#sidebar-ad,#sidebar-ad-boxes,#sidebar-ad-space,#sidebar-ad-wrap,#sidebar-ads,#sidebar2ads,#sidebar_ad_widget,#sidebar_ads,#sidebar_sponsoredresult_body,#sidebarad,#sideline-ad,#single-mpu,#singlead,#site-leaderboard-ads,#site_top_ad,#sky-ad,#skyAd,#skyScrapperAd,#sky_ad,#skyscraper-ad,#skyscraperAd,#skyscraper_ad,#skyscraper_advert,#sliderAdHolder,#slideshow_ad_300x250,#sm-banner-ad,#small_ad,#smallerAd,#speeds_ads,#speeds_ads_fstitem,#sphereAd,#splinks,#sponLinkDiv_1,#sponlink,#sponsAds,#sponsLinks,#spons_left,#sponseredlinks,#sponsor-search,#sponsorAd1,#sponsorAd2,#sponsorAdDiv,#sponsorLinks,#sponsorTextLink,#sponsor_banderole,#sponsor_box,#sponsor_deals,#sponsor_panSponsor,#sponsored,#sponsored-ads,#sponsored-features,#sponsored-links,#sponsored-resources,#sponsored1,#sponsoredBox1,#sponsoredBox2,#sponsoredLinks,#sponsoredList,#sponsoredResults,#sponsoredSiteMainline,#sponsoredSiteSidebar,#sponsored_ads_v4,#sponsored_content,#sponsored_game_row_listing,#sponsored_links,#sponsoredlinks,#sponsoredlinks_cntr,#sponsoredresults_top,#sponsorlink,#spotlightAds,#spotlightad,#squareAd,#squareAdSpace,#square_ad,#start_middle_container_advertisment,#sticky-ad,#stickyBottomAd,#story-ad-a,#story-ad-b,#story-sponsoredlinks,#storyAd,#storyAdWrap,#subpage-ad-right,#subpage-ad-top,#swads,#synch-ad,#tabAdvertising,#tblAd,#tbl_googlead,#template_ad_leaderboard,#tertiary_advertising,#text-ad,#textAd,#textAds,#text_ad,#text_advert,#the-last-ad-standing,#thefooterad,#themis-ads,#tile-ad,#tmglBannerAd,#top-ad,#top-ad-container,#top-ad-menu,#top-ads,#top-ads-tabs,#top-advertisement,#top-banner-ad,#top-search-ad-wrapper,#topAd,#topAd728x90,#topAdBanner,#topAdContainer,#topAdSenseDiv,#topAds,#topAdsContainer,#topAdvert,#topBannerAd,#topNavLeaderboardAdHolder,#top_ad,#top_ad_area,#top_ad_game,#top_ad_wrapper,#top_ads,#top_advertise,#top_advertising,#top_wide_ad,#topad,#topad_left,#topad_right,#topadblock,#topads,#topadzone,#topcustomad,#toprightAdvert,#toptextad,#towerad,#ttp_ad_slot1,#ttp_ad_slot2,#twogamesAd,#txt_link_ads,#undergameAd,#upperMpu,#upperad,#urban_contentad_article,#v_ad,#vert_ad,#vertical_ad,#vertical_ads,#video_cnv_ad,#video_overlay_ad,#walltopad,#welcomeAdsContainer,#welcome_ad_mrec,#welcome_advertisement,#wgtAd,#whatsnews_top_ad,#whitepaper-ad,#whoisRightAdContainer,#wide_ad_unit_top,#widget_advertisement,#wrapAdRight,#wrapAdTop,#y708-ad-expedia,#y708-ad-lrec,#y708-ad-partners,#y708-ad-ysm,#y708-advertorial-marketplace,#yahoo-ads,#yahoo-sponsors,#yahoo_ads,#yahoo_ads_2010,#yahooad-tbl,#yan-sponsored,#ybf-ads,#yfi_fp_ad_mort,#yfi_fp_ad_nns,#yfi_pf_ad_mort,#ygrp-sponsored-links,#ymap_adbanner,#yn-gmy-ad-lrec,#yreSponsoredLinks,#ysm_ad_iframe,#zoneAdserverMrec,#zoneAdserverSuper,.ADBAR,.ADPod,.AD_MOVIE_ITEM,.AD_MOVIE_ITEMLIST,.AD_MOVIE_ITEMROW,.Ad120x600,.Ad160x600,.Ad247x90,.Ad300x250,.Ad300x250L,.Ad728x90,.AdBox,.AdBox7,.AdContainerBox308,.AdHere,.AdInfo,.AdPlaceHolder,.AdRingtone,.AdSense,.AdSpace,.AdTitle,.AdUnit,.AdUnit300,.Ad_C,.Ad_D_Wrapper,.Ad_E_Wrapper,.Ad_Right,.Ads,.AdsBoxSection,.AdsLinks1,.AdsLinks2,.AdvertMidPage,.AdvertiseWithUs,.AdvertisementTextTag,.ArticleInlineAd,.BannerAd,.BlockAd,.BottomAffiliate,.CG_adkit_leaderboard,.CommentAd,.DeptAd,.FT_Ad,.FlatAds,.HPNewAdsBannerDiv,.HomeContentAd,.LeftTowerAd,.M2Advertisement,.MD_adZone,.MPU,.MPUHolder,.MiddleAdContainer,.OpenXad,.PU_DoubleClickAdsContent,.Post5ad,.RBboxAd,.RelatedAds,.RightRailTop300x250Ad,.RightSponsoredAdTitle,.RightTowerAd,.SidebarAd,.SponsoredAdTitle,.SponsoredContent,.SponsoredLinks,.SponsoredLinksGrayBox,.SquareAd,.StandardAdLeft,.StandardAdRight,.TextAd,.TheEagleGoogleAdSense300x250,.TopAd,.TopAdL,.TopAdR,.UIStandardFrame_SidebarAds,.UIWashFrame_SidebarAds,.UnderAd,.VerticalAd,.WidgetAdvertiser,.ad-160x600,.ad-250,.ad-300,.ad-300-block,.ad-300-blog,.ad-300x100,.ad-300x250,.ad-600,.ad-728,.ad-adlink-bottom,.ad-adlink-side,.ad-background,.ad-banner,.ad-bigsize,.ad-block,.ad-blog2biz,.ad-bottom,.ad-box,.ad-break,.ad-btn,.ad-btn-heading,.ad-button,.ad-cell,.ad-container,.ad-div,.ad-feedback,.ad-filler,.ad-footer,.ad-footer-leaderboard,.ad-google,.ad-gray,.ad-hdr,.ad-head,.ad-holder,.ad-homeleaderboard,.ad-img,.ad-island,.ad-leaderboard,.ad-links,.ad-medium,.ad-medium-two,.ad-mpu,.ad-other,.ad-permalink,.ad-placeholder,.ad-postText,.ad-poster,.ad-rect,.ad-rectangle,.ad-rectangle-text,.ad-related,.ad-rh,.ad-ri,.ad-right,.ad-right-header,.ad-right-txt,.ad-section,.ad-sidebar300,.ad-slot,.ad-slot-234-60,.ad-slot-300-250,.ad-slot-728-90,.ad-space,.ad-space-mpu-box,.ad-spot,.ad-statement,.ad-text,.ad-tile,.ad-top,.ad-top-left,.ad-unit,.ad-unit-300,.ad-unit-300-wrapper,.ad-unit-anchor,.ad-vtu,.ad-wrap,.ad-wrapper,.ad0,.ad1,.ad10,.ad120,.ad160,.ad160x600,.ad18,.ad19,.ad2,.ad21,.ad250c,.ad3,.ad300,.ad300_250,.ad300x100,.ad300x250,.ad300x250Top,.ad300x250_container,.ad300x250box,.ad300x600,.ad310,.ad336x280,.ad343x290,.ad450,.ad468,.ad468_60,.ad468x60,.ad6,.ad620x70,.ad626X35,.ad7,.ad728,.ad728_90,.ad728x90,.ad728x90_container,.ad8,.adAgate,.adBanner,.adBannerTyp1,.adBannerTypSortableList,.adBannerTypW300,.adBgBottom,.adBgMId,.adBgTop,.adBox,.adBoxContent,.adBoxSidebar,.adBoxSingle,.adCMRight,.adColumn,.adContainer,.adContour,.adCreative,.adDiv,.adElement,.adFrame,.adFtr,.adFullWidthMiddle,.adGoogle,.adHeader,.adHeadline,.adHolder,.adHome300x250,.adInNews,.adLabel,.adLeader,.adLeaderForum,.adLeaderboard,.adLeft,.adMastheadLeft,.adMastheadRight,.adMkt2Colw,.adModule,.adNewsChannel,.adNoOutline,.adNoticeOut,.adObj,.adPageBorderL,.adPageBorderR,.adPanel,.adRect,.adRight,.adSelfServiceAdvertiseLink,.adServer,.adSlot,.adSpBelow,.adSpace,.adSpacer,.adSpot,.adSpot-searchAd,.adSpot-textBox,.adSpot-twin,.adSpotIsland,.adSquare,.adSummary,.adSuperboard,.adTag,.adText,.adTileWrap,.adTiler,.adTitle,.adTout,.adTxt,.adWithTab,.adWrap,.adWrapper,.ad_1,.ad_125,.ad_130x90,.ad_160,.ad_160x600,.ad_2,.ad_3,.ad_300,.ad_300_250,.ad_300x250,.ad_336,.ad_336x280,.ad_350x250,.ad_468,.ad_600,.ad_728,.ad_728x90,.ad_amazon,.ad_biz,.ad_block_338,.ad_bottom_leaderboard,.ad_box,.ad_box2,.ad_callout,.ad_caption,.ad_contain,.ad_container,.ad_content,.ad_content_wide,.ad_contents,.ad_descriptor,.ad_footer,.ad_framed,.ad_front_promo,.ad_header,.ad_hpm,.ad_info_block,.ad_label,.ad_launchpad,.ad_leader,.ad_leaderboard,.ad_left,.ad_linkunit,.ad_loc,.ad_lrec,.ad_medrect,.ad_mpu,.ad_mr,.ad_mrec,.ad_mrec_title_article,.ad_notice,.ad_p360,.ad_partner,.ad_partners,.ad_plus,.ad_post,.ad_power,.ad_rectangle,.ad_right,.ad_sidebar,.ad_skyscraper,.ad_slug_table,.ad_space,.ad_space_300_250,.ad_sponsor,.ad_sponsoredsection,.ad_spot_b,.ad_spot_c,.ad_square_r,.ad_square_top,.ad_text,.ad_title,.ad_top,.ad_top_leaderboard,.ad_tower,.ad_unit,.ad_unit_rail,.ad_warning,.ad_wide,.ad_wrap,.ad_wrapper,.ad_wrapper_fixed,.ad_wrapper_top,.ad_zone,.adarea,.adbanner,.adbannerright,.adbar,.adborder,.adbot,.adbottom,.adbottomright,.adbox,.adbox-outer,.adbox_366x280,.adbox_468X60,.adbox_bottom,.adboxclass,.adcode,.adcolumn_wrapper,.adcontainer,.adcopy,.addiv,.adfoot,.adfootbox,.adframe,.adhead,.adheader,.adheader100,.adhere,.adhoriz,.adi,.adinfo,.adinside,.adjlink,.adkit,.adkit-advert,.adkit-lb-footer,.adlabel-horz,.adlabel-vert,.adleft,.adline,.adlink,.adlinks,.adlist,.adlnklst,.admarker,.admedrec,.admessage,.admodule,.admpu,.adnotice,.adops,.adpadding,.adpic,.adright,.adrotate_widget,.adrow,.adrow-post,.adrule,.ads-banner,.ads-categories-bsa,.ads-favicon,.ads-links-general,.ads-mpu,.ads-profile,.ads-right,.ads-sidebar,.ads-sky,.ads-text,.ads2,.ads3,.ads:not(body),.adsArea,.adsBelowHeadingNormal,.adsBox,.adsImages,.adsTextHouse,.adsTower2,.adsTowerWrap,.adsWithUs,.ads_300,.ads_728x90,.ads_big,.ads_big-half,.ads_brace,.ads_catDiv,.ads_container,.ads_disc_anchor,.ads_disc_leader,.ads_disc_lwr_square,.ads_disc_skyscraper,.ads_disc_square,.ads_div,.ads_header,.ads_leaderboard,.ads_mpu,.ads_outer,.ads_right,.ads_sc_bl_i,.ads_sc_tl_i,.ads_side,.ads_takeover,.ads_tr,.adsborder,.adsbyyahoo,.adsc,.adscontainer,.adscreen,.adsection_a2,.adsection_c2,.adsense,.adsense-heading,.adsense-right,.adsense-title,.adsenseBlock,.adsenseContainer,.adsenseblock,.adsenselr,.adsensesq,.adsidebox,.adsingle,.adslogan,.adspace,.adspace-MR,.adspace_buysell,.adspace_rotate,.adspacer,.adspot,.adstrip,.adtag,.adtext,.adtext_gray,.adtext_onwhite,.adtop,.adtravel,.adv-mpu,.adverTag,.adver_cont_below,.advert,.advert-box,.advert-head,.advert-horizontal,.advert-mpu,.advert-skyscraper,.advert-text,.advertCont,.advertContainer,.advertHeadline,.advertRight,.advertText,.advert_468x60,.advert_box,.advert_cont,.advert_leaderboard,.advert_note,.advertise,.advertise-here,.advertise-homestrip,.advertise-horz,.advertise-leaderboard,.advertise-vert,.advertiseContainer,.advertiseText,.advertisement,.advertisement-728x90,.advertisement-block,.advertisement-top,.advertisement468,.advertisementColumnGroup,.advertisementContainer,.advertisementLabel,.advertisementPanel,.advertisement_caption,.advertisement_g,.advertisement_header,.advertisement_horizontal,.advertiser,.advertising,.advertising-header,.advertising2,.advertisingTable,.advertising_block,.advertisment,.advertisment_two,.advertize,.advertorial,.advertorial-promo-box,.adverts,.advt,.advt-banner-3,.advt300,.advt720,.adwordListings,.adwrapper,.adwrapper-lrec,.adwrapper948,.affiliate,.affiliate-link,.affiliate-sidebar,.affiliateAdvertText,.agi-adsaleslinks,.alt_ad,.anchorAd,.aolSponsoredLinks,.aopsadvert,.article-ads,.articleAd,.articleAds,.articleAdsL,.articleEmbeddedAdBox,.article_ad,.article_adbox,.article_mpu_box,.articleads,.aseadn,.aux-ad-widget-2,.b-astro-sponsored-links_horizontal,.b-astro-sponsored-links_vertical,.banner-ad,.banner-ads,.banner-adverts,.banner300x100,.banner300x250,.banner468,.bannerAd,.bannerAdWrapper300x250,.bannerAdWrapper730x86,.banner_300x250,.banner_728x90,.banner_ad,.banner_ad_footer,.banner_ad_leaderboard,.bannerad,.barkerAd,.base-ad-mpu,.base_ad,.bgnavad,.big-ads,.bigAd,.big_ad,.big_ads,.bigad,.bigad2,.billboard_ad,.block-ad,.block-adsense,.block_ad,.blocked-ads,.blog-ads-container,.blogAd,.blogAdvertisement,.blogBigAd,.blog_ad,.blogads,.body_ad,.body_sponsoredresults_bottom,.body_sponsoredresults_middle,.body_sponsoredresults_top,.bookseller-header-advt,.bottomAd,.bottomAds,.bottom_ad_block,.bottom_sponsor,.bottomad,.bottomrightrailAd,.bottomvidad,.box-ad,.box-ads,.boxAd,.box_ad,.box_advertisment_62_border,.box_content_ad,.box_content_ads,.boxad,.bps-ad-wrapper,.bps-advertisement,.bps-advertisement-inline-ads,.bullet-sponsored-links,.bullet-sponsored-links-gray,.burstContentAdIndex,.buttonAd,.buttonAds,.buttonadbox,.bx_ad,.bx_ad_right,.cA-adStrap,.cColumn-TextAdsBox,.care2_adspace,.cb-ad-container,.cb_footer_sponsor,.cb_navigation_ad,.cbstv_ad_label,.cbzadvert,.cdAdTitle,.cdmainlineSearchAdParent,.cdsidebarSearchAdParent,.centerAd,.center_ad,.centerad,.clearerad,.cm_ads,.cms-Advert,.cnn160AdFooter,.cnnAd,.cnnMosaic160Container,.cnnStoreAd,.cnnStoryElementBoxAd,.cnnWCAdBox,.cnnWireAdLtgBox,.cnn_728adbin,.cnn_adcntr300x100,.cnn_adspc336cntr,.cnn_adtitle,.column2-ad,.conductor_ad,.confirm_ad_left,.confirm_ad_right,.confirm_leader_ad,.consoleAd,.container-adwords,.containerSqAd,.container_serendipity_plugin_google_adsense,.contentAd,.content_ad,.content_adsq,.contentad,.contenttextad,.contest_ad,.cp_ad,.cpmstarHeadline,.cpmstarText,.cs-mpu,.cspAd,.ct_ad,.cubeAd,.cube_ads,.currency_ad,.darla_ad,.dartAdImage,.dart_ad,.dart_tag,.dartadvert,.dartiframe,.dc-ad,.dcAdvertHeader,.deckAd,.deckads,.detail-ads,.detailMpu,.divAd,.divads,.divider_ad,.dmco_advert_iabrighttitle,.download_ad,.downloadad,.dynamic_ad,.e-ad,.ec-ads,.entryad,.ez-clientAd,.f_Ads,.featuredAds,.featuredadvertising,.flagads,.flash_advert,.flashad,.flexiad,.flipbook_v2_sponsor_ad,.footerAd,.footerAdModule,.footerTextAd,.footer_ad,.footer_ads,.footer_block_ad,.footer_line_ad,.footerad,.ft-ad,.ftdContentAd,.full_ad_box,.g3rtn-ad-site,.g_ggl_ad,.ga-textads-bottom,.ga-textads-top,.gads_cb,.gglAds,.googads,.google-ad-container,.google-ads,.google-ads-boxout,.google-ads-slim,.google-right-ad,.google-sponsored-ads,.google468_60,.googleAd,.googleAd-content,.googleAd-list,.googleAdBox,.googleAdSense,.googleAd_body,.googleAds,.googleAds_article_page_above_comments,.googleAdsense,.googleProfileAd,.google_ads_bom_title,.googlead,.googleaddiv,.googleaddiv2,.googleads,.googleads_300x250,.googleads_title,.gpAds,.gradientAd,.gsfAd,.gt_ad,.gt_ad_300x250,.gt_ad_728x90,.gt_adlabel,.gutter-ad-left,.gutter-ad-right,.h_Ads,.h_ad,.hd_advert,.header-ad,.header-advert,.headerAd,.headerAds,.headerAdvert,.header_ad,.header_ad_center,.header_advertisment,.hi5-ad,.highlightsAd,.hm_advertisment,.home-ad-links,.homeAd,.homeMediumAdGroup,.home_ad_bottom,.homead,.homepage-ad,.homepageFlexAdOuter,.homepageMPU,.hor_ad,.horiz_adspace,.horizontalAd,.horizontal_ad,.hortad,.houseAdsStyle,.hp2-adtag,.hp_ad_cont,.hp_ad_text,.hp_t_ad,.hp_w_ad,.ic-ads,.ico-adv,.idMultiAd,.image-advertisement,.imageads,.in-page-ad,.in-story-text-ad,.indy_googleads,.inline-mpu-left,.inlineSideAd,.inline_ad_title,.inlinead,.inlist-ad,.inner-advt-banner-3,.innerAds,.innerad,.inpostad,.islandAd,.islandAdvert,.islandad,.jp-advertisment-promotional,.js-advert,.kw_advert,.kw_advert_pair,.l_ad_sub,.l_banner.ads_show_if,.largeRectangleAd,.leader_ad,.leaderboardAd,.left-ad,.leftAd,.left_ads,.leftad,.leftbar_ad_160_600,.leftnavad,.lgRecAd,.lg_ad,.linead,.link_advertise,.live-search-list-ad-container,.log_ads,.lowerAds,.m4-adsbygoogle,.m_banner_ads,.macAd,.macad,.main-ad,.main-tabs-ad-block,.main_ad,.main_adbox,.map_media_banner_ad,.marginadsthin,.marketing-ad,.mdl-ad,.media-advert,.mediaAd,.mediaAdContainer,.medium-rectangle-ad,.menuItemBannerAd,.messageBoardAd,.micro_ad,.mid_ad,.midad,.min_navi_ad,.miniad,.mobile-sponsoring,.mod-ad-lrec,.mod-ad-n,.mod-adopenx,.mod_admodule,.module-ad-small,.module-ads,.moduleAdvertContent,.modulegad,.moduletable-advert,.moduletablesquaread,.mpu,.mpu-ad,.mpu-footer,.mpu-fp,.mpu-title,.mpu-top-left,.mpu-top-right,.mpuAd,.mpuBox,.mpuContainer,.mpuTextAd,.mpu_ad,.mpu_gold,.mpu_holder,.mpu_platinum,.mpu_text_ad,.mpuholderportalpage,.mrec_advert,.ms-ads-link,.msfg-shopping-mpu,.mwaads,.nSponsoredLcContent,.nSponsoredLcTopic,.nadvt300,.narrow_ad_unit,.narrow_ads,.naviad,.nba300Ad,.nbaT3Ad160,.nbaTVPodAd,.nbaTwo130Ads,.nbc_ad_carousel_wrp,.newTopAdContainer,.newad,.nf-adbox,.nn-mpu,.noAdForLead,.normalAds,.nrAds,.oas-bottom-ads,.oio-banner-zone,.oio-link-sidebar,.oio-zone-position,.onethirdadholder,.openx,.openx-ad,.other_adv2,.ov_spns,.pageGoogleAd,.pageGoogleAdFlat,.pageLeaderAd,.pagead,.partnersTextLinks,.pencil_ad,.player_ad_box,.player_page_ad_box,.pnp_ad,.podSponsoredLink,.post-ad,.post_ad,.post_sponsor_unit,.postbit_adbit_register,.postbit_adcode,.prebodyads,.premium_ad_container,.promoAd,.promoAds,.promo_ad,.publication-ad,.publicidad,.puff-advertorials,.qa_ad_left,.quigo-ad,.qzvAdDiv,.r_ad_box,.rad_container,.rectad,.rectangleAd,.rectanglead,.redads_cont,.regularad,.relatedAds,.remads,.result_ad,.results_sponsor,.results_sponsor_right,.reviewMidAdvertAlign,.rght300x250,.rhads,.rhs-ad,.rhs-ads-panel,.right-ad,.right-ad-holder,.right-ad2,.right-ads2,.rightAd,.right_ad,.right_ad_text,.right_ads,.right_col_ad,.right_hand_advert_column,.rightad,.rightad_1,.rightad_2,.rightads,.rightadunit,.rightcol_boxad,.rightcoladvert,.rt_ad1_300x90,.rt_ad_300x250,.rt_ad_call,.savvyad_unit,.sb-ad-sq-bg,.sbAdUnitContainer,.sb_adsN,.sb_adsNv2,.sb_adsW,.sb_adsWv2,.scanAd,.sci-ad-main,.sci-ad-sub,.search-results-ad,.search-sponsor,.search-sponsored,.searchAd,.searchSponsoredResultsBox,.search_column_results_sponsored,.search_results_sponsored_top,.section-sponsor,.section_mpu_wrapper,.selfServeAds,.sidbaread,.side-ad,.side-ads,.side_ad,.side_ad2,.sidead,.sideadsbox,.sideadvert,.sidebar-ad,.sidebar-text-ad,.sidebarAd,.sidebarAdUnit,.sidebarAdvert,.sidebar_ad,.sidebar_ad_300_250,.sidebar_box_ad,.sidebarad,.sidebarad_bottom,.sideheadnarrowad,.sideheadsponsorsad,.singleAd,.singleAdsContainer,.singlead,.sitesponsor,.skinAd,.skin_ad_638,.sky-ad,.skyAd,.skyAdd,.sky_ad,.skyad,.skyscraper-ad,.slideshow-ad,.slinks,.slpBigSlimAdUnit,.slpSquareAdUnit,.sm_ad,.smallSkyAd1,.smallSkyAd2,.small_ad,.small_ads,.smallad-left,.smallsponsorad,.specialAd175x90,.speedyads,.sphereAdContainer,.spl_ad,.spl_ad2,.spl_ad_plus,.splitAd,.spons-link,.sponslink,.sponsor-ad,.sponsor-links,.sponsorArea,.sponsorPost,.sponsorPostWrap,.sponsor_ad_area,.sponsor_line,.sponsor_links,.sponsoradtitle,.sponsorbox,.sponsored,.sponsored-chunk,.sponsored-editorial,.sponsored-links,.sponsored-links-holder,.sponsored-post,.sponsored-results,.sponsored-text,.sponsoredLinks,.sponsoredLinksHeader,.sponsored_ads,.sponsored_box,.sponsored_box_search,.sponsored_by,.sponsored_links,.sponsored_links_title_container,.sponsored_links_title_container_top,.sponsored_links_top,.sponsored_results,.sponsoredibbox,.sponsoredlinks,.sponsoredtextlink_container,.sponsorlink,.sponsorlink2,.spotlightAd,.squareAd,.square_ad,.squared_ad,.ss-ad-mpu,.staticAd,.store-ads,.story_AD,.subad,.subcontent-ad,.supercommentad_left,.supercommentad_right,.supportAdItem,.surveyad,.t10ad,.tab_ad,.tab_ad_area,.tablebordersponsor,.tadsanzeige,.tadsbanner,.tadselement,.tallad,.tblTopAds,.tbl_ad,.teaser-sponsor,.teaserAdContainer,.teaser_adtiles,.text-ad-links,.text-g-advertisement,.text-g-group-short-rec-ad,.text-g-net-grp-google-ads-article-page,.textAd,.textAds,.text_ad,.text_ads,.textad,.textad_headline,.textadbox,.textads,.textlink-ads,.thisIsAd,.thisIsAnAd,.ticket-ad,.tileAds,.title-ad,.title_adbig,.tncms-region-ads,.toolad,.toolbar-ad,.top-ad,.top-ad-space,.top-ads,.top-menu-ads,.topAdWrap,.topAds,.topAdvertisement,.topBannerAd,.top_Ad,.top_ad,.top_ad_728_90,.top_ad_disclaimer,.top_ad_wrapper,.top_ads,.top_advert,.top_advertising_lb,.top_container_ad,.top_sponsor,.topad,.topadbox,.topads,.topadspot,.topcontentadvertisement,.topic_inad,.topstoriesad,.towerAd,.towerAdLeft,.towerAds,.tower_ad_disclaimer,.ts-ad_unit_bigbox,.ts-banner_ad,.ttlAdsensel,.tto-sponsored-element,.twoColumnAd,.twoadcoll,.twoadcolr,.tx_smartadserver_pi1,.txt-ads,.txtadvertise,.type_miniad,.type_promoads,.undertimyads,.usenext,.vertad,.videoAd,.videoBoxAd,.video_ad,.view-promo-mpu-right,.wide-ad,.wide-skyscraper-ad,.wideAdTable,.wide_ad_unit_top,.wide_ads,.widget-ad,.widget-entry-ads-160,.wikia_ad_placeholder,.withAds,.wnMultiAd,.wp125ad,.wpn_ad_content,.wsSponsoredLinksRight,.wsTopSposoredLinks,.x03-adunit,.x04-adunit,.y-ads,.y-ads-wide,.y7-advertisement,.yahoo-sponsored,.yahoo_ads,.yan-sponsored,.ygrp-ad,.yrail_ad_wrap,.yrail_ads,.ysmsponsor,.ysponsor,a[href^="http://adserving.liveuniversenetwork.com/"],a[href^="http://latestdownloads.net/download.php?"],a[href^="http://secure.signup-page.com/"],a[href^="http://secure.signup-way.com/"],a[href^="http://www.FriendlyDuck.com/AF_"],a[href^="http://www.adbrite.com/mb/commerce/purchase_form.php?"],a[href^="http://www.friendlyduck.com/AF_"],a[href^="http://www.google.com/aclk?"],a[href^="http://www.liutilities.com/aff"],a[href^="http://www.my-dirty-hobby.com/?sub="],a[href^="http://www.ringtonematcher.com/"],#mbEnd[cellspacing="0"][style="padding: 0pt; white-space: nowrap;"],div#mclip_container:first-child:last-child,div#tads.c,table.ra[align="left"][width="30%"],table.ra[align="right"][width="30%"] { visibility:hidden !important;    display:none !important; }</STYLE></HTML>